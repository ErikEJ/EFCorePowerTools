<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.EntityFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy">
            <summary>
                Indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy.Snapshot">
            <summary>
                Original values are recorded when an entity is queried from the database. Changes are detected by scanning the
                current property values and comparing them to the recorded values. This scanning takes place when
                <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> is called, or when another API call (such as <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />)
                triggers the change detection process.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy.ChangedNotifications">
            <summary>
                To use this strategy, the entity class must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
                Original values are recorded when an entity is queried from the database. Properties are marked as modified when the
                entity raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy.ChangingAndChangedNotifications">
            <summary>
                <para>
                    To use this strategy, the entity class must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> and
                    <see cref="T:System.ComponentModel.INotifyPropertyChanging" />.
                    Original values are recorded when the entity raises the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> event. Properties
                    are
                    marked as modified when the entity raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
                </para>
                <para>
                    Original values are only recorded when they are required to save changes to the entity. For example, properties that are configured
                    as
                    concurrency tokens.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues">
            <summary>
                <para>
                    To use this strategy, the entity class must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> and
                    <see cref="T:System.ComponentModel.INotifyPropertyChanging" />.
                    Original values are recorded when the entity raises the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />. Properties are
                    marked as modified when the entity raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
                </para>
                <para>
                    Original values are only recorded for all properties, regardless of whether they are required to save changes to the entity.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker">
            <summary>
                Provides access to change tracking information and operations for entity instances the context is tracking.
                Instances of this class are typically obtained from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.ChangeTracker" /> and it is not designed
                to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.#ctor(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled">
            <summary>
                <para>
                    Gets or sets a value indicating whether the <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> method is called
                    automatically by methods of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> and related classes.
                </para>
                <para>
                    The default value is true. This ensures the context is aware of any changes to tracked entity instances
                    before performing operations such as <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or returning change tracking
                    information. If you disable automatic detect changes then you must ensure that
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> is called when entity instances have been modified.
                    Failure to do so may result in some changes not being persisted during
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or out-of-date change tracking information being returned.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.LazyLoadingEnabled">
            <summary>
                <para>
                    Gets or sets a value indicating whether navigation properties for tracked entities
                    will be loaded on first access.
                </para>
                <para>
                    The default value is true. However, lazy loading will only occur for navigation properties
                    of entities that have also been configured in the model for lazy loading.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior">
            <summary>
                <para>
                    Gets or sets the tracking behavior for LINQ queries run against the context. Disabling change tracking
                    is useful for read-only scenarios because it avoids the overhead of setting up change tracking for each
                    entity instance. You should not disable change tracking if you want to manipulate entity instances and
                    persist those changes to the database using <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
                </para>
                <para>
                    This method sets the default behavior for the context, but you can override this behavior for individual
                    queries using the <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
                    and <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})" /> methods.
                </para>
                <para>
                    The default value is <see cref="F:Microsoft.EntityFrameworkCore.QueryTrackingBehavior.TrackAll" />. This means the change tracker will
                    keep track of changes for all entities that are returned from a LINQ query.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries">
            <summary>
                Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for each entity being tracked by the context.
                The entries provide access to change tracking information and operations for each entity.
            </summary>
            <returns> An entry for each entity being tracked. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries``1">
            <summary>
                Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for all entities of a given type being tracked by the context.
                The entries provide access to change tracking information and operations for each entity.
            </summary>
            <typeparam name="TEntity"> The type of entities to get entries for. </typeparam>
            <returns> An entry for each entity of the given type that is being tracked. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.HasChanges">
            <summary>
                <para>
                    Checks if any new, deleted, or changed entities are being tracked
                    such that these changes will be sent to the database if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)" /> is called.
                </para>
                <para>
                    Note that this method calls <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> unless
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> has been set to false.
                </para>
            </summary>
            <returns> True if there are changes to save, otherwise false. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#IStateManager}#Instance">
            <summary>
                <para>
                    Gets the internal state manager being used to store information about tracked entities.
                </para>
                <para>
                    This property is intended for use by extension methods. It is not intended to be used in
                    application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Context">
            <summary>
                Gets the context this change tracker belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges">
            <summary>
                Scans the tracked entity instances to detect any changes made to the instance data. <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />
                is usually called automatically by the context when up-to-date information is required (before
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> and when returning change tracking information). You typically only need to
                call this method if you have disabled <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges">
            <summary>
                Accepts all changes made to entities in the context. It will be assumed that the tracked entities
                represent the current state of the database. This method is typically called by <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                after changes have been successfully saved to the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TrackGraph(System.Object,System.Action{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode})">
            <summary>
                <para>
                    Begins tracking an entity and any entities that are reachable by traversing it's navigation properties.
                    Traversal is recursive so the navigation properties of any discovered entities will also be scanned.
                    The specified <paramref name="callback" /> is called for each discovered entity and must set the
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> that each entity should be tracked in. If no state is set, the entity
                    remains untracked.
                </para>
                <para>
                    This method is designed for use in disconnected scenarios where entities are retrieved using one instance of
                    the context and then changes are saved using a different instance of the context. An example of this is a
                    web service where one service call retrieves entities from the database and another service call persists
                    any changes to the entities. Each service call uses a new instance of the context that is disposed when the
                    call is complete.
                </para>
                <para>
                    If an entity is discovered that is already tracked by the context, that entity is not processed (and it's
                    navigation properties are not traversed).
                </para>
            </summary>
            <param name="rootEntity"> The entity to begin traversal from. </param>
            <param name="callback">
                An action to configure the change tracking information for each entity. For the entity to begin being tracked,
                the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> must be set.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TrackGraph``1(System.Object,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Boolean})">
            <summary>
                <para>
                    Begins tracking an entity and any entities that are reachable by traversing it's navigation properties.
                    Traversal is recursive so the navigation properties of any discovered entities will also be scanned.
                    The specified <paramref name="callback" /> is called for each discovered entity and must set the
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> that each entity should be tracked in. If no state is set, the entity
                    remains untracked.
                </para>
                <para>
                    This method is designed for use in disconnected scenarios where entities are retrieved using one instance of
                    the context and then changes are saved using a different instance of the context. An example of this is a
                    web service where one service call retrieves entities from the database and another service call persists
                    any changes to the entities. Each service call uses a new instance of the context that is disposed when the
                    call is complete.
                </para>
                <para>
                    Typically traversal of the graph should stop whenever an already tracked entity is encountered or when
                    an entity is reached that should not be tracked. For this typical behavior, use the
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TrackGraph(System.Object,System.Action{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode})"/> overload. This overload, on the other hand,
                    allows the callback to decide when traversal will end, but the onus is then on the caller to ensure that
                    traversal will not enter an infinite loop.
                </para>
            </summary>
            <param name="rootEntity"> The entity to begin traversal from. </param>
            <param name="state"> An arbitrary state object passed to the callback. </param>
            <param name="callback">
                An delegate to configure the change tracking information for each entity. The second parameter to the
                callback is the arbitrary state object passed above. Iteration of the graph will not continue down the graph
                if the callback returns <c>false</c>.
            </param>
            <typeparam name="TState"> The type of the state object. </typeparam>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Tracked">
            <summary>
                An event fired when an entity is tracked by the context, either because it was returned
                from a tracking query, or because it was attached or added to the context.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.StateChanged">
            <summary>
                <para>
                    An event fired when an entity that is tracked by the associated <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has moved
                    from one <see cref="T:Microsoft.EntityFrameworkCore.EntityState" /> to another.
                </para>
                <para>
                    Note that this event does not fire for entities when they are first tracked by the context.
                    Use the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Tracked" /> event to get notified when the context begins tracking an entity.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry">
            <summary>
                <para>
                    Provides access to change tracking and loading information for a collection
                    navigation property that associates this entity to a collection of another entities.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry.CurrentValue">
            <summary>
                Gets or sets the value currently assigned to this property. If the current value is set using this property,
                the change tracker is aware of the change and <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> is not required
                for the context to detect the change.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry.Load">
            <summary>
                <para>
                    Loads the entities referenced by this navigation property, unless <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.IsLoaded" />
                    is already set to true.
                </para>
                <para>
                    Note that entities that are already being tracked are not overwritten with new data from the database.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry.LoadAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Loads entities referenced by this navigation property, unless <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.IsLoaded" />
                    is already set to true.
                </para>
                <para>
                    Note that entities that are already being tracked are not overwritten with new data from the database.
                </para>
                <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous save operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry.Query">
            <summary>
                <para>
                    Returns the query that would be used by <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry.Load" /> to load entities referenced by
                    this navigation property.
                </para>
                <para>
                    The query can be composed over using LINQ to perform filtering, counting, etc. without
                    actually loading all entities from the database.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry.EnsureInitialized">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry`2">
            <summary>
                <para>
                    Provides access to change tracking and loading information for a collection
                    navigation property that associates this entity to a collection of another entities.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity the property belongs to. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry`2.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry`2.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry`2.EntityEntry">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> to which this member belongs.
            </summary>
            <value> An entry for the entity that owns this member. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry`2.CurrentValue">
            <summary>
                Gets or sets the value currently assigned to this property. If the current value is set using this property,
                the change tracker is aware of the change and <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> is not required
                for the context to detect the change.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry`2.Query">
            <summary>
                <para>
                    Returns the query that would be used by <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry.Load" /> to load entities referenced by
                    this navigation property.
                </para>
                <para>
                    The query can be composed over using LINQ to perform filtering, counting, etc. without
                    actually loading all entities from the database.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given entity.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.InternalEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Entity">
            <summary>
                Gets the entity being tracked by this entry.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State">
            <summary>
                <para>
                    Gets or sets that state that this entity is being tracked in.
                </para>
                <para>
                    This method sets only the state of the single entity represented by this entry. It does
                    not change the state of other entities reachable from this one.
                </para>
                <para>
                    When setting the state, the entity will always end up in the specified state. For example, if you
                    change the state to <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> the entity will be marked for deletion regardless
                    of its current state. This is different than calling <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.Remove(`0)" /> where the entity
                    will be disconnected (rather than marked for deletion) if it is in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Context">
            <summary>
                Gets the context that is tracking the entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Metadata">
            <summary>
                Gets the metadata about the shape of the entity, its relationships to other entities, and how it maps to the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Member(System.String)">
            <summary>
                Provides access to change tracking information and operations for a given
                property or navigation property of this entity.
            </summary>
            <param name="propertyName"> The property to access information and operations for. </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Members">
            <summary>
                Provides access to change tracking information and operations for all
                properties and navigation properties of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigation(System.String)">
            <summary>
                Provides access to change tracking information and operations for a given
                navigation property of this entity.
            </summary>
            <param name="propertyName"> The property to access information and operations for. </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigations">
            <summary>
                Provides access to change tracking information and operations for all
                navigation properties of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Property(System.String)">
            <summary>
                Provides access to change tracking information and operations for a given
                property of this entity.
            </summary>
            <param name="propertyName"> The property to access information and operations for. </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Properties">
            <summary>
                Provides access to change tracking information and operations for all
                properties of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reference(System.String)">
            <summary>
                Provides access to change tracking and loading information for a reference (i.e. non-collection)
                navigation property that associates this entity to another entity.
            </summary>
            <param name="propertyName"> The name of the navigation property. </param>
            <returns>
                An object that exposes change tracking information and operations for the
                given navigation property.
            </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.References">
            <summary>
                Provides access to change tracking information and loading information for all
                reference (i.e. non-collection) navigation properties of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collection(System.String)">
            <summary>
                Provides access to change tracking and loading information for a collection
                navigation property that associates this entity to a collection of another entities.
            </summary>
            <param name="propertyName"> The name of the navigation property. </param>
            <returns>
                An object that exposes change tracking information and operations for the
                given navigation property.
            </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collections">
            <summary>
                Provides access to change tracking information and loading information for all
                collection navigation properties of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.IsKeySet">
            <summary>
                <para>
                    Gets a value indicating if the key values of this entity have been assigned a value.
                </para>
                <para>
                    For keys with store-generated properties (e.g. mapping to Identity columns), the
                    return value will  be false if any of the store-generated properties have the
                    CLR default value.
                </para>
                <para>
                    For keys without any store-generated properties, the return value will always be
                    true since any value is considered a valid key value.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues">
            <summary>
                Gets the current property values for this entity.
            </summary>
            <value> The current values. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues">
            <summary>
                Gets the original property values for this entity. The original values are the property
                values as they were when the entity was retrieved from the database.
            </summary>
            <value> The original values. </value>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues">
            <summary>
                <para>
                    Queries the database for copies of the values of the tracked entity as they currently
                    exist in the database. If the entity is not found in the database, then null is returned.
                </para>
                <para>
                    Note that changing the values in the returned dictionary will not update the values
                    in the database.
                </para>
            </summary>
            <returns> The store values, or null if the entity does not exist in the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Queries the database for copies of the values of the tracked entity as they currently
                    exist in the database. If the entity is not found in the database, then null is returned.
                </para>
                <para>
                    Note that changing the values in the returned dictionary will not update the values
                    in the database.
                </para>
                <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the store values,
                or null if the entity does not exist in the database.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reload">
            <summary>
                <para>
                    Reloads the entity from the database overwriting any property values with values from the database.
                </para>
                <para>
                    The entity will be in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state after calling this method,
                    unless the entity does not exist in the database, in which case the entity will be
                    <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Detached" />. Finally, calling Reload on an <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" />
                    entity that does not exist in the database is a no-op. Note, however, that an Added entity may
                    not yet have had its permanent key value created.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Reloads the entity from the database overwriting any property values with values from the database.
                </para>
                <para>
                    The entity will be in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state after calling this method,
                    unless the entity does not exist in the database, in which case the entity will be
                    <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Detached" />. Finally, calling Reload on an <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" />
                    entity that does not exist in the database is a no-op. Note, however, that an Added entity may
                    not yet have had its permanent key value created.
                </para>
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryEventArgs">
            <summary>
                Event arguments for events relating to tracked <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" />s.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryEventArgs.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryEventArgs.Entry">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode">
            <summary>
                Provides access to change tracking information and operations for a node in a
                graph of entities that is being traversed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode.SourceEntry">
            <summary>
                Gets the entry tracking information about this entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode.InboundNavigation">
            <summary>
                Gets the navigation property that is being traversed to reach this node in the graph.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode.NodeState">
            <summary>
                Gets or sets state that will be available to all nodes that are visited after this node.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode.Entry">
            <summary>
                Gets the entry tracking information about this entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance">
            <summary>
                <para>
                    Gets the internal entry that is tracking information about this entity.
                </para>
                <para>
                    This property is intended for use by extension methods. It is not intended to be used in
                    application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode.CreateNode(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                Creates a new node for the entity that is being traversed next in the graph.
            </summary>
            <param name="currentNode"> The node that the entity is being traversed from. </param>
            <param name="internalEntityEntry">
                The internal entry tracking information about the entity being traversed to.
            </param>
            <param name="reachedVia"> The navigation property that is being traversed to reach the new node. </param>
            <returns> The newly created node. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given entity.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being tracked by this entry. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1.Entity">
            <summary>
                Gets the entity being tracked by this entry.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Provides access to change tracking information and operations for a given
                property of this entity.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to access information and operations for
                (<c>t => t.Property1</c>).
            </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Provides access to change tracking and loading information for a reference (i.e. non-collection)
                navigation property that associates this entity to another entity.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to access information and operations for
                (<c>t => t.Property1</c>).
            </param>
            <returns>
                An object that exposes change tracking information and operations for the
                given navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
                Provides access to change tracking and loading information for a collection
                navigation property that associates this entity to a collection of another entities.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to access information and operations for
                (<c>t => t.Property1</c>).
            </param>
            <returns>
                An object that exposes change tracking information and operations for the
                given navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1.Reference``1(System.String)">
            <summary>
                Provides access to change tracking and loading information for a reference (i.e. non-collection)
                navigation property that associates this entity to another entity.
            </summary>
            <param name="propertyName"> The name of the navigation property. </param>
            <returns>
                An object that exposes change tracking information and operations for the
                given navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1.Collection``1(System.String)">
            <summary>
                Provides access to change tracking and loading information for a collection
                navigation property that associates this entity to a collection of another entities.
            </summary>
            <param name="propertyName"> The name of the navigation property. </param>
            <returns>
                An object that exposes change tracking information and operations for the
                given navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1.Property``1(System.String)">
            <summary>
                Provides access to change tracking information and operations for a given
                property of this entity.
            </summary>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <param name="propertyName"> The property to access information and operations for. </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs">
            <summary>
                Event arguments for the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.StateChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs.OldState">
            <summary>
                The state that the entity is transitioning from.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs.NewState">
            <summary>
                The state that the entity is transitioning to.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs">
            <summary>
                Event arguments for the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Tracked" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs.FromQuery">
            <summary>
                <c>True</c> if the entity is being tracked as part of a database query; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator">
            <summary>
                A service to traverse a graph of entities and perform some action on at each node.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraph``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Boolean})">
            <summary>
                Traverses a graph of entities allowing an action to be taken at each node.
            </summary>
            <param name="node"> The node that is being visited. </param>
            <param name="state"> An arbitrary state object. </param>
            <param name="handleNode"> A delegate to call to handle the node. </param>
            <typeparam name="TState"> The type of the state object. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraphAsync``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Traverses a graph of entities allowing an action to be taken at each node.
            </summary>
            <param name="node"> The node that is being visited. </param>
            <param name="state"> An arbitrary state object. </param>
            <param name="handleNode"> A delegate to call to handle the node. </param>
            <param name="cancellationToken">  A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <typeparam name="TState"> The type of the state object. </typeparam>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.ToObject">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.SetValues(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.Clone">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.SetValues(Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.Properties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.Item(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.Item(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.GetValue``1(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues.GetValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.SkipDetectChangesAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.Suspend">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.Resume">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.PropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.PropertyChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeTrackerFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeTrackerFactory.#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeTrackerFactory.Create">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeNullableValueFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeNullableValueFactory.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeNullableValueFactory.EqualityComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromKeyValues(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.FindNullPropertyInValueBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.FindNullPropertyInCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.EqualityComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.Properties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Object[]@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Object[]@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Object[]@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Object[]@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Object[]@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromEntry(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object},System.Object[]@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.CreateEqualityComparer(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentPropertyValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentPropertyValues.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentPropertyValues.GetValue``1(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentPropertyValues.GetValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentPropertyValues.SetValueInternal(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentPropertyValues.GetValueInternal(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentKeyValueFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentKeyValueFactoryFactory.Create``1(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentKeyValueFactoryFactory.CreateSimple``1(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentKeyValueFactoryFactory.CreateComposite(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMap`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMap`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory{`0},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMap`1.Add(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMap`1.Remove(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMap`1.Update(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMap`1.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMap`1.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMapFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMapFactoryFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EmptyShadowValuesFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EmptyShadowValuesFactoryFactory.GetPropertyIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EmptyShadowValuesFactoryFactory.GetPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EmptyShadowValuesFactoryFactory.UseEntityVariable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EmptyShadowValuesFactoryFactory.CreateReadShadowValueExpression(System.Linq.Expressions.ParameterExpression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraphAsync``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraphAsync(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.ToObject">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.SetValues(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.Clone">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.SetValues(Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.Properties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.Item(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.Item(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.SetValueInternal(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues.GetValueInternal(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.Suspend">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.Resume">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeTrackerFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeTrackerFactory.Create">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory{`0},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.PrincipalKeyValueFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Key">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Contains(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Contains(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.TryGetEntry(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.TryGetEntry(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.TryGetEntryUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.TryGetEntryUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.AddOrUpdate(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(System.Object[],Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(`0,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.GetDependentsMap(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.FindDependentsMap(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Clear">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Remove(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.RemoveUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Remove(`0,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMapFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMapFactoryFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMapFactoryFactoryBase">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMapFactoryFactoryBase.GetKeyType(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory`1.TryCreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory`1.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory`1.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory`1.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory`1.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap.Add(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap.Update(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap.Remove(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher.AttachGraph(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher.AttachGraphAsync(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityStateListener">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityStateListener.StateChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityStateListener.StateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.Key">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.Contains(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.Contains(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.TryGetEntry(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.TryGetEntry(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.TryGetEntryUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.TryGetEntryUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.AddOrUpdate(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.Add(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.Add(System.Object[],Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.Remove(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.RemoveUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.GetDependentsMap(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.FindDependentsMap(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap.Clear">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory.Create(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory.Create(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier.StateChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier.StateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier.TrackedFromQuery(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier.NavigationReferenceChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier.NavigationCollectionChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier.KeyPropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IKey},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IForeignKey},System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier.PropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier.PropertyChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber.SnapshotAndSubscribe(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber.Unsubscribe(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyListener">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyListener.KeyPropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IKey},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IForeignKey},System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyPropagator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyPropagator.PropagateValue(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyPropagator.PropagateValueAsync(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ILocalViewListener">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ILocalViewListener.RegisterView(System.Action{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationFixer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationListener">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationListener.NavigationReferenceChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationListener.NavigationCollectionChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalClrEntityEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalClrEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalClrEntityEntry.Entity">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SharedIdentityEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.EntityState})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.EntityState},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery(System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PropertyHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOrCreateCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CollectionContains(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls(System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeyUnknown">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging(System.Object,System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryFactory.Create(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryFactory.Create(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.#ctor(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityStateListener},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationListener},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyListener},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IQueryTrackingListener})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.StateChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.StateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.TrackedFromQuery(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.NavigationReferenceChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.NavigationCollectionChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.KeyPropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IKey},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IForeignKey},System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.PropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.PropertyChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntrySubscriber">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntrySubscriber.SnapshotAndSubscribe(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntrySubscriber.Unsubscribe(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.Entity">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.ReadShadowValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.ReadPropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.PropertyHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.GetOrCreateCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.CollectionContains(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.AddToCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.RemoveFromCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.Entity">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.ReadShadowValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.ReadPropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.PropertyHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.GetOrCreateCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.CollectionContains(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.AddToCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry.RemoveFromCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INullableValueFactory`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INullableValueFactory`1.EqualityComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromKeyValues(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.FindNullPropertyInValueBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.FindNullPropertyInCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.EqualityComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener.PropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener.PropertyChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IQueryTrackingListener">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IQueryTrackingListener.TrackedFromQuery(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry(System.Object,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.CreateEntry(System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.BeginTrackingQuery">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(System.Object,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(System.Object,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Entries">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ChangedCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.InternalEntityEntryNotifier">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ValueGenerationManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Context">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EntityMaterializerSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetRecordedReferers(System.Object,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetEntriesToSave">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChanges(System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.AcceptAllChanges">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.CreateEntityFinder(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EndSingleQueryMode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Unsubscribe">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Tracked">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.OnTracked(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StateChanged">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.OnStateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SensitiveLoggingEnabled">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager.Generate(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager.Propagate(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager.GenerateAsync(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager.MayGetTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyPropagator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyPropagator.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorSelector)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyPropagator.PropagateValue(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyPropagator.PropagateValueAsync(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyValueFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyValueFactoryFactory.Create``1(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.LocalViewListener">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.LocalViewListener.RegisterView(System.Action{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.LocalViewListener.StateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.LocalViewListener.StateChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.MultiSnapshot">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.MultiSnapshot.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.MultiSnapshot.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.MultiSnapshot.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher,Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationReferenceChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationCollectionChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.KeyPropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IKey},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IForeignKey},System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.TrackedFromQuery(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableKeyIdentityMap`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableKeyIdentityMap`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory{`0},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableKeyIdentityMap`1.Add(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableKeyIdentityMap`1.RemoveUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1.AddNewCore">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1.CancelNew(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1.ClearItems">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1.EndNew(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1.RemoveItem(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1.SetItem(System.Int32,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalPropertyValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalPropertyValues.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalPropertyValues.GetValue``1(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalPropertyValues.GetValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalPropertyValues.SetValueInternal(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalPropertyValues.GetValueInternal(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalValuesFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalValuesFactoryFactory.GetPropertyIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalValuesFactoryFactory.GetPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.RelationshipSnapshotFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.RelationshipSnapshotFactoryFactory.GetPropertyIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.RelationshipSnapshotFactoryFactory.GetPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ShadowValuesFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ShadowValuesFactoryFactory.GetPropertyIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ShadowValuesFactoryFactory.GetPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ShadowValuesFactoryFactory.UseEntityVariable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ShadowValuesFactoryFactory.CreateReadShadowValueExpression(System.Linq.Expressions.ParameterExpression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleFullyNullableDependentKeyValueFactory`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleFullyNullableDependentKeyValueFactory`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleFullyNullableDependentKeyValueFactory`1.TryCreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleFullyNullableDependentKeyValueFactory`1.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleFullyNullableDependentKeyValueFactory`1.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleFullyNullableDependentKeyValueFactory`1.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleFullyNullableDependentKeyValueFactory`1.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNonNullableDependentKeyValueFactory`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNonNullableDependentKeyValueFactory`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNonNullableDependentKeyValueFactory`1.TryCreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNonNullableDependentKeyValueFactory`1.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNonNullableDependentKeyValueFactory`1.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNonNullableDependentKeyValueFactory`1.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNonNullableDependentKeyValueFactory`1.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullableDependentKeyValueFactory`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullableDependentKeyValueFactory`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullableDependentKeyValueFactory`1.TryCreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullableDependentKeyValueFactory`1.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullableDependentKeyValueFactory`1.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullableDependentKeyValueFactory`1.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullableDependentKeyValueFactory`1.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullablePrincipalDependentKeyValueFactory`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullablePrincipalDependentKeyValueFactory`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullablePrincipalDependentKeyValueFactory`2.TryCreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullablePrincipalDependentKeyValueFactory`2.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullablePrincipalDependentKeyValueFactory`2.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullablePrincipalDependentKeyValueFactory`2.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullablePrincipalDependentKeyValueFactory`2.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,`0@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1.CreateFromKeyValues(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1.CreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1.FindNullPropertyInValueBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1.CreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1.FindNullPropertyInCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1.CreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1.CreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1.EqualityComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.MaxGenericTypes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Empty">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders``1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType(System.Type[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`30">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`30.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23,`24,`25,`26,`27,`28,`29)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`30.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`30.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`29">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`29.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23,`24,`25,`26,`27,`28)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`29.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`29.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`28">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`28.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23,`24,`25,`26,`27)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`28.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`28.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`27">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`27.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23,`24,`25,`26)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`27.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`27.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`26">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`26.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23,`24,`25)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`26.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`26.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`25">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`25.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23,`24)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`25.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`25.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`24">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`24.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`24.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`24.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`23">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`23.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`23.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`23.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`22">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`22.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`22.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`22.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`21">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`21.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`21.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`21.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`20">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`20.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`20.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`20.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`19">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`19.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`19.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`19.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`18">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`18.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`18.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`18.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`17">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`17.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`17.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`17.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`16">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`16.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`16.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`16.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`15">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`15.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`15.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`15.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`14">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`14.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`14.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`14.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`13">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`13.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`13.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`13.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`12">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`12.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`12.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`12.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`11">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`11.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`11.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`11.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`10">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`10.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`10.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`10.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`9">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`9.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`9.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`9.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`8">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`8.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`8.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`7">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`7.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`7.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`6">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`6.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`6.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`5">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`5.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`5.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`4">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`4.#ctor(`0,`1,`2,`3)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`4.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`4.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`3">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`3.#ctor(`0,`1,`2)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`3.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`3.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`2.#ctor(`0,`1)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`2.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`2.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`1.#ctor(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`1.GetValue``1(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`1.Item(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateEmpty(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateConstructorExpression(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Linq.Expressions.ParameterExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateReadShadowValueExpression(System.Linq.Expressions.ParameterExpression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.GetPropertyIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.GetPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.UseEntityVariable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory`1.Create(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SortableBindingList`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SortableBindingList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SortableBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SortableBindingList`1.RemoveSortCore">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SortableBindingList`1.IsSortedCore">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SortableBindingList`1.SortDirectionCore">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SortableBindingList`1.SortPropertyCore">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SortableBindingList`1.SupportsSortingCore">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SensitiveLoggingEnabled">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EndSingleQueryMode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.InternalEntityEntryNotifier">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ValueGenerationManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Context">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EntityFinderFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EntityMaterializerSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry(System.Object,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.CreateEntry(System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.BeginTrackingQuery">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(System.Object,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(System.Object,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Entries">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Unsubscribe">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ResetState">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetRecordedReferers(System.Object,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.CreateEntityFinder(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ChangedCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetEntriesToSave">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetInternalEntriesToSave">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.AcceptAllChanges">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Tracked">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.OnTracked(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StateChanged">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.OnStateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource,Microsoft.EntityFrameworkCore.Internal.IDbSetSource,Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource,Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager" />.
                </para>
                <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.InternalEntityEntryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.InternalEntityEntrySubscriber">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.InternalEntityEntryNotifier">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.ValueGenerationManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.Model">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.Database">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.ConcurrencyDetector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.CurrentContext">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.SetSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.EntityFinderSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.EntityMaterializerSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.LoggingOptions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.UpdateLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.ChangeTrackingLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="internalEntityEntryFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="internalEntityEntrySubscriber"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="internalEntityEntryNotifier"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="valueGenerationManager"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="model"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Storage.IDatabase)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="database"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="concurrencyDetector"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="currentContext"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="entityFinderSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Internal.IDbSetSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="setSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="entityMaterializerSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="loggingOptions"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="updateLogger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="changeTrackingLogger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TrackingQueryMode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TrackingQueryMode.Simple">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
                The state manager is tracking for a single query for one entity type and no self-refs.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TrackingQueryMode.Single">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
                The state manager is tracking for a single query, but with multiple entity types and/or self refs.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TrackingQueryMode.Multiple">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
                The state manager is tracking for multiple queries and/or with other tracked entities.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueComparerExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueComparerExtensions.ToNonNullNullableComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorSelector,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyPropagator,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager.Propagate(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager.Generate(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager.GenerateAsync(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager.MayGetTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1">
            <summary>
                <para>
                    A collection that stays in sync with entities of a given type being tracked by
                    a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. Call <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> to obtain a
                    local view.
                </para>
                <para>
                    This local view will stay in sync as entities are added or removed from the context. Likewise, entities
                    added to or removed from the local view will automatically be added to or removed
                    from the context.
                </para>
                <para>
                    Adding an entity to this collection will cause it to be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" />
                    state by the context unless it is already being tracked.
                </para>
                <para>
                    Removing an entity from this collection will cause it to be marked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />,
                    unless it was previously in the Added state, in which case it will be detached from the context.
                </para>
                <para>
                    The collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />,
                    <see cref="T:System.ComponentModel.INotifyPropertyChanging" />, and <see cref="T:System.ComponentModel.INotifyPropertyChanging" /> such that
                    notifications are generated when an entity starts being tracked by the context or is
                    marked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> or <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Detached" />.
                </para>
                <para>
                    Do not use this type directly for data binding. Instead call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" />
                    for WPF binding, or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" /> for WinForms.
                </para>
            </summary>
            <typeparam name="TEntity">The type of the entity in the local view.</typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.#ctor(Microsoft.EntityFrameworkCore.DbSet{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection">
            <summary>
                Returns an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> implementation that stays in sync with this collection.
                Use this for WPF data binding.
            </summary>
            <returns> The collection. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for all tracked entities of type TEntity
                that are not marked as deleted.
            </summary>
            <returns> An enumerator for the collection. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for all tracked entities of type TEntity
                that are not marked as deleted.
            </summary>
            <returns> An enumerator for the collection. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Add(`0)">
            <summary>
                <para>
                    Adds a new entity to the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. If the entity is not being tracked or is currently
                    marked as deleted, then it becomes tracked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" />.
                </para>
                <para>
                    Note that only the given entity is tracked. Any related entities discoverable from
                    the given entity are not automatically tracked.
                </para>
            </summary>
            <param name="item">The item to start tracking. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Clear">
            <summary>
                <para>
                    Marks all entities of type TEntity being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />.
                </para>
                <para>
                    Entities that are currently marked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> will be marked
                    as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Detached" /> since the Added state indicates that the entity
                    has not been saved to the database and hence it does not make sense to attempt to
                    delete it from the database.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Contains(`0)">
            <summary>
                Returns true if the entity is being tracked by the context and has not been
                marked as Deleted.
            </summary>
            <param name="item"> The entity to check. </param>
            <returns> True if the entity is being tracked by the context and has not been marked as Deleted. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies to an array all entities of type TEntity that are being tracked and are
                not marked as Deleted.
            </summary>
            <param name="array"> The array into which to copy entities. </param>
            <param name="arrayIndex"> The index into the array to start copying. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Remove(`0)">
            <summary>
                <para>
                    Marks the given entity as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />.
                </para>
                <para>
                    Entities that are currently marked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> will be marked
                    as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Detached" /> since the Added state indicates that the entity
                    has not been saved to the database and hence it does not make sense to attempt to
                    delete it from the database.
                </para>
            </summary>
            <param name="item"> The entity to delete. </param>
            <returns>True if the entity was being tracked and was not already Deleted. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count">
            <summary>
                The number of entities of type TEntity that are being tracked and are not marked
                as Deleted.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.IsReadOnly">
            <summary>
                False, since the collection is not read-only.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged">
            <summary>
                Occurs when a property of this collection (such as <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count" />) changes.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging">
            <summary>
                Occurs when a property of this collection (such as <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count" />) is changing.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged">
            <summary>
                Occurs when the contents of the collection changes, either because an entity
                has been directly added or removed from the collection, or because an entity
                starts being tracked, or because an entity is marked as Deleted.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                Raises the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged" /> event.
            </summary>
            <param name="e"> Details of the property that changed. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
                Raises the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging" /> event.
            </summary>
            <param name="e"> Details of the property that is changing. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Raises the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged" /> event.
            </summary>
            <param name="e"> Details of the change. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList">
            <summary>
                Returns an <see cref="T:System.ComponentModel.BindingList`1" /> implementation that stays in sync with this collection.
                Use this for WinForms data binding.
            </summary>
            <returns> The binding list. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#ComponentModel#IListSource#GetList">
            <summary>
                <para>
                    This method is called by data binding frameworks when attempting to data bind
                    directly to a <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1" />.
                </para>
                <para>
                    This implementation always throws an exception as <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1" />
                    does not maintain an ordered list with indexes. Instead call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" />
                    for WPF binding, or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" /> for WinForms.
                </para>
            </summary>
            <exception cref="T:System.NotSupportedException"> Always thrown. </exception>
            <returns> Never returns, always throws an exception. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                Gets a value indicating whether the collection is a collection of System.Collections.IList objects.
                Always returns false.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given property
                    or navigation property.
                </para>
                <para>
                    Scalar properties use the derived class <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry" />, reference navigation
                    properties use the derived class <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry" />, and collection navigation
                    properties use the derived class <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.InternalEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.IsModified">
            <summary>
                <para>
                    For non-navigation properties, gets or sets a value indicating whether the value of this
                    property has been modified and should be updated in the database when
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
                <para>
                    For navigation properties, gets or sets a value indicating whether any of foreign key
                    property values associated with this navigation property have been modified and should
                    be updated in the database  when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.Metadata">
            <summary>
                Gets the metadata that describes the facets of this property and how it maps to the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.CurrentValue">
            <summary>
                Gets or sets the value currently assigned to this property. If the current value is set using this property,
                the change tracker is aware of the change and <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> is not required
                for the context to detect the change.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.EntityEntry">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.EntityEntry" /> to which this member belongs.
            </summary>
            <value> An entry for the entity that owns this member. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry">
            <summary>
                <para>
                    Provides access to change tracking and loading information for a navigation property
                    that associates this entity to one or more other entities.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.String,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.Load">
            <summary>
                <para>
                    Loads the entity or entities referenced by this navigation property, unless <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.IsLoaded" />
                    is already set to true.
                </para>
                <para>
                    Note that entities that are already being tracked are not overwritten with new data from the database.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.LoadAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Loads the entity or entities referenced by this navigation property, unless <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.IsLoaded" />
                    is already set to true.
                </para>
                <para>
                    Note that entities that are already being tracked are not overwritten with new data from the database.
                </para>
                <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.Query">
            <summary>
                <para>
                    Returns the query that would be used by <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.Load" /> to load entities referenced by
                    this navigation property.
                </para>
                <para>
                    The query can be composed over using LINQ to perform filtering, counting, etc. without
                    actually loading all entities from the database.
                </para>
            </summary>
            <returns> The query to load related entities. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.IsLoaded">
            <summary>
                <para>
                    Gets or sets a value indicating whether the entity or entities referenced by this navigation property
                    are known to be loaded.
                </para>
                <para>
                    Loading entities from the database using
                    <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> or
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
                    , <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.Load" />, or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.LoadAsync(System.Threading.CancellationToken)" /> will set this flag. Subsequent calls to <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.Load" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.LoadAsync(System.Threading.CancellationToken)" /> will then be a no-op.
                </para>
                <para>
                    It is possible for IsLoaded to be false even if all related entities are loaded. This is because, depending on
                    how entities are loaded, it is not always possible to know for sure that all entities in a related collection
                    have been loaded. In such cases, calling <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.Load" /> or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.LoadAsync(System.Threading.CancellationToken)" /> will ensure all
                    related entities are loaded and will set this flag to true.
                </para>
            </summary>
            <value>
                True if all the related entities are loaded or the IsLoaded has been explicitly set to true.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.TargetFinder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.IsModified">
            <summary>
                Gets or sets a value indicating whether any of foreign key property values associated
                with this navigation property have been modified and should be updated in the database
                when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.Metadata">
            <summary>
                Gets the metadata that describes the facets of this property and how it maps to the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1">
            <summary>
                <para>
                    Extends <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> and adds an explicit implementation of <see cref="T:System.ComponentModel.IListSource" />.
                </para>
                <para>
                    The method <see cref="M:System.ComponentModel.IListSource.GetList" /> is implemented to return an <see cref="T:System.ComponentModel.IBindingList" />
                    implementation that stays in sync with the ObservableCollection.
                </para>
                <para>
                    This class can be used to implement navigation properties on entities for use in Windows Forms data binding.
                    For WPF data binding use an ObservableCollection rather than an instance of this class.
                </para>
            </summary>
            <typeparam name="T"> The type of elements in the collection. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1" /> class that
                contains elements copied from the specified collection.
            </summary>
            <param name="collection"> The collection from which the elements are copied. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1" /> class that
                contains elements copied from the specified list.
            </summary>
            <param name="list"> The list from which the elements are copied. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                Always false because there is never a contained collection.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1.System#ComponentModel#IListSource#GetList">
            <summary>
                Returns an <see cref="T:System.ComponentModel.IBindingList" /> implementation that stays in sync with
                this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />. The returned list is cached on this object
                such that the same list is returned each time this method is called.
            </summary>
            <returns>
                An <see cref="T:System.ComponentModel.IBindingList" /> in sync with the ObservableCollection.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1">
            <summary>
                A hash set that implements the interfaces required for Entity Framework to use notification based change tracking
                for a collection navigation property.
            </summary>
            <typeparam name="T"> The type of elements in the hash set. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1" /> class
                that is empty and uses the default equality comparer for the set type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1" /> class
                that is empty and uses the specified equality comparer for the set type.
            </summary>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when
                comparing values in the set, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
                implementation for the set type.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1" /> class
                that uses the default equality comparer for the set type, contains elements copied
                from the specified collection, and has sufficient capacity to accommodate the
                number of elements copied.
            </summary>
            <param name="collection"> The collection whose elements are copied to the new set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1" /> class
                that uses the specified equality comparer for the set type, contains elements
                copied from the specified collection, and has sufficient capacity to accommodate
                the number of elements copied.
            </summary>
            <param name="collection"> The collection whose elements are copied to the new set. </param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when
                comparing values in the set, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
                implementation for the set type.
            </param>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanged">
            <summary>
                Occurs when a property of this hash set (such as <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count" />) changes.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanging">
            <summary>
                Occurs when a property of this hash set (such as <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count" />) is changing.
            </summary>
        </member>
        <member name="E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CollectionChanged">
            <summary>
                Occurs when the contents of the hash set changes.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Clear">
            <summary>
                Removes all elements from the hash set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Contains(`0)">
            <summary>
                Determines whether the hash set object contains the
                specified element.
            </summary>
            <param name="item">The element to locate in the hash set.</param>
            <returns>
                True if the hash set contains the specified element; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the elements of the hash set to an array, starting at the specified array index.
            </summary>
            <param name="array">
                The one-dimensional array that is the destination of the elements copied from
                the hash set. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Remove(`0)">
            <summary>
                Removes the specified element from the hash set.
            </summary>
            <param name="item"> The element to remove. </param>
            <returns>
                True if the element is successfully found and removed; otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count">
            <summary>
                Gets the number of elements that are contained in the hash set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsReadOnly">
            <summary>
                Gets a value indicating whether the hash set is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the hash set.
            </summary>
            <returns>
                An enumerator for the hash set.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Add(`0)">
            <summary>
                Adds the specified element to the hash set.
            </summary>
            <param name="item"> The element to add to the set. </param>
            <returns>
                true if the element is added to the hash set; false if the element is already present.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Modifies the hash set to contain all elements that are present in itself, the specified collection, or both.
            </summary>
            <param name="other"> The collection to compare to the current hash set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Modifies the current hash set to contain only
                elements that are present in that object and in the specified collection.
            </summary>
            <param name="other"> The collection to compare to the current hash set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Removes all elements in the specified collection from the hash set.
            </summary>
            <param name="other"> The collection of items to remove from the current hash set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Modifies the current hash set to contain only elements that are present either in that
                object or in the specified collection, but not both.
            </summary>
            <param name="other"> The collection to compare to the current hash set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the hash set is a subset of the specified collection.
            </summary>
            <param name="other"> The collection to compare to the current hash set. </param>
            <returns>
                True if the hash set is a subset of other; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the hash set is a proper subset of the specified collection.
            </summary>
            <param name="other"> The collection to compare to the current hash set. </param>
            <returns>
                True if the hash set is a proper subset of other; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the hash set is a superset of the specified collection.
            </summary>
            <param name="other"> The collection to compare to the current hash set. </param>
            <returns>
                True if the hash set is a superset of other; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the hash set is a proper superset of the specified collection.
            </summary>
            <param name="other"> The collection to compare to the current hash set. </param>
            <returns>
                True if the hash set is a proper superset of other; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current System.Collections.Generic.HashSet`1 object and a specified collection share common elements.
            </summary>
            <param name="other"> The collection to compare to the current hash set. </param>
            <returns>
                True if the hash set and other share at least one common element; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the hash set and the specified collection contain the same elements.
            </summary>
            <param name="other"> The collection to compare to the current hash set. </param>
            <returns>
                True if the hash set is equal to other; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[])">
            <summary>
                Copies the elements of the hash set to an array.
            </summary>
            <param name="array">
                The one-dimensional array that is the destination of the elements copied from
                the hash set. The array must have zero-based indexing.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
                Copies the specified number of elements of the hash set to an array, starting at the specified array index.
            </summary>
            <param name="array">
                The one-dimensional array that is the destination of the elements copied from
                the hash set. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins. </param>
            <param name="count"> The number of elements to copy to array. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
                Removes all elements that match the conditions defined by the specified predicate
                from the hash set.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.
            </param>
            <returns> The number of elements that were removed from the hash set. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Comparer">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object that is used to determine equality for the values in the set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.TrimExcess">
            <summary>
                Sets the capacity of the hash set to the actual number of elements it contains, rounded up to a nearby,
                implementation-specific value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                Raises the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanged" /> event.
            </summary>
            <param name="e"> Details of the property that changed. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
                Raises the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanging" /> event.
            </summary>
            <param name="e"> Details of the property that is changing. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Raises the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CollectionChanged" /> event.
            </summary>
            <param name="e"> Details of the change. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry.IsModified">
            <summary>
                Gets or sets a value indicating whether the value of this property has been modified
                and should be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                is called.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry.IsTemporary">
            <summary>
                Gets or sets a value indicating whether the value of this property is considered a
                temporary value which will be replaced by a value generated from the store when
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />is called.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry.Metadata">
            <summary>
                Gets the metadata that describes the facets of this property and how it maps to the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry.OriginalValue">
            <summary>
                Gets or sets the value that was assigned to this property when it was retrieved from the database.
                This property is populated when an entity is retrieved from the database, but setting it may be
                useful in disconnected scenarios where entities are retrieved with one context instance and
                saved with a different context instance.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry`2">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity the property belongs to. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry`2.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry`2.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry`2.EntityEntry">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> to which this member belongs.
            </summary>
            <value> An entry for the entity that owns this member. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry`2.CurrentValue">
            <summary>
                Gets or sets the value currently assigned to this property. If the current value is set using this property,
                the change tracker is aware of the change and <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> is not required
                for the context to detect the change.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry`2.OriginalValue">
            <summary>
                Gets or sets the value that was assigned to this property when it was retrieved from the database.
                This property is populated when an entity is retrieved from the database, but setting it may be
                useful in disconnected scenarios where entities are retrieved with one context instance and
                saved with a different context instance.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues">
            <summary>
                <para>
                    A collection of all property values for an entity.
                </para>
                <para>
                    Objects of this type can be obtained from <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues" />,
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues" />,  <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues" />,
                    or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)" />.
                    Once obtained, the objects are usually used in various combinations to resolve optimistic
                    concurrency exceptions signaled by the throwing of a <see cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.InternalEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToObject">
            <summary>
                Creates an instance of the entity type and sets all its properties using the
                values from this object.
            </summary>
            <returns> The values of this object copied into a new entity instance. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Object)">
            <summary>
                <para>
                    Sets the values of this object by copying values from the given object.
                </para>
                <para>
                    The given object can be of any type.  Any property on the object with a name that
                    matches a property name in the entity type and can be read will be copied.  Other
                    properties will be ignored.  This allows, for example, copying of properties from
                    simple Data Transfer Objects (DTOs).
                </para>
            </summary>
            <param name="obj"> The object to read values from. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Clone">
            <summary>
                Creates a clone of the values in this object. Changes made to the new object will not be
                reflected in this object and vice versa.
            </summary>
            <returns> A clone of this object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues)">
            <summary>
                <para>
                    Sets the values of this object by reading values from another <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues" />
                    object.
                </para>
                <para>
                    The other object must be based on the same type as this object, or a type derived
                    from the type for this object.
                </para>
            </summary>
            <param name="propertyValues"> The object from which values should be copied. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                <para>
                    Sets the values of this object by copying values from the given dictionary.
                </para>
                <para>
                    The keys of the dictionary must match property names. Any key in the dictionary
                    that does not match the name of a property in the entity type will be ignored.
                </para>
            </summary>
            <param name="values"> The dictionary to read values from. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Properties">
            <summary>
                Gets the properties for which this object is storing values.
            </summary>
            <value> The properties. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.EntityType">
            <summary>
                Gets the underlying entity type for which this object is storing values.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(System.String)">
            <summary>
                Gets or sets the value of the property with the specified property name.
            </summary>
            <param name="propertyName"> The property name. </param>
            <returns> The value of the property. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets or sets the value of the property.
            </summary>
            <param name="property"> The property. </param>
            <returns> The value of the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue``1(System.String)">
            <summary>
                Gets the value of the property just like using the indexed property getter but
                typed to the type of the generic parameter.
            </summary>
            <typeparam name="TValue"> The type of the property. </typeparam>
            <param name="propertyName"> The property name. </param>
            <returns> The value of the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the value of the property just like using the indexed property getter but
                typed to the type of the generic parameter.
            </summary>
            <typeparam name="TValue"> The type of the property. </typeparam>
            <param name="property"> The property. </param>
            <returns> The value of the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry">
            <summary>
                <para>
                    Provides access to change tracking and loading information for a reference (i.e. non-collection)
                    navigation property that associates this entity to another entity.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry.TargetEntry">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> of the entity this navigation targets.
            </summary>
            <value> An entry for the entity that owns this navigation targets. </value>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry.GetTargetEntry">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry`2">
            <summary>
                <para>
                    Provides access to change tracking and loading information for a reference (i.e. non-collection)
                    navigation property that associates this entity to another entity.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity the property belongs to. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry`2.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry`2.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry`2.EntityEntry">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> to which this member belongs.
            </summary>
            <value> An entry for the entity that owns this member. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry`2.TargetEntry">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> of the entity this navigation targets.
            </summary>
            <value> An entry for the entity that owns this navigation targets. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry`2.CurrentValue">
            <summary>
                Gets or sets the value currently assigned to this property. If the current value is set using this property,
                the change tracker is aware of the change and <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> is not required
                for the context to detect the change.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry`2.Query">
            <summary>
                <para>
                    Returns the query that would be used by <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.Load" /> to load the entity referenced by
                    this navigation property.
                </para>
                <para>
                    The query can be composed over using LINQ to perform filtering, counting, etc. without
                    actually loading the entity from the database.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer">
            <summary>
                <para>
                    Specifies custom value snapshotting and comparison for
                    CLR types that cannot be compared with <see cref="M:System.Object.Equals(System.Object,System.Object)" />
                    and/or need a deep copy when taking a snapshot. For example, arrays of primitive types
                    will require both if mutation is to be detected.
                </para>
                <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.#ctor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> with the given comparison and
                snapshotting expressions.
            </summary>
            <param name="equalsExpression"> The comparison expression. </param>
            <param name="hashCodeExpression"> The associated hash code generator. </param>
            <param name="snapshotExpression"> The snapshot expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Type">
            <summary>
                The type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Equals(System.Object,System.Object)">
            <summary>
                Compares the two instances to determine if they are equal.
            </summary>
            <param name="left"> The first instance. </param>
            <param name="right"> The second instance. </param>
            <returns> <c>True</c> if they are equal; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.GetHashCode(System.Object)">
            <summary>
                Returns the hash code for the given instance.
            </summary>
            <param name="instance"> The instance. </param>
            <returns> The hash code. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Snapshot(System.Object)">
            <summary>
                <para>
                    Creates a snapshot of the given instance.
                </para>
                <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
            </summary>
            <param name="instance"> The instance. </param>
            <returns> The snapshot. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.EqualsExpression">
            <summary>
                The comparison expression.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeExpression">
            <summary>
                The hash code expression.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.SnapshotExpression">
            <summary>
                <para>
                    The snapshot expression.
                </para>
                <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ExtractEqualsBody(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Takes <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.EqualsExpression" /> and replaces the two parameters with the given expressions,
                returning the transformed body.
            </summary>
            <param name="leftExpression"> The new left expression. </param>
            <param name="rightExpression"> The new right expression. </param>
            <returns> The body of the lambda with left and right parameters replaced.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ExtractHashCodeBody(System.Linq.Expressions.Expression)">
            <summary>
                Takes the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeExpression"/> and replaces the parameter with the given expression,
                returning the transformed body.
            </summary>
            <param name="expression"> The new expression. </param>
            <returns> The body of the lambda with the parameter replaced.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ExtractSnapshotBody(System.Linq.Expressions.Expression)">
            <summary>
                Takes the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.SnapshotExpression"/> and replaces the parameter with the given expression,
                returning the transformed body.
            </summary>
            <param name="expression"> The new expression. </param>
            <returns> The body of the lambda with the parameter replaced.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1">
            <summary>
                <para>
                    Specifies custom value snapshotting and comparison for
                    CLR types that cannot be compared with <see cref="M:System.Object.Equals(System.Object,System.Object)" />
                    and/or need a deep copy when taking a snapshot. For example, arrays of primitive types
                    will require both if mutation is to be detected.
                </para>
                <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
            </summary>
            <typeparam name="T"> The type. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.#ctor(System.Boolean)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" /> with a default comparison
                expression and a shallow copy for the snapshot.
            </summary>
            <param name="favorStructuralComparisons">
                If <c>true</c>, then EF will use <see cref="T:System.Collections.IStructuralEquatable" /> if the type
                implements it. This is usually used when byte arrays act as keys.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" /> with the given comparison expression.
                A shallow copy will be used for the snapshot.
            </summary>
            <param name="equalsExpression"> The comparison expression. </param>
            <param name="hashCodeExpression"> The associated hash code generator. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
                <para>
                    Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" /> with the given comparison and
                    snapshotting expressions.
                </para>
                <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
            </summary>
            <param name="equalsExpression"> The comparison expression. </param>
            <param name="hashCodeExpression"> The associated hash code generator. </param>
            <param name="snapshotExpression"> The snapshot expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Equals(System.Object,System.Object)">
            <summary>
                Compares the two instances to determine if they are equal.
            </summary>
            <param name="left"> The first instance. </param>
            <param name="right"> The second instance. </param>
            <returns> <c>True</c> if they are equal; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.GetHashCode(System.Object)">
            <summary>
                Returns the hash code for the given instance.
            </summary>
            <param name="instance"> The instance. </param>
            <returns> The hash code. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Equals(`0,`0)">
            <summary>
                Compares the two instances to determine if they are equal.
            </summary>
            <param name="left"> The first instance. </param>
            <param name="right"> The second instance. </param>
            <returns> <c>True</c> if they are equal; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.GetHashCode(`0)">
            <summary>
                Returns the hash code for the given instance.
            </summary>
            <param name="instance"> The instance. </param>
            <returns> The hash code. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Snapshot(System.Object)">
            <summary>
                <para>
                    Creates a snapshot of the given instance.
                </para>
                <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
            </summary>
            <param name="instance"> The instance. </param>
            <returns> The snapshot. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Snapshot(`0)">
            <summary>
                <para>
                    Creates a snapshot of the given instance.
                </para>
                <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
            </summary>
            <param name="instance"> The instance. </param>
            <returns> The snapshot. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Type">
            <summary>
                The type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.EqualsExpression">
            <summary>
                The comparison expression.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.HashCodeExpression">
            <summary>
                The hash code expression.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.SnapshotExpression">
            <summary>
                <para>
                    The snapshot expression.
                </para>
                <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbContext">
            <summary>
                A DbContext instance represents a session with the database and can be used to query and save
                instances of your entities. DbContext is a combination of the Unit Of Work and Repository patterns.
            </summary>
            <remarks>
                <para>
                    Typically you create a class that derives from DbContext and contains <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />
                    properties for each entity in the model. If the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties have a public setter,
                    they are automatically initialized when the instance of the derived context is created.
                </para>
                <para>
                    Override the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method to configure the database (and
                    other options) to be used for the context. Alternatively, if you would rather perform configuration externally
                    instead of inline in your context, you can use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
                    (or <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />) to externally create an instance of <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" />
                    (or <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />) and pass it to a base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
                <para>
                    The model is discovered by running a set of conventions over the entity classes found in the
                    <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on the derived context. To further configure the model that
                    is discovered by convention, you can override the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" /> method.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.#ctor">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> class. The
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    method will be called to configure the database (and other options) to be used for this context.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> class using the specified options.
                    The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be called to allow further
                    configuration of the options.
                </para>
            </summary>
            <param name="options">The options for this context.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Database">
            <summary>
                Provides access to database related information and operations for this context.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.ChangeTracker">
            <summary>
                Provides access to information and operations for entity instances this context is tracking.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Model">
            <summary>
                The metadata about the shape of entities, the relationships between them, and how they map to the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#SetSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#QuerySource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#EntityFinderFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#QueryProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#StateManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#ChangeDetector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#EntityGraphAttacher">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#UpdateLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#InfrastructureLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbSetCache#GetOrAddSet(Microsoft.EntityFrameworkCore.Internal.IDbSetSource,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbQueryCache#GetOrAddQuery(Microsoft.EntityFrameworkCore.Internal.IDbQuerySource,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Set``1">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> that can be used to query and save instances of <typeparamref name="TEntity" />.
            </summary>
            <typeparam name="TEntity"> The type of entity for which a set should be returned. </typeparam>
            <returns> A set for the given entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Query``1">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> that can be used to query instances of <typeparamref name="TQuery" />.
            </summary>
            <typeparam name="TQuery"> The type of query for which a DbQuery should be returned. </typeparam>
            <returns> A DbQuery for the given query type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
                <para>
                    Override this method to configure the database (and other options) to be used for this context.
                    This method is called for each instance of the context that is created.
                    The base implementation does nothing.
                </para>
                <para>
                    In situations where an instance of <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> may or may not have been passed
                    to the constructor, you can use <see cref="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured" /> to determine if
                    the options have already been set, and skip some or all of the logic in
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />.
                </para>
            </summary>
            <param name="optionsBuilder">
                A builder used to create or modify options for this context. Databases (and other extensions)
                typically define extension methods on this object that allow you to configure the context.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
                Override this method to further configure the model that was discovered by convention from the entity types
                exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
                and re-used for subsequent instances of your derived context.
            </summary>
            <remarks>
                If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
                then this method will not be run.
            </remarks>
            <param name="modelBuilder">
                The builder being used to construct the model for this context. Databases (and other extensions) typically
                define extension methods on this object that allow you to configure aspects of the model that are specific
                to a given database.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges">
            <summary>
                Saves all changes made in this context to the database.
            </summary>
            <remarks>
                This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                changes to entity instances before saving to the underlying database. This can be disabled via
                <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
            </remarks>
            <returns>
                The number of state entries written to the database.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges(System.Boolean)">
            <summary>
                Saves all changes made in this context to the database.
            </summary>
            <param name="acceptAllChangesOnSuccess">
                Indicates whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" /> is called after the changes have
                been sent successfully to the database.
            </param>
            <remarks>
                This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                changes to entity instances before saving to the underlying database. This can be disabled via
                <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
            </remarks>
            <returns>
                The number of state entries written to the database.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously saves all changes made in this context to the database.
            </summary>
            <remarks>
                <para>
                    This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                    changes to entity instances before saving to the underlying database. This can be disabled via
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
                <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of state entries written to the database.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Asynchronously saves all changes made in this context to the database.
            </summary>
            <param name="acceptAllChangesOnSuccess">
                Indicates whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" /> is called after the changes have
                been sent successfully to the database.
            </param>
            <remarks>
                <para>
                    This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                    changes to entity instances before saving to the underlying database. This can be disabled via
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
                <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of state entries written to the database.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Dispose">
            <summary>
                Releases the allocated resources for this context.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Entry``1(``0)">
            <summary>
                Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the given entity. The entry provides
                access to change tracking information and operations for the entity.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to get the entry for. </param>
            <returns> The entry for the given entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Entry(System.Object)">
            <summary>
                <para>
                    Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the given entity. The entry provides
                    access to change tracking information and operations for the entity.
                </para>
                <para>
                    This method may be called on an entity that is not tracked. You can then
                    set the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> property on the returned entry
                    to have the context begin tracking the entity in the specified state.
                </para>
            </summary>
            <param name="entity"> The entity to get the entry for. </param>
            <returns> The entry for the given entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)">
            <summary>
                <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that
                    they will be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to add. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.AddAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to add. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous Add operation. The task result contains the
                <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides access to change tracking
                information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to attach. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Update``1(``0)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that it will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)" /> to begin tracking the entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to update. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Remove``1(``0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                <para>
                    If the entity is already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking the entity (rather than marking it as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since the
                    entity was previously added to the context and does not exist in the database.
                </para>
                <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </remarks>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to remove. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Add(System.Object)">
            <summary>
                <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <param name="entity"> The entity to add. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.AddAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
                <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <param name="entity"> The entity to add. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous Add operation. The task result contains the
                <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides access to change tracking
                information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <param name="entity"> The entity to attach. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Update(System.Object)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that it will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)" /> to begin tracking the entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <param name="entity"> The entity to update. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Remove(System.Object)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                <para>
                    If the entity is already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking the entity (rather than marking it as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since the
                    entity was previously added to the context and does not exist in the database.
                </para>
                <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </remarks>
            <param name="entity"> The entity to remove. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Object[])">
            <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Object[])">
            <summary>
                <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
            </summary>
            <param name="entities"> The entities to add. </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Object[])">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of each entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)" /> to begin tracking each entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Object[])">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                <para>
                    If any of the entities are already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking those entities (rather than marking them as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since those
                    entities were previously added to the context and do not exist in the database.
                </para>
                <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
                <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
            </summary>
            <param name="entities"> The entities to add. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of each entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)" /> to begin tracking each entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                <para>
                    If any of the entities are already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking those entities (rather than marking them as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since those
                    entities were previously added to the context and do not exist in the database.
                </para>
                <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Find(System.Type,System.Object[])">
            <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
            <param name="entityType"> The type of entity to find. </param>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[])">
            <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
            <param name="entityType"> The type of entity to find. </param>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[],System.Threading.CancellationToken)">
            <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
            <param name="entityType"> The type of entity to find. </param>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Find``1(System.Object[])">
            <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
            <typeparam name="TEntity"> The type of entity to find. </typeparam>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[])">
            <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
            <typeparam name="TEntity"> The type of entity to find. </typeparam>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[],System.Threading.CancellationToken)">
            <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
            <typeparam name="TEntity"> The type of entity to find. </typeparam>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance">
            <summary>
                <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContext.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbContextOptions">
            <summary>
                The options to be used by a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. You normally override
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or use a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
                to create instances of this class and it is not designed to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptions.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> class. You normally override
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or use a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
                to create instances of this class and it is not designed to be directly constructed in your application code.
            </summary>
            <param name="extensions"> The extensions that store the configured options. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContextOptions.Extensions">
            <summary>
                Gets the extensions that store the configured options.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension``1">
            <summary>
                Gets the extension of the specified type. Returns null if no extension of the specified type is configured.
            </summary>
            <typeparam name="TExtension"> The type of the extension to get. </typeparam>
            <returns> The extension, or null if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension``1">
            <summary>
                Gets the extension of the specified type. Throws if no extension of the specified type is configured.
            </summary>
            <typeparam name="TExtension"> The type of the extension to get. </typeparam>
            <returns> The extension. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension``1(``0)">
            <summary>
                Adds the given extension to the options.
            </summary>
            <typeparam name="TExtension"> The type of extension to be added. </typeparam>
            <param name="extension"> The extension to be added. </param>
            <returns> The same options instance so that multiple calls can be chained. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContextOptions.ContextType">
            <summary>
                The type of context that these options are for. Will return <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> if the
                options are not built for a specific derived context.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptions.Freeze">
            <summary>
                Specifies that no further configuration of this options object should occur.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContextOptions.IsFrozen">
            <summary>
                Returns true if <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptions.Freeze" />. has been called. A frozen options object cannot be further
                configured with <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder">
            <summary>
                <para>
                    Provides a simple API surface for configuring <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />. Databases (and other extensions)
                    typically define extension methods on this object that allow you to configure the database connection (and other
                    options) to be used for a context.
                </para>
                <para>
                    You can use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> to configure a context by overriding
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or creating a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />
                    externally and passing it to the context constructor.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> class with no options set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> class to further configure
                a given <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
            </summary>
            <param name="options"> The options to be configured. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.Options">
            <summary>
                Gets the options being configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured">
            <summary>
                <para>
                    Gets a value indicating whether any options have been configured.
                </para>
                <para>
                    This can be useful when you have overridden <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> to configure
                    the context, but in some cases you also externally provide options via the context constructor. This property can be
                    used to determine if the options have already been set, and skip some or all of the logic in
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Sets the model to be used for the context. If the model is set, then <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />
                will not be run.
            </summary>
            <param name="model"> The model to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> that will be used to create <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instances
                    for logging done by this context. It is never necessary to call this method since EF can obtain
                    or create a logger factory automatically.
                </para>
                <para>
                    There is no need to call this method when using one of the 'AddDbContext' methods.
                    'AddDbContext' will ensure that the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> used by EF is obtained from the
                    application service provider.
                </para>
                <para>
                    Note that changing the logger factory can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    instances will be used for a given application.
                </para>
                <para>
                    This method cannot be used if the application is setting the internal service provider
                    through a call to <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />. In this case, the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />
                    should be configured directly in that service provider.
                </para>
            </summary>
            <param name="loggerFactory"> The logger factory to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseMemoryCache(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to be used for query caching by this context. It is never
                    necessary to call this method since EF can obtain or create a memory cache automatically.
                </para>
                <para>
                    There is no need to call this method when using one of the 'AddDbContext' methods.
                    'AddDbContext' will ensure that the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> used by EF is obtained from the
                    application service provider.
                </para>
                <para>
                    Note that changing the memory cache can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    instances will be used for a given application.
                </para>
                <para>
                    This method cannot be used if the application is setting the internal service provider
                    through a call to <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />. In this case, the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
                    should be configured directly in that service provider.
                </para>
            </summary>
            <param name="memoryCache"> The memory cache to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)">
            <summary>
                <para>
                    Sets the <see cref="T:System.IServiceProvider" /> that the context should resolve all of its services from. EF will
                    create and manage a service provider if none is specified.
                </para>
                <para>
                    The service provider must contain all the services required by Entity Framework (and the database being
                    used). The Entity Framework services can be registered using an extension method on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    For example, the Microsoft SQL Server provider includes an AddEntityFrameworkSqlServer() method to add
                    the required services.
                </para>
                <para>
                    If the <see cref="T:System.IServiceProvider" /> has a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> or
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> registered, then this will be used as the options for
                    this context instance.
                </para>
            </summary>
            <param name="serviceProvider"> The service provider to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseApplicationServiceProvider(System.IServiceProvider)">
            <summary>
                Sets the <see cref="T:System.IServiceProvider" /> from which application services will be obtained. This
                is done automatically when using 'AddDbContext', so it is rare that this method needs to be called.
            </summary>
            <param name="serviceProvider"> The service provider to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableSensitiveDataLogging(System.Boolean)">
            <summary>
                <para>
                    Enables application data to be included in exception messages, logging, etc. This can include the
                    values assigned to properties of your entity instances, parameter values for commands being sent
                    to the database, and other such data. You should only enable this flag if you have the appropriate
                    security measures in place based on the sensitivity of this data.
                </para>
                <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseQueryTrackingBehavior(Microsoft.EntityFrameworkCore.QueryTrackingBehavior)">
            <summary>
                <para>
                    Sets the tracking behavior for LINQ queries run against the context. Disabling change tracking
                    is useful for read-only scenarios because it avoids the overhead of setting up change tracking for each
                    entity instance. You should not disable change tracking if you want to manipulate entity instances and
                    persist those changes to the database using <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
                </para>
                <para>
                    This method sets the default behavior for all contexts created with these options, but you can override this
                    behavior for a context instance using <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" /> or on individual
                    queries using the <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
                    and <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})" /> methods.
                </para>
                <para>
                    The default value is <see cref="F:Microsoft.EntityFrameworkCore.QueryTrackingBehavior.TrackAll" />. This means
                    the change tracker will keep track of changes for all entities that are returned from a LINQ query.
                </para>
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ConfigureWarnings(System.Action{Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder})">
            <summary>
                <para>
                    Configures the runtime behavior of warnings generated by Entity Framework. You can set a default
                    behavior and behaviors for each warning type.
                </para>
                <para>
                    Note that changing this configuration can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    configurations will be used for a given application.
                </para>
                <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
            </summary>
            <example>
                <code>
                    optionsBuilder.ConfigureWarnings(warnings =>
                        warnings.Default(WarningBehavior.Ignore)
                                .Log(CoreEventId.IncludeIgnoredWarning, CoreEventId.ModelValidationWarning)
                                .Throw(RelationalEventId.QueryClientEvaluationWarning))
                </code>
            </example>
            <param name="warningsConfigurationBuilderAction">
                An action to configure the warning behavior.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ReplaceService``2">
            <summary>
                <para>
                    Replaces the internal Entity Framework implementation of a service contract with a different
                    implementation.
                </para>
                <para>
                    This method can only be used when EF is building and managing its internal service provider.
                    If the service provider is being built externally and passed to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then replacement services should be configured on
                    that service provider before it is passed to EF.
                </para>
                <para>
                    The replacement service gets the same scope as the EF service that it is replacing.
                </para>
            </summary>
            <typeparam name="TService"> The type (usually an interface) that defines the contract of the service to replace. </typeparam>
            <typeparam name="TImplementation"> The new implementation type for the service. </typeparam>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IDbContextOptionsBuilderInfrastructure#AddOrUpdateExtension``1(``0)">
            <summary>
                <para>
                    Adds the given extension to the options. If an existing extension of the same type already exists, it will be replaced.
                </para>
                <para>
                    This method is intended for use by extension methods to configure the context. It is not intended to be used in
                    application code.
                </para>
            </summary>
            <typeparam name="TExtension"> The type of extension to be added. </typeparam>
            <param name="extension"> The extension to be added. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1">
            <summary>
                <para>
                    Provides a simple API surface for configuring <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" />. Databases (and other extensions)
                    typically define extension methods on this object that allow you to configure the database connection (and other
                    options) to be used for a context.
                </para>
                <para>
                    You can use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> to configure a context by overriding
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or creating a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />
                    externally and passing it to the context constructor.
                </para>
            </summary>
            <typeparam name="TContext"> The type of context to be configured. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" /> class with no options set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" /> class to further configure
                a given <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
            </summary>
            <param name="options"> The options to be configured. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.Options">
            <summary>
                Gets the options being configured.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Sets the model to be used for the context. If the model is set, then <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />
                will not be run.
            </summary>
            <param name="model"> The model to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> that will be used to create <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instances
                    for logging done by this context. It is never necessary to call this method since EF can obtain
                    or create a logger factory automatically.
                </para>
                <para>
                    There is no need to call this method when using one of the 'AddDbContext' methods.
                    'AddDbContext' will ensure that the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> used by EF is obtained from the
                    application service provider.
                </para>
                <para>
                    Note that changing the logger factory can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    instances will be used for a given application.
                </para>
                <para>
                    This method cannot be used if the application is setting the internal service provider
                    through a call to <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseInternalServiceProvider(System.IServiceProvider)" />. In this case, the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />
                    should be configured directly in that service provider.
                </para>
            </summary>
            <param name="loggerFactory"> The logger factory to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseMemoryCache(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to be used for query caching by this context. It is never
                    necessary to call this method since EF can obtain or create a memory cache automatically.
                </para>
                <para>
                    There is no need to call this method when using one of the 'AddDbContext' methods.
                    'AddDbContext' will ensure that the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> used by EF is obtained from the
                    application service provider.
                </para>
                <para>
                    Note that changing the memory cache can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    instances will be used for a given application.
                </para>
                <para>
                    This method cannot be used if the application is setting the internal service provider
                    through a call to <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseInternalServiceProvider(System.IServiceProvider)" />. In this case, the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
                    should be configured directly in that service provider.
                </para>
            </summary>
            <param name="memoryCache"> The memory cache to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseInternalServiceProvider(System.IServiceProvider)">
            <summary>
                <para>
                    Sets the <see cref="T:System.IServiceProvider" /> that the context should resolve all of its services from. EF will
                    create and manage a service provider if none is specified.
                </para>
                <para>
                    The service provider must contain all the services required by Entity Framework (and the database being
                    used). The Entity Framework services can be registered using an extension method on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    For example, the Microsoft SQL Server provider includes an AddEntityFrameworkSqlServer() method to add
                    the required services.
                </para>
                <para>
                    If the <see cref="T:System.IServiceProvider" /> has a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> or
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> registered, then this will be used as the options for
                    this context instance.
                </para>
            </summary>
            <param name="serviceProvider"> The service provider to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseApplicationServiceProvider(System.IServiceProvider)">
            <summary>
                Sets the <see cref="T:System.IServiceProvider" /> from which application services will be obtained. This
                is done automatically when using 'AddDbContext', so it is rare that this method needs to be called.
            </summary>
            <param name="serviceProvider"> The service provider to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.EnableSensitiveDataLogging(System.Boolean)">
            <summary>
                <para>
                    Enables application data to be included in exception messages, logging, etc. This can include the
                    values assigned to properties of your entity instances, parameter values for commands being sent
                    to the database, and other such data. You should only enable this flag if you have the appropriate
                    security measures in place based on the sensitivity of this data.
                </para>
                <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseQueryTrackingBehavior(Microsoft.EntityFrameworkCore.QueryTrackingBehavior)">
            <summary>
                <para>
                    Sets the tracking behavior for LINQ queries run against the context. Disabling change tracking
                    is useful for read-only scenarios because it avoids the overhead of setting up change tracking for each
                    entity instance. You should not disable change tracking if you want to manipulate entity instances and
                    persist those changes to the database using <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
                </para>
                <para>
                    This method sets the default behavior for all contexts created with these options, but you can override this
                    behavior for a context instance using <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" /> or on individual
                    queries using the <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
                    and <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})" /> methods.
                </para>
                <para>
                    The default value is <see cref="F:Microsoft.EntityFrameworkCore.QueryTrackingBehavior.TrackAll" />. This means the
                    change tracker will keep track of changes for all entities that are returned from a LINQ query.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.ConfigureWarnings(System.Action{Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder})">
            <summary>
                <para>
                    Configures the runtime behavior of warnings generated by Entity Framework. You can set a default
                    behavior and behaviors for each warning type.
                </para>
                <para>
                    Note that changing this configuration can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    configurations will be used for a given application.
                </para>
                <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
            </summary>
            <example>
                <code>
                    optionsBuilder.ConfigureWarnings(warnings => 
                        warnings.Default(WarningBehavior.Ignore)
                                .Log(CoreEventId.IncludeIgnoredWarning, CoreEventId.ModelValidationWarning)
                                .Throw(RelationalEventId.QueryClientEvaluationWarning))
                </code>
            </example>
            <param name="warningsConfigurationBuilderAction">
                An action to configure the warning behavior.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.ReplaceService``2">
            <summary>
                <para>
                    Replaces the internal Entity Framework implementation of a service contract with a different
                    implementation.
                </para>
                <para>
                    This method can only be used when EF is building and managing its internal service provider.
                    If the service provider is being built externally and passed to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1.UseInternalServiceProvider(System.IServiceProvider)" />, then replacement services should be configured on
                    that service provider before it is passed to EF.
                </para>
                <para>
                    The replacement service gets the same scope as the EF service that it is replacing.
                </para>
            </summary>
            <typeparam name="TService"> The type (usually an interface) that defines the contract of the service to replace. </typeparam>
            <typeparam name="TImplementation"> The new implementation type for the service. </typeparam>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbContextOptions`1">
            <summary>
                The options to be used by a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. You normally override
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or use a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
                to create instances of this class and it is not designed to be directly constructed in your application code.
            </summary>
            <typeparam name="TContext"> The type of the context these options apply to. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptions`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> class. You normally override
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or use a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
                to create instances of this class and it is not designed to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptions`1.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> class. You normally override
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or use a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
                to create instances of this class and it is not designed to be directly constructed in your application code.
            </summary>
            <param name="extensions"> The extensions that store the configured options. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextOptions`1.WithExtension``1(``0)">
            <summary>
                Adds the given extension to the options.
            </summary>
            <typeparam name="TExtension"> The type of extension to be added. </typeparam>
            <param name="extension"> The extension to be added. </param>
            <returns> The same options instance so that multiple calls can be chained. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbContextOptions`1.ContextType">
            <summary>
                The type of context that these options are for (<typeparamref name="TContext" />).
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbFunctions">
            <summary>
                Provides CLR methods that get translated to database functions when used in LINQ to Entities queries.
                The methods on this class are accessed via <see cref="P:Microsoft.EntityFrameworkCore.EF.Functions" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbFunctions.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbFunctions.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbFunctions.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbFunctionsExtensions">
            <summary>
                Provides CLR methods that get translated to database functions when used in LINQ to Entities queries.
                The methods on this class are accessed via <see cref="P:Microsoft.EntityFrameworkCore.EF.Functions" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)">
            <summary>
                <para>
                    An implementation of the SQL LIKE operation. On relational databases this is usually directly
                    translated to SQL.
                </para>
                <para>
                    Note that if this function is translated into SQL, then the semantics of the comparison will
                    depend on the database configuration. In particular, it may be either case-sensitive or
                    case-insensitive. If this function is evaluated on the client, then it will always use
                    a case-insensitive comparison.
                </para>
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="matchExpression">The string that is to be matched.</param>
            <param name="pattern">The pattern which may involve wildcards %,_,[,],^.</param>
            <returns>true if there is a match.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String,System.String)">
            <summary>
                <para>
                    An implementation of the SQL LIKE operation. On relational databases this is usually directly
                    translated to SQL.
                </para>
                <para>
                    Note that if this function is translated into SQL, then the semantics of the comparison will
                    depend on the database configuration. In particular, it may be either case-sensitive or
                    case-insensitive. If this function is evaluated on the client, then it will always use
                    a case-insensitive comparison.
                </para>
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="matchExpression">The string that is to be matched.</param>
            <param name="pattern">The pattern which may involve wildcards %,_,[,],^.</param>
            <param name="escapeCharacter">
                The escape character (as a single character string) to use in front of %,_,[,],^
                if they are not used as wildcards.
            </param>
            <returns>true if there is a match.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory">
            <summary>
                <para>
                    An API for getting logger categories in an Intellisense/tab-completion friendly manner.
                </para>
                <para>
                    Get an Entity Framework Core logger category using its Name property. For example,
                    <code>LoggerCategory.Database.Sql.Name</code>.
                </para>
                <para>
                    Use these types with <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" /> or
                    <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" /> to create a logger.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DbLoggerCategory.Name">
            <summary>
                The root/prefix for all Entity Framework categories.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database">
            <summary>
                Logger categories for messages related to database interactions.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection">
            <summary>
                Logger category for messages related to connection operations.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command">
            <summary>
                Logger category for command execution, including SQL sent to the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction">
            <summary>
                Logger category for messages related to transaction operations.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update">
            <summary>
                Logger category for messages related to <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />, excluding
                messages specifically relating to database interactions which are covered by
                the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database" /> categories.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model">
            <summary>
                Logger categories for messages related to model building and metadata.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation">
            <summary>
                Logger category for messages from model validation.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query">
            <summary>
                Logger category for messages related to queries, excluding
                the generated SQL, which is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command" /> category.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure">
            <summary>
                Logger category for miscellaneous messages from the Entity Framework infrastructure.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding">
            <summary>
                Logger category for messages from scaffolding/reverse engineering.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations">
            <summary>
                Logger category messages from Migrations.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking">
            <summary>
                Logger category for messages from change detection and tracking.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbQuery`1">
            <summary>
                <para>
                    A <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> can be used to query instances of <typeparamref name="TQuery" />.
                    LINQ queries against a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> will be translated into queries against the database.
                </para>
                <para>
                    The results of a LINQ query against a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> will contain the results
                    returned from the database and may not reflect changes made in the context that have not
                    been persisted to the database. For example, the results will not contain newly added views
                    and may still contain views that are marked for deletion.
                </para>
                <para>
                    Depending on the database being used, some parts of a LINQ query against a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" />
                    may be evaluated in memory rather than being translated into a database query.
                </para>
                <para>
                    <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> objects are usually obtained from a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" />
                    property on a derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or from the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Set``1" />
                    method.
                </para>
            </summary>
            <typeparam name="TQuery"> The type of view being operated on by this view. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbQuery`1.System#Collections#Generic#IEnumerable{TQuery}#GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> which when enumerated will execute a query against the database
                to load all views from the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.IEnumerator" /> which when enumerated will execute a query against the database
                to load all views from the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbQuery`1.Microsoft#EntityFrameworkCore#Query#Internal#IAsyncEnumerableAccessor{TQuery}#AsyncEnumerable">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> which when enumerated will asynchronously execute the query against
                the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbQuery`1.System#Linq#IQueryable#ElementType">
            <summary>
                Gets the IQueryable element type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbQuery`1.System#Linq#IQueryable#Expression">
            <summary>
                Gets the IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbQuery`1.System#Linq#IQueryable#Provider">
            <summary>
                Gets the IQueryable provider.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbQuery`1.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance">
            <summary>
                <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbSet`1">
            <summary>
                <para>
                    A <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> can be used to query and save instances of <typeparamref name="TEntity" />.
                    LINQ queries against a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> will be translated into queries against the database.
                </para>
                <para>
                    The results of a LINQ query against a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> will contain the results
                    returned from the database and may not reflect changes made in the context that have not
                    been persisted to the database. For example, the results will not contain newly added entities
                    and may still contain entities that are marked for deletion.
                </para>
                <para>
                    Depending on the database being used, some parts of a LINQ query against a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />
                    may be evaluated in memory rather than being translated into a database query.
                </para>
                <para>
                    <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> objects are usually obtained from a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />
                    property on a derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or from the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Set``1" />
                    method.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being operated on by this set. </typeparam>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbSet`1.Local">
            <summary>
                <para>
                    Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1" /> that represents a local view of all Added, Unchanged,
                    and Modified entities in this set.
                </para>
                <para>
                    This local view will stay in sync as entities are added or removed from the context. Likewise, entities
                    added to or removed from the local view will automatically be added to or removed
                    from the context.
                </para>
                <para>
                    This property can be used for data binding by populating the set with data, for example by using the
                    <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})" /> extension method,
                    and then binding to the local data through this property by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" /> for WPF binding, or
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" /> for WinForms.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.Find(System.Object[])">
            <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.FindAsync(System.Object[])">
            <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.Add(`0)">
            <summary>
                <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <param name="entity"> The entity to add. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <param name="entity"> The entity to add. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous Add operation. The task result contains the
                <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides access to change tracking
                information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.Attach(`0)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <param name="entity"> The entity to attach. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.Remove(`0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                <para>
                    If the entity is already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking the entity (rather than marking it as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since the
                    entity was previously added to the context and does not exist in the database.
                </para>
                <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.Attach(`0)" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </remarks>
            <param name="entity"> The entity to remove. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.Update(`0)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that it will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.Attach(`0)" /> to begin tracking the entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
                <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State"/> to set the state of only a single entity.
                </para>
            </summary>
            <param name="entity"> The entity to update. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.AddRange(`0[])">
            <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.AddRangeAsync(`0[])">
            <summary>
                <para>
                    Begins tracking the given entities, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
            </summary>
            <param name="entities"> The entities to add. </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.AttachRange(`0[])">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.RemoveRange(`0[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that they will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                <para>
                    If any of the entities are already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking those entities (rather than marking them as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since those
                    entities were previously added to the context and do not exist in the database.
                </para>
                <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.AttachRange(`0[])" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.UpdateRange(`0[])">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of each entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.Attach(`0)" /> to begin tracking each entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                <para>
                    Begins tracking the given entities, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
            </summary>
            <param name="entities"> The entities to add. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.AttachRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that they will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                <para>
                    If any of the entities are already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking those entities (rather than marking them as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since those
                    entities were previously added to the context and do not exist in the database.
                </para>
                <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.AttachRange(System.Collections.Generic.IEnumerable{`0})" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of each entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.Attach(`0)" /> to begin tracking each entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
                <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> which when enumerated will execute a query against the database
                to load all entities from the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.IEnumerator" /> which when enumerated will execute a query against the database
                to load all entities from the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbSet`1.Microsoft#EntityFrameworkCore#Query#Internal#IAsyncEnumerableAccessor{TEntity}#AsyncEnumerable">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> which when enumerated will asynchronously execute the query against
                the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbSet`1.System#Linq#IQueryable#ElementType">
            <summary>
                Gets the IQueryable element type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbSet`1.System#Linq#IQueryable#Expression">
            <summary>
                Gets the IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbSet`1.System#Linq#IQueryable#Provider">
            <summary>
                Gets the IQueryable provider.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbSet`1.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance">
            <summary>
                <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.System#ComponentModel#IListSource#GetList">
            <summary>
                <para>
                    This method is called by data binding frameworks when attempting to data bind
                    directly to a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />.
                </para>
                <para>
                    This implementation always throws an exception as binding directly to a
                    <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> will result in a query being
                    sent to the database every time the data binding framework requests the contents
                    of the collection. Instead load the results into the context, for example, by using the
                    <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})" /> extension method,
                    and then bind to the local data through the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" /> for WPF binding, or
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" /> for WinForms.
                </para>
            </summary>
            <exception cref="T:System.NotSupportedException"> Always thrown. </exception>
            <returns> Never returns, always throws an exception. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbSet`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                Gets a value indicating whether the collection is a collection of System.Collections.IList objects.
                Always returns false.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbSet`1.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
            <summary>
                An exception that is thrown when a concurrency violation is encountered while saving to the database. A concurrency violation
                occurs when an unexpected number of rows are affected during save. This is usually because the data in the database has
                been modified since it was loaded into memory.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException" /> class.
            </summary>
            <param name="message"> The error message that explains the reason for the exception. </param>
            <param name="entries"> The entries that were involved in the concurrency violation. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbUpdateException">
            <summary>
                An exception that is thrown when an error is encountered while saving to the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbUpdateException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbUpdateException" /> class.
            </summary>
            <param name="message"> The error message that explains the reason for the exception. </param>
            <param name="innerException"> The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbUpdateException.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbUpdateException" /> class.
            </summary>
            <param name="message"> The error message that explains the reason for the exception. </param>
            <param name="entries"> The entries that were involved in the error. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbUpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbUpdateException" /> class.
            </summary>
            <param name="message"> The error message that explains the reason for the exception. </param>
            <param name="entries"> The entries that were involved in the error. </param>
            <param name="innerException"> The exception that is the cause of the current exception. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.DbUpdateException.Entries">
            <summary>
                Gets the entries that were involved in the error. Typically this is a single entry, but in some cases it
                may be zero or multiple entries.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DeleteBehavior">
            <summary>
                <para>
                    Indicates how a delete operation is applied to dependent entities in a relationship when the
                    principal is deleted or the relationship is severed.
                </para>
                <para>
                    Behaviors in the database are dependent on the database schema being created
                    appropriately. Using Entity Framework Migrations or <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" />
                    will create the appropriate schema.
                </para>
                <para>
                    Note that the in-memory behavior for entities that are currently tracked by
                    the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> can be different from the behavior that happens in the database.
                    See the <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.ClientSetNull" /> behavior for more details.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DeleteBehavior.ClientSetNull">
            <summary>
                <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, the values of foreign key properties in
                    dependent entities are set to null. This helps keep the graph of entities in a consistent
                    state while they are being tracked, such that a fully consistent graph can then be written to
                    the database. If a property cannot be set to null because it is not a nullable type,
                    then an exception will be thrown when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                    This is the same as the <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.SetNull" /> behavior.
                </para>
                <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database
                    is to generate an error if a foreign key constraint is violated.
                    This is the same as the <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.Restrict" /> behavior.
                </para>
                <para>
                    This is the default for optional relationships. That is, for relationships that have
                    nullable foreign keys.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DeleteBehavior.Restrict">
            <summary>
                <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, the values of foreign key properties in
                    dependent entities are not changed. This can result in an inconsistent graph of entities
                    where the values of foreign key properties do not match the relationships in the
                    graph. If a property remains in this state when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called, then an exception will be thrown.
                </para>
                <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database
                    is to generate an error if a foreign key constraint is violated.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DeleteBehavior.SetNull">
            <summary>
                <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, the values of foreign key properties in
                    dependent entities are set to null. This helps keep the graph of entities in a consistent
                    state while they are being tracked, such that a fully consistent graph can then be written to
                    the database. If a property cannot be set to null because it is not a nullable type,
                    then an exception will be thrown when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database is
                    the same as is described above for tracked entities. Keep in mind that some databases cannot easily
                    support this behavior, especially if there are cycles in relationships.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DeleteBehavior.Cascade">
            <summary>
                <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, the dependent entities
                    will also be deleted when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database is
                    the same as is described above for tracked entities. Keep in mind that some databases cannot easily
                    support this behavior, especially if there are cycles in relationships.
                </para>
                <para>
                    This is the default for required relationships. That is, for relationships that have
                    non-nullable foreign keys.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Design.DesignTimeProviderServicesAttribute">
            <summary>
                <para>
                    Identifies where to find the design time services for a given database provider. This attribute should
                    be present in the primary assembly of the database provider.
                </para>
                <para>
                    This attribute is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.DesignTimeProviderServicesAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Design.DesignTimeProviderServicesAttribute" /> class.
            </summary>
            <param name="typeName">
                The name of the type that can be used to add the database providers design time services to a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection" />.
                This type should implement <see cref="T:Microsoft.EntityFrameworkCore.Design.IDesignTimeServices" />.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.DesignTimeProviderServicesAttribute.TypeName">
            <summary>
                Gets the name of the type that can be used to add the database providers design time services to a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection" />.
                This type should implement <see cref="T:Microsoft.EntityFrameworkCore.Design.IDesignTimeServices" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute">
            <summary>
                <para>
                    Identifies where to find additional design time services.
                </para>
                <para>
                    This attribute is typically used by design-time extensions. It is generally not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute" /> class.
            </summary>
            <param name="typeName">
                The assembly-qualified name of the type that can be used to add additional design time services to a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection" />.
                This type should implement <see cref="T:Microsoft.EntityFrameworkCore.Design.IDesignTimeServices" />.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute.TypeName">
            <summary>
                Gets the assembly-qualified name of the type that can be used to add additional design time services to a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection" />.
                This type should implement <see cref="T:Microsoft.EntityFrameworkCore.Design.IDesignTimeServices" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Design.IDesignTimeDbContextFactory`1">
            <summary>
                A factory for creating derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. Implement this interface to enable
                design-time services for context types that do not have a public default constructor. At design-time,
                derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances can be created in order to enable specific design-time
                experiences such as Migrations. Design-time services will automatically discover implementations of
                this interface that are in the startup assembly or the same assembly as the derived context.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IDesignTimeDbContextFactory`1.CreateDbContext(System.String[])">
            <summary>
                Creates a new instance of a derived context.
            </summary>
            <param name="args"> Arguments provided by the design-time service. </param>
            <returns> An instance of <typeparamref name="TContext" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Design.IDesignTimeServices">
            <summary>
                Enables configuring design-time services. Tools will automatically discover implementations of this
                interface that are in the startup assembly.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IDesignTimeServices.ConfigureDesignTimeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Configures design-time services. Use this method to override the default design-time services with your
                own implementations.
            </summary>
            <param name="serviceCollection"> The design-time service collection. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.BinaryExpressionEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a query expression.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.BinaryExpressionEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="left"> The left <see cref="T:System.Linq.Expressions.Expression" />. </param>
            <param name="right"> The right <see cref="T:System.Linq.Expressions.Expression" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.BinaryExpressionEventData.Left">
            <summary>
                The left <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.BinaryExpressionEventData.Right">
            <summary>
                The right <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that indicate
                an entity is being deleted because its parent entity has been deleted.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityEntry"> The entity entry for the entity that is being deleted. </param>
            <param name="parentEntry"> The entity entry for the parent that trigger the cascade. </param>
            <param name="state"> The state that the child is transitioning to--usually 'Deleted'. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteEventData.State">
            <summary>
                The state that the child is transitioning to--usually 'Deleted'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteEventData.ParentEntityEntry">
            <summary>
                The entity entry for the parent that trigger the cascade.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteOrphanEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that indicate
                an entity is being deleted because its required relationship to a parent has been severed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteOrphanEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityEntry"> The entity entry for the entity that is being deleted. </param>
            <param name="parentEntityTypes"> The entity type to which the relationship was severed. </param>
            <param name="state"> The state that the child is transitioning to--usually 'Deleted'. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteOrphanEventData.State">
            <summary>
                The state that the child is transitioning to--usually 'Deleted'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteOrphanEventData.ParentEntityType">
            <summary>
                The entity type to which the relationship was severed.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.CollectionChangedEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that indicate
                a collection navigation property has had entities added and/or removed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.CollectionChangedEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityEntry"> The entry for the entity instance on which the property value has changed. </param>
            <param name="navigation"> The navigation property. </param>
            <param name="added"> The entities added to the collection. </param>
            <param name="removed"> The entities removed from the collection. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CollectionChangedEventData.EntityEntry">
            <summary>
                The entry for the entity instance on which the navigation property has been added
                to or removed from.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CollectionChangedEventData.Added">
            <summary>
                The entities added to the collection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CollectionChangedEventData.Removed">
            <summary>
                The entities removed from the collection.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ContextInitializedEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for context initialization events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ContextInitializedEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> that is initialized. </param>
            <param name="contextOptions"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> being used. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ContextInitializedEventData.Context">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> that is initialized.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ContextInitializedEventData.ContextOptions">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> being used.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId">
            <summary>
                <para>
                    Event IDs for events that correspond to messages logged to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />
                    and events sent to a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
                <para>
                    These IDs are also used with <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" /> to configure the
                    behavior of warnings.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.CoreBaseId">
            <summary>
                The lower-bound for event IDs used by any Entity Framework or provider code.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.RelationalBaseId">
            <summary>
                The lower-bound for event IDs used by any relational database provider.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ProviderBaseId">
            <summary>
                The lower-bound for event IDs used only by database providers.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ProviderDesignBaseId">
            <summary>
                The lower-bound for event IDs used only by database provider design-time and tooling.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.SaveChangesFailed">
            <summary>
                <para>
                    An error occurred while attempting to save changes to the database.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.DuplicateDependentEntityTypeInstanceWarning">
            <summary>
                The same entity is being tracked as a different weak entity type.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.QueryIterationFailed">
            <summary>
                <para>
                    An error occurred while processing the results of a query.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeErrorEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.QueryModelCompiling">
            <summary>
                <para>
                    A query model is being compiled.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.RowLimitingOperationWithoutOrderByWarning">
            <summary>
                <para>
                    A query uses a row limiting operation (Skip/Take) without OrderBy which may lead to unpredictable results.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.FirstWithoutOrderByAndFilterWarning">
            <summary>
                <para>
                    A query uses First/FirstOrDefault operation without OrderBy and filter which may lead to unpredictable results.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.QueryModelOptimized">
            <summary>
                <para>
                    A query model was optimized.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.NavigationIncluded">
            <summary>
                <para>
                    A navigation was included in the query.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IncludeEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.IncludeIgnoredWarning">
            <summary>
                <para>
                    A navigation was ignored while compiling a query.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IncludeEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.QueryExecutionPlanned">
            <summary>
                <para>
                    A query is planned for execution.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.PossibleUnintendedCollectionNavigationNullComparisonWarning">
            <summary>
                <para>
                    Possible unintended comparison of collection navigation to null.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.NavigationPathEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.PossibleUnintendedReferenceComparisonWarning">
            <summary>
                <para>
                    Possible unintended reference comparison.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.BinaryExpressionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.SensitiveDataLoggingEnabledWarning">
            <summary>
                <para>
                    A warning indicating that sensitive data logging is enabled and may be logged.
                </para>
                <para>
                    This event may be in different categories depending on where sensitive data is being logged.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ServiceProviderCreated">
            <summary>
                <para>
                    A service provider was created for internal use by Entity Framework.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ServiceProviderEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ManyServiceProvidersCreatedWarning">
            <summary>
                <para>
                    Many service providers were created in a single app domain.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ServiceProvidersEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ContextInitialized">
            <summary>
                <para>
                    A <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> was initialized.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ContextInitializedEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ExecutionStrategyRetrying">
            <summary>
                <para>
                    A transient exception has been encountered during execution and the operation will be retried.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ContextInitializedEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.NavigationLazyLoading">
            <summary>
                <para>
                    A navigation property is being lazy-loaded.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.LazyLoadingEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.LazyLoadOnDisposedContextWarning">
            <summary>
                <para>
                    An attempt was made to lazy-load a property after the DbContext had been disposed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.LazyLoadingEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.DetachedLazyLoadingWarning">
            <summary>
                <para>
                    An attempt was made to lazy-load a property from a detached/no-tracking entity.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.LazyLoadingEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ShadowPropertyCreated">
            <summary>
                <para>
                    A shadow property has been created.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.RedundantIndexRemoved">
            <summary>
                <para>
                    An index was not created as the properties are already covered.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.IncompatibleMatchingForeignKeyProperties">
            <summary>
                <para>
                    The best match for foreign key properties are incompatible with the principal key.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.RequiredAttributeOnDependent">
            <summary>
                <para>
                    The entity type with the navigation property that has the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />
                    was configured as the dependent side in the relationship.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.NavigationEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.RequiredAttributeOnBothNavigations">
            <summary>
                <para>
                    Navigations separated into two relationships as <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> was specified on both navigations.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ConflictingShadowForeignKeysWarning">
            <summary>
                <para>
                    The properties that best match the foreign key convention are already used by a different foreign key.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ForeignKeyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.MultiplePrimaryKeyCandidates">
            <summary>
                <para>
                    There are multiple properties that could be used as the primary key.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.MultipleNavigationProperties">
            <summary>
                <para>
                    There are multiple properties that could be navigations to the same type.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoUnmappedPropertyCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.MultipleInversePropertiesSameTargetWarning">
            <summary>
                <para>
                    There are multiple navigations with <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> that point
                    to the same inverse navigation.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.NonDefiningInverseNavigationWarning">
            <summary>
                <para>
                    There navigation that <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> points to is not the defining navigation.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoUnmappedPropertyCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.NonOwnershipInverseNavigationWarning">
            <summary>
                <para>
                    There navigation that <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> points to is not the defining navigation.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoUnmappedPropertyCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ForeignKeyAttributesOnBothPropertiesWarning">
            <summary>
                <para>
                    Navigations separated into two relationships as <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> was specified on properties
                    on both sides.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ForeignKeyAttributesOnBothNavigationsWarning">
            <summary>
                <para>
                    Navigations separated into two relationships as <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> was specified on navigations
                    on both sides.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning">
            <summary>
                <para>
                    The <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> specified on the navigation doesn't match the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" />
                    specified on the property.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.DetectChangesStarting">
            <summary>
                <para>
                    DetectChanges is starting.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.DetectChangesCompleted">
            <summary>
                <para>
                    DetectChanges has completed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.PropertyChangeDetected">
            <summary>
                <para>
                    DetectChanges has detected a change in a property value.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyChangedEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ForeignKeyChangeDetected">
            <summary>
                <para>
                    DetectChanges has detected a change in a foreign key property value.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyChangedEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.CollectionChangeDetected">
            <summary>
                <para>
                    DetectChanges has detected entities were added and/or removed from a collection
                    navigation property.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CollectionChangedEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ReferenceChangeDetected">
            <summary>
                <para>
                    DetectChanges has detected a change to the entity references by another entity.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ReferenceChangedEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.StartedTracking">
            <summary>
                <para>
                    An entity is being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EntityEntryEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.StateChanged">
            <summary>
                <para>
                    An entity tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> is changing from one
                    <see cref="T:Microsoft.EntityFrameworkCore.EntityState"/> to another.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.StateChangedEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ValueGenerated">
            <summary>
                <para>
                    A property of a tracked entity is getting a generated value.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyValueEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.CascadeDelete">
            <summary>
                <para>
                    An entity is being deleted or detached because its parent was deleted.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.CascadeDeleteOrphan">
            <summary>
                <para>
                    An entity is being deleted or detached because the required relationship to its
                    parent was severed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteOrphanEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.SaveChangesStarting">
            <summary>
                <para>
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/> or one of its overloads started.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.SaveChangesCompleted">
            <summary>
                <para>
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/> or one of its overloads has completed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ContextDisposed">
            <summary>
                <para>
                    The <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> is being disposed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData" /> payload when used with a
                    <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for error events that reference
                a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.DbContext,System.Exception)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="context"> The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. </param>
            <param name="exception"> The exception that triggered this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData.Exception">
            <summary>
                The exception that triggered this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that reference
                a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="context"> The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData.Context">
            <summary>
                The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeErrorEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for error events that reference
                a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeErrorEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Type,System.Exception)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="contextType"> The type of the current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. </param>
            <param name="exception"> The exception that triggered this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeErrorEventData.Exception">
            <summary>
                The exception that triggered this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that reference
                a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Type)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="contextType"> The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeEventData.ContextType">
            <summary>
                The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EntityEntryEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that reference
                a <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.EntityEntryEventData.EntityEntry" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EntityEntryEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityEntry"> The entity entry. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.EntityEntryEventData.EntityEntry">
            <summary>
                The entity entry.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventData">
            <summary>
                A base class for all Entity Framework <see cref="T:System.Diagnostics.DiagnosticSource" /> event payloads.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String})">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.EventData.EventId">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.EventData.EventId" /> that defines the message ID and name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.EventData.LogLevel">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.EventData.LogLevel" /> that would be used to log message for this event.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventData.ToString">
            <summary>
                A logger message describing this event.
            </summary>
            <returns> A logger message describing this event. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition">
            <summary>
                Defines metadata for an event with no parameters and a cached delegate to log the
                event with reduced allocations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Action{Microsoft.Extensions.Logging.ILogger,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String,System.Action{Microsoft.Extensions.Logging.ILogger,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition.GenerateMessage(System.Exception)">
            <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
            <param name="exception"> Optional exception associated with this event. </param>
            <returns> The message string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},Microsoft.EntityFrameworkCore.WarningBehavior,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="warningBehavior"> Whether the event should be logged, thrown as an exception or ignored. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase">
            <summary>
                Base class for event definitions.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String)">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.EventId">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.EventId" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.Level">
            <summary>
                The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.EventIdCode">
            <summary>
                A string representing the code that should be passed to ConfigureWanings to suppress this event as an error.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.WarningAsError(System.String)">
            <summary>
                Returns a warning-as-error exception wrapping the given message for this event.
            </summary>
            <param name="message"> The message to wrap. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.GetLogBehavior``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0})">
            <summary>
                Gets the log behavior for this event. This determines whether it should be logged, thrown as an exception or ignored.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event would be logged. </param>
            <returns> Whether the event should be logged, thrown as an exception or ignored. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.MessageExtractingLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.MessageExtractingLogger.Message">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.MessageExtractingLogger.Microsoft#Extensions#Logging#ILogger#Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.MessageExtractingLogger.Microsoft#Extensions#Logging#ILogger#IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase.MessageExtractingLogger.Microsoft#Extensions#Logging#ILogger#BeginScope``1(``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1">
            <summary>
                Defines metadata for an event with one parameter and a cached delegate to log the
                event with reduced allocations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Action{Microsoft.Extensions.Logging.ILogger,`0,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String,System.Action{Microsoft.Extensions.Logging.ILogger,`0,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
            <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1.GenerateMessage(`0,System.Exception)">
            <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
            <param name="arg"> The message argument. </param>
            <param name="exception"> Optional exception associated with this event. </param>
            <returns> The message string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},`0,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="arg"> Message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},Microsoft.EntityFrameworkCore.WarningBehavior,`0,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="warningBehavior"> Whether the event should be logged, thrown as an exception or ignored. </param>
            <param name="arg"> Message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`2">
            <summary>
                Defines metadata for an event with three parameters and a cached delegate to log the
                event with reduced allocations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`2.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`2.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`2.GenerateMessage(`0,`1,System.Exception)">
            <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="exception"> Optional exception associated with this event. </param>
            <returns> The message string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`2.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},`0,`1,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`2.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},Microsoft.EntityFrameworkCore.WarningBehavior,`0,`1,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="warningBehavior"> Whether the event should be logged, thrown as an exception or ignored. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`3">
            <summary>
                Defines metadata for an event with three parameters and a cached delegate to log the
                event with reduced allocations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`3.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,`2,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`3.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,`2,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`3.GenerateMessage(`0,`1,`2,System.Exception)">
            <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third  message argument. </param>
            <param name="exception"> Optional exception associated with this event. </param>
            <returns> The message string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`3.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},`0,`1,`2,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`3.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},Microsoft.EntityFrameworkCore.WarningBehavior,`0,`1,`2,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="warningBehavior"> Whether the event should be logged, thrown as an exception or ignored. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`4">
            <summary>
                Defines metadata for an event with three parameters and a cached delegate to log the
                event with reduced allocations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`4.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,`2,`3,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`4.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,`2,`3,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`4.GenerateMessage(`0,`1,`2,`3,System.Exception)">
            <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="arg4"> The fourth message argument. </param>
            <param name="exception"> Optional exception associated with this event. </param>
            <returns> The message string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`4.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},`0,`1,`2,`3,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="arg4"> The fourth message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`4.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},Microsoft.EntityFrameworkCore.WarningBehavior,`0,`1,`2,`3,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="warningBehavior"> Whether the event should be logged, thrown as an exception or ignored. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="arg4"> The fourth message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`5">
            <summary>
                Defines metadata for an event with three parameters and a cached delegate to log the
                event with reduced allocations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`5.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,`2,`3,`4,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`5.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,`2,`3,`4,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`5.GenerateMessage(`0,`1,`2,`3,`4,System.Exception)">
            <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="arg4"> The fourth message argument. </param>
            <param name="arg5"> The fifth message argument. </param>
            <param name="exception"> Optional exception associated with this event. </param>
            <returns> The message string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`5.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},`0,`1,`2,`3,`4,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="arg4"> The fourth message argument. </param>
            <param name="arg5"> The fifth message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`5.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},Microsoft.EntityFrameworkCore.WarningBehavior,`0,`1,`2,`3,`4,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="warningBehavior"> Whether the event should be logged, thrown as an exception or ignored. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="arg4"> The fourth message argument. </param>
            <param name="arg5"> The fifth message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`6">
            <summary>
                Defines metadata for an event with three parameters and a cached delegate to log the
                event with reduced allocations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`6.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,`2,`3,`4,`5,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`6.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String,System.Action{Microsoft.Extensions.Logging.ILogger,`0,`1,`2,`3,`4,`5,System.Exception})">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
            <param name="logAction"> A cached delegate for logging the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`6.GenerateMessage(`0,`1,`2,`3,`4,`5,System.Exception)">
            <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="arg4"> The fourth message argument. </param>
            <param name="arg5"> The fifth message argument. </param>
            <param name="arg6"> The sixth message argument. </param>
            <param name="exception"> Optional exception associated with this event. </param>
            <returns> The message string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`6.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},`0,`1,`2,`3,`4,`5,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="arg4"> The fourth message argument. </param>
            <param name="arg5"> The fifth message argument. </param>
            <param name="arg6"> The sixth message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`6.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},Microsoft.EntityFrameworkCore.WarningBehavior,`0,`1,`2,`3,`4,`5,System.Exception)">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="warningBehavior"> Whether the event should be logged, thrown as an exception or ignored. </param>
            <param name="arg1"> The first message argument. </param>
            <param name="arg2"> The second message argument. </param>
            <param name="arg3"> The third message argument. </param>
            <param name="arg4"> The fourth message argument. </param>
            <param name="arg5"> The fifth message argument. </param>
            <param name="arg6"> The sixth message argument. </param>
            <param name="exception"> Optional exception associated with the event. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ExecutionStrategyEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId" /> execution strategy events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ExecutionStrategyEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Collections.Generic.IReadOnlyList{System.Exception},System.TimeSpan,System.Boolean)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="exceptionsEncountered">
                The exceptions that have been caught during the execution of an operation.
            </param>
            <param name="delay"> The delay before retrying the operation. </param>
            <param name="async">
                Indicates whether or not the command was executed asynchronously.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ExecutionStrategyEventData.ExceptionsEncountered">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ExecutionStrategyEventData.Delay">
            <summary>
                The delay before retrying the operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ExecutionStrategyEventData.IsAsync">
            <summary>
                Indicates whether or not the operation is being executed asynchronously.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ExpressionEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a query expression.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ExpressionEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Linq.Expressions.Expression)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="expression"> The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.ExpressionEventData.Expression" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ExpressionEventData.Expression">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.ExpressionEventData.Expression" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition">
            <summary>
                Defines metadata for an event with more than six parameters such that it has to have
                special handling.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String)">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="messageFormat"> The parameterized message definition. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String,System.String)">
            <summary>
                Creates an event definition instance.
            </summary>
            <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
            <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
            <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
            <param name="messageFormat"> The parameterized message definition. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.GenerateMessage(System.Action{Microsoft.Extensions.Logging.ILogger})">
            <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
            <param name="logAction"> A delegate that will log the message to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />. </param>
            <returns> The message string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},System.Action{Microsoft.Extensions.Logging.ILogger})">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="logAction"> A delegate that will log the message to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},Microsoft.EntityFrameworkCore.WarningBehavior,System.Action{Microsoft.Extensions.Logging.ILogger})">
            <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
            <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
            <param name="logger"> The logger to which the event should be logged. </param>
            <param name="warningBehavior"> Whether the event should be logged, thrown as an exception or ignored. </param>
            <param name="logAction"> A delegate that will log the message to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.MessageFormat">
            <summary>
                The parameterized message definition.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ForeignKeyEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a foreign key.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ForeignKeyEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="foreignKey"> The foreign key. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ForeignKeyEventData.ForeignKey">
            <summary>
                The foreign key.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1">
            <summary>
                <para>
                    Combines <see cref="T:Microsoft.Extensions.Logging.ILogger" /> and <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.DiagnosticSource" />
                    for use by all EF Core logging so that events can be sent to both <see cref="T:Microsoft.Extensions.Logging.ILogger" />
                    for ASP.NET and <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.DiagnosticSource" /> for everything else.
                </para>
                <para>
                    Also intercepts messages such that warnings
                    can be either logged or thrown, and such that a decision as to whether to log
                    sensitive data or not can be made.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.GetLogBehavior(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
                Checks if the given <paramref name="logLevel" /> is enabled or the given event, and,
                if so, whether the event should be logged or thrown.
            </summary>
            <param name="eventId"> The event ID that will be logged, if enabled. </param>
            <param name="logLevel"> The logging level to which the event will be logged.</param>
            <returns> One of Log, Throw, or Ignore. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.Options">
            <summary>
                Entity Framework logging options.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.ShouldLogSensitiveData">
            <summary>
                Gets a value indicating whether sensitive information should be written
                to the underlying logger. This also has the side effect of writing a warning
                to the log the first time sensitive data is logged.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.Logger">
            <summary>
                The underlying <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.DiagnosticSource">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.DiagnosticSource" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.IErrorEventData">
            <summary>
                An interface implemented by any <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EventData" /> subclass that represents an
                error event with an <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IErrorEventData.Exception" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IErrorEventData.Exception">
            <summary>
                The exception that was thrown to signal the error.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions">
            <summary>
                Options set at the <see cref="T:System.IServiceProvider" /> singleton level to control how\
                messages are logged and/or thrown in exceptions.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions.IsSensitiveDataLoggingEnabled">
            <summary>
                Reflects the option set by <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableSensitiveDataLogging(System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions.IsSensitiveDataLoggingWarned">
            <summary>
                This flag is set once a warning about <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions.IsSensitiveDataLoggingEnabled" /> has been
                issued to avoid logging the warning again.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions.WarningsConfiguration">
            <summary>
                Reflects the option set by <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ConfigureWarnings(System.Action{Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder})" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.IncludeEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                an <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> specification.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IncludeEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="includeResultOperator"> The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IncludeEventData.IncludeResultOperator" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IncludeEventData.IncludeResultOperator">
            <summary>
                The <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> result operator.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.LazyLoadingEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events from <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.LazyLoadingEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.DbContext,System.Object,System.String)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="context"> The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. </param>
            <param name="entity"> The entity instance on which lazy-loading was initiated. </param>
            <param name="navigationPropertyName"> The navigation property name of the relationship to be loaded. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.LazyLoadingEventData.Entity">
            <summary>
                The entity instance on which lazy-loading was initiated.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.LazyLoadingEventData.NavigationPropertyName">
            <summary>
                The navigation property name of the relationship to be loaded.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1">
            <summary>
                Generic helper class used to implement the <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1.Name" /> property.
            </summary>
            <typeparam name="T"> The logger category type. </typeparam>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1.Name">
            <summary>
                The logger category name, for use with <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />, etc.
            </summary>
            <returns> The category name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1.ToString">
            <summary>
                The logger category name.
            </summary>
            <returns> The logger category name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1.op_Implicit(Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory{`0})~System.String">
            <summary>
                The logger category name.
            </summary>
            <param name="loggerCategory"> The category. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.NavigationEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a navigation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.NavigationEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="navigation"> The navigation. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.NavigationEventData.Navigation">
            <summary>
                The navigation.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.NavigationPathEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a navigation property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.NavigationPathEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="navigationPath"> The navigation property. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.NavigationPathEventData.NavigationPath">
            <summary>
                The navigation property.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyChangedEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that indicate
                a changed property value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.PropertyChangedEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityEntry"> The entry for the entity instance on which the property value has changed. </param>
            <param name="property"> The property. </param>
            <param name="oldValue"> The old value. </param>
            <param name="newValue"> The new value. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.PropertyChangedEventData.EntityEntry">
            <summary>
                The entry for the entity instance on which the property value has changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.PropertyChangedEventData.OldValue">
            <summary>
                The old value.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.PropertyChangedEventData.NewValue">
            <summary>
                The new value.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="property"> The property. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData.Property">
            <summary>
                The property.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyValueEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that indicate
                a property value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.PropertyValueEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityEntry"> The entry for the entity instance on which the property value has changed. </param>
            <param name="property"> The property. </param>
            <param name="value"> The old value. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.PropertyValueEventData.EntityEntry">
            <summary>
                The entry for the entity instance.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.PropertyValueEventData.Value">
            <summary>
                The value.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a query expression.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="queryExpression"> The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData.Expression" />. </param>
            <param name="expressionPrinter"> An <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter" /> that can be used to render the <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData.Expression" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData.Expression">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData.Expression" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData.ExpressionPrinter">
            <summary>
                An <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter" /> that can be used to render the <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData.Expression" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a query model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Remotion.Linq.QueryModel)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="queryModel"> The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelEventData.QueryModel" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelEventData.QueryModel">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelEventData.QueryModel" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelClientEvalEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a query model and an expression.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelClientEvalEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Remotion.Linq.QueryModel,System.Object)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="queryModel"> The <see cref="T:Remotion.Linq.QueryModel" />. </param>
            <param name="queryModelElement"> The query model element requiring client-eval. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.QueryModelClientEvalEventData.QueryModelElement">
            <summary>
                The expression.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ReferenceChangedEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that indicate
                a changed property value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ReferenceChangedEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityEntry"> The entry for the entity instance on which the property value has changed. </param>
            <param name="navigation"> The navigation property. </param>
            <param name="oldReferencedEntity"> The old referenced entity. </param>
            <param name="newReferencedEntity"> The new referenced entity. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ReferenceChangedEventData.EntityEntry">
            <summary>
                The entry for the entity instance on which the navigation property value has changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ReferenceChangedEventData.OldReferencedEntity">
            <summary>
                The old referenced entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ReferenceChangedEventData.NewReferencedEntity">
            <summary>
                The new referenced entity.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that indicate
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> has completed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.DbContext,System.Int32)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="context"> The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. </param>
            <param name="entitiesSavedCount"> The number of entities saved to the database. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData.EntitiesSavedCount">
            <summary>
                The number of entities saved to the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that
                specify the entities being saved and the rows affected.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entries"> Entries for the entities being saved. </param>
            <param name="rowsAffected"> The rows affected. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesEventData.Entries">
            <summary>
                Entries for the entities being saved.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesEventData.RowsAffected">
            <summary>
                The rows affected.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ServiceProviderEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that reference
                a <see cref="T:System.IServiceProvider" /> container.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ServiceProviderEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.IServiceProvider)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="serviceProvider"> The <see cref="T:System.IServiceProvider" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ServiceProviderEventData.ServiceProvider">
            <summary>
                The <see cref="T:System.IServiceProvider" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ServiceProvidersEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that reference
                multiple <see cref="T:System.IServiceProvider" /> containers.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ServiceProvidersEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Collections.Generic.ICollection{System.IServiceProvider})">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="serviceProviders"> The <see cref="T:System.IServiceProvider" />s. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ServiceProvidersEventData.ServiceProviders">
            <summary>
                The <see cref="T:System.IServiceProvider" />s.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.SharedDependentEntityEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that reference
                two <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.SharedDependentEntityEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="firstEntityType"> The first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />. </param>
            <param name="secondEntityType"> The second <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.SharedDependentEntityEventData.FirstEntityType">
            <summary>
                The first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.SharedDependentEntityEventData.SecondEntityType">
            <summary>
                The second <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.StateChangedEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that indicate
                a change of a tracked entity from one <see cref="T:Microsoft.EntityFrameworkCore.EntityState" /> to another.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.StateChangedEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.EntityState,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityEntry"> The entity entry. </param>
            <param name="oldState"> The old state. </param>
            <param name="newState"> The new state. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.StateChangedEventData.OldState">
            <summary>
                The old state.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.StateChangedEventData.NewState">
            <summary>
                The new state.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                two property collections.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="firstPropertyCollection"> The first property collection. </param>
            <param name="secondPropertyCollection"> The second property collection. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData.FirstPropertyCollection">
            <summary>
                The first property collection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData.SecondPropertyCollection">
            <summary>
                The second property collection.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoUnmappedPropertyCollectionsEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                two unmapped property collections.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.TwoUnmappedPropertyCollectionsEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}})">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="firstPropertyCollection"> The first property collection. </param>
            <param name="secondPropertyCollection"> The second property collection. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TwoUnmappedPropertyCollectionsEventData.FirstPropertyCollection">
            <summary>
                The first property collection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TwoUnmappedPropertyCollectionsEventData.SecondPropertyCollection">
            <summary>
                The second property collection.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ValueConverterEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.ValueConverterEventData.ValueConverter" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ValueConverterEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Type,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="mappingClrType"> The CLR type. </param>
            <param name="valueConverter"> The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.ValueConverterEventData.ValueConverter" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ValueConverterEventData.MappingClrType">
            <summary>
                The CLR type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ValueConverterEventData.ValueConverter">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.ValueConverterEventData.ValueConverter" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration">
            <summary>
                <para>
                    Represents configuration for which warnings should be thrown, logged, or ignored.
                    by database providers or extensions. These options are set using <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" />.
                </para>
                <para>
                    Instances of this class are designed to be immutable. To change an option, call one of the 'With...'
                    methods to obtain a new instance with the option changed.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.#ctor">
            <summary>
                Creates a new, empty configuration, with all options set to their defaults.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration)">
            <summary>
                Called by a derived class constructor when implementing the <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.Clone" /> method.
            </summary>
            <param name="copyFrom"> The instance that is being cloned. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.Clone">
            <summary>
                Override this method in a derived class to ensure that any clone created is also of that class.
            </summary>
            <returns> A clone of this instance, which can be modified before being returned as immutable. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.DefaultBehavior">
            <summary>
                The option set from the <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.DefaultBehavior" /> method.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.WithDefaultBehavior(Microsoft.EntityFrameworkCore.WarningBehavior)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" />.
            </summary>
            <param name="warningBehavior"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.WithExplicit(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.EventId},Microsoft.EntityFrameworkCore.WarningBehavior)">
            <summary>
                Creates a new instance with the given explicit <see cref="T:Microsoft.EntityFrameworkCore.WarningBehavior" /> set for
                all given event IDs.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" />.
            </summary>
            <param name="eventIds"> The event IDs for which the behavior should be set. </param>
            <param name="warningBehavior"> The behavior to set. </param>
            <returns> A new instance with the behaviors set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.GetBehavior(Microsoft.Extensions.Logging.EventId)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.WarningBehavior" /> set for the given event ID, or the <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.DefaultBehavior" />
                if no explicit behavior has been set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.TryWithExplicit(Microsoft.Extensions.Logging.EventId,Microsoft.EntityFrameworkCore.WarningBehavior)">
            <summary>
                Creates a new instance with the given explicit <see cref="T:Microsoft.EntityFrameworkCore.WarningBehavior" /> set for
                the given event ID, but only if no explicit behavior has already been set.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" />.
            </summary>
            <param name="eventId"> The event ID for which the behavior should be set. </param>
            <param name="warningBehavior"> The behavior to set. </param>
            <returns> A new instance with the behavior set, or this instance if a behavior was already set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration.GetServiceProviderHashCode">
            <summary>
                Returns a hash code created from any options that would cause a new <see cref="T:System.IServiceProvider" />
                to be needed.
            </summary>
            <returns> A hash over options that require a new service provider when changed. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder">
            <summary>
                <para>
                    Configures the runtime behavior of warnings generated by Entity Framework.
                    You can set a default behavior and behaviors for each warning type.
                </para>
                <para>
                    This class is used within the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ConfigureWarnings(System.Action{Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder})" />
                    API and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder.#ctor(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" /> class.
            </summary>
            <param name="optionsBuilder"> The options builder to which the warnings configuration will be applied. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder.Default(Microsoft.EntityFrameworkCore.WarningBehavior)">
            <summary>
                Sets the default behavior when a warning is generated.
            </summary>
            <param name="warningBehavior"> The desired behavior. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder.Throw(Microsoft.Extensions.Logging.EventId[])">
            <summary>
                Causes an exception to be thrown when the specified core warnings are generated. Database providers (and other extensions)
                may provide extension method overloads of this method to configure this behavior for warnings they generate.
            </summary>
            <param name="eventIds">
                The <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId" /> and 'RelationalEventId' for the warnings.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder.Log(Microsoft.Extensions.Logging.EventId[])">
            <summary>
                Causes a warning to be logged when the specified core warnings are generated. Database providers (and other extensions)
                may provide extension method overloads of this method to configure this behavior for warnings they generate.
            </summary>
            <param name="eventIds">
                The <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId" /> and 'RelationalEventId' for the warnings.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder.Ignore(Microsoft.Extensions.Logging.EventId[])">
            <summary>
                Causes nothing to happen when the specified core warnings are generated. Database providers (and other extensions)
                may provide extension method overloads of this method to configure this behavior for warnings they generate.
            </summary>
            <param name="eventIds">
                The <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId" /> and 'RelationalEventId' for the warnings.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.EF">
            <summary>
                Static methods that are useful in application code where there is not an EF type for the method to be accessed from. For example,
                referencing a shadow state property in a LINQ query.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``2(System.Linq.Expressions.Expression{System.Func{``0,Microsoft.EntityFrameworkCore.DbSet{``1}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``2(System.Linq.Expressions.Expression{System.Func{``0,Microsoft.EntityFrameworkCore.DbQuery{``1}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``2(System.Linq.Expressions.Expression{System.Func{``0,System.Linq.IQueryable{``1}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Linq.IQueryable{``2}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Linq.IQueryable{``3}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Linq.IQueryable{``4}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Linq.IQueryable{``5}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Linq.IQueryable{``6}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.CancellationToken,``1}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Threading.CancellationToken,``2}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Threading.CancellationToken,``3}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Threading.CancellationToken,``4}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Threading.CancellationToken,``5}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken,``6}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``2(System.Linq.Expressions.Expression{System.Func{``0,Microsoft.EntityFrameworkCore.DbSet{``1}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``2(System.Linq.Expressions.Expression{System.Func{``0,Microsoft.EntityFrameworkCore.DbQuery{``1}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``2(System.Linq.Expressions.Expression{System.Func{``0,System.Linq.IQueryable{``1}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``3(System.Linq.Expressions.Expression{System.Func{``0,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``1,``2}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <typeparam name="TProperty">The included property type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Linq.IQueryable{``2}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``2,``3}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <typeparam name="TProperty">The included property type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Linq.IQueryable{``3}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``3,``4}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <typeparam name="TProperty">The included property type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Linq.IQueryable{``4}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``4,``5}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <typeparam name="TProperty">The included property type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Linq.IQueryable{``5}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``5,``6}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <typeparam name="TProperty">The included property type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Linq.IQueryable{``6}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``6,``7}}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <typeparam name="TProperty">The included property type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
            <typeparam name="TContext">The target DbContext type.</typeparam>
            <typeparam name="TParam1">The type of the first query parameter.</typeparam>
            <typeparam name="TParam2">The type of the second query parameter.</typeparam>
            <typeparam name="TParam3">The type of the third query parameter.</typeparam>
            <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
            <typeparam name="TResult">The query result type.</typeparam>
            <param name="queryExpression">The LINQ query expression.</param>
            <returns>A delegate that can be invoked to execute the compiled query.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)">
            <summary>
                Addresses a given property on an entity instance. This is useful when you want to reference a shadow state property in a
                LINQ query. Currently this method can only be used in LINQ queries and can not be used to access the value assigned to a
                property in other scenarios.
            </summary>
            <example>
                The following code performs a filter using the a LastUpdated shadow state property.
                <code>
                    var blogs = context.Blogs
                        .Where(b =&gt; EF.Property&lt;DateTime&gt;(b, "LastUpdated") > DateTime.Now.AddDays(-5))
                </code>
            </example>
            <typeparam name="TProperty"> The type of the property being referenced. </typeparam>
            <param name="entity"> The entity to access the property on. </param>
            <param name="propertyName"> The name of the property. </param>
            <returns> The value assigned to the property. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.EF.Functions">
            <summary>
                Provides CLR methods that get translated to database functions when used in LINQ to Entities queries.
                Calling these methods in other contexts (e.g. LINQ to Objects) will throw a <see cref="T:System.NotSupportedException" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions">
            <summary>
                Entity Framework LINQ related extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether a sequence contains any elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to check for being empty.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified
                predicate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if every element of the source sequence passes the test in the specified
                predicate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the number of elements in a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence
                that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if
                <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the first
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the last element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the last element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if
                <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the last
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence, and throws an exception
                if there is not exactly one element in the sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition,
                and throws an exception if more than one such element exists.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence that satisfies the condition in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
                this method throws an exception if there is more than one element in the sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence, or <c>default</c> (
                <typeparamref name="TSource" />)
                if the sequence contains no elements.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition or
                a default value if no such element exists; this method throws an exception if more than one element
                satisfies the condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence that satisfies the condition in
                <paramref name="predicate" />, or <c>default</c> ( <typeparamref name="TSource" /> ) if no such element is found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the minimum value of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the minimum value in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TResult">
                The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the minimum value in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the maximum value of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the maximum value in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TResult">
                The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the maximum value in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="item"> The object to locate in the sequence. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a list from.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates an array from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create an array from.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains an array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Specifies related entities to include in the query results. The navigation property to be included is specified starting with the
                type of entity being queried (<typeparamref name="TEntity" />). If you wish to include additional types based on the navigation
                properties of the type being included, then chain a call to
                <see
                    cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
                after this call.
            </summary>
            <example>
                <para>
                    The following query shows including a single level of related entities.
                    <code>
                        context.Blogs.Include(blog => blog.Posts);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags);
                    </code>
                </para>
                <para>
                    The following query shows including multiple levels and branches of related data.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags).ThenInclude(tag => tag.TagInfo)
                            .Include(blog => blog.Contributors);
                    </code>
                </para>
                <para>
                    The following query shows including a single level of related entities on a derived type using casting.
                    <code>
                        context.Blogs.Include(blog => ((SpecialBlog)blog).SpecialPosts);
                    </code>
                </para>
                <para>
                    The following query shows including a single level of related entities on a derived type using 'as' operator.
                    <code>
                        context.Blogs.Include(blog => (blog as SpecialBlog).SpecialPosts);
                    </code>
                </para>
            </example>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="source"> The source query. </param>
            <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t => t.Property1</c>).
            </param>
            <returns>
                A new query with the related data included.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
                Specifies additional related data to be further included based on a related type that was just included.
            </summary>
            <example>
                <para>
                    The following query shows including a single level of related entities.
                    <code>
                        context.Blogs.Include(blog => blog.Posts);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags);
                    </code>
                </para>
                <para>
                    The following query shows including multiple levels and branches of related data.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags).ThenInclude(tag => tag.TagInfo)
                            .Include(blog => blog.Contributors);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch, second one being on derived type using casting.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => ((SpecialPost)post).SpecialTags);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch, second one being on derived type using 'as' operator.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => (post as SpecialPost).SpecialTags);
                    </code>
                </para>
            </example>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <typeparam name="TPreviousProperty"> The type of the entity that was just included. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="source"> The source query. </param>
            <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t => t.Property1</c>).
            </param>
            <returns>
                A new query with the related data included.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
                Specifies additional related data to be further included based on a related type that was just included.
            </summary>
            <example>
                <para>
                    The following query shows including a single level of related entities.
                    <code>
                        context.Blogs.Include(blog => blog.Posts);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags);
                    </code>
                </para>
                <para>
                    The following query shows including multiple levels and branches of related data.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags).ThenInclude(tag => tag.TagInfo)
                            .Include(blog => blog.Contributors);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch, second one being on derived type.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => ((SpecialPost)post).SpecialTags);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch, second one being on derived type using alternative method.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => (post as SpecialPost).SpecialTags);
                    </code>
                </para>
            </example>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <typeparam name="TPreviousProperty"> The type of the entity that was just included. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="source"> The source query. </param>
            <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t => t.Property1</c>).
            </param>
            <returns>
                A new query with the related data included.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
                Specifies related entities to include in the query results. The navigation property to be included is
                specified starting with the type of entity being queried (<typeparamref name="TEntity" />). Further
                navigation properties to be included can be appended, separated by the '.' character.
            </summary>
            <example>
                <para>
                    The following query shows including a single level of related entities.
                    <code>
                        context.Blogs.Include("Posts");
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch.
                    <code>
                        context.Blogs.Include("Posts.Tags");
                    </code>
                </para>
                <para>
                    The following query shows including multiple levels and branches of related data.
                    <code>
                        context.Blogs
                            .Include("Posts.Tags.TagInfo')
                            .Include("Contributors");
                    </code>
                </para>
            </example>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <param name="navigationPropertyPath"> A string of '.' separated navigation property names to be included.  </param>
            <returns> A new query with the related data included. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.IgnoreQueryFilters``1(System.Linq.IQueryable{``0})">
            <summary>
                Specifies that the current Entity Framework LINQ query should not have any
                model-level entity query filters applied.
            </summary>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <returns>
                A new query that will not apply any model-level entity query filters.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
                <para>
                    Returns a new query where the change tracker will not track any of the entities that are returned.
                    If the entity instances are modified, this will not be detected by the change tracker and
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> will not persist those changes to the database.
                </para>
                <para>
                    Disabling change tracking is useful for read-only scenarios because it avoids the overhead of setting
                    up change tracking for each entity instance. You should not disable change tracking if you want to
                    manipulate entity instances and persist those changes to the database using
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
                </para>
                <para>
                    Identity resolution will still be performed to ensure that all occurrences of an entity with a given key
                    in the result set are represented by the same entity instance.
                </para>
                <para>
                    The default tracking behavior for queries can be controlled by <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" />.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <returns>
                A new query where the result set will not be tracked by the context.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})">
            <summary>
                <para>
                    Returns a new query where the change tracker will keep track of changes for all entities that are returned.
                    Any modification to the entity instances will be detected and persisted to the database during
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
                </para>
                <para>
                    The default tracking behavior for queries can be controlled by <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" />.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <returns>
                A new query where the result set will not be tracked by the context.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})">
            <summary>
                Enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
            <param name="source"> The source query. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
            <param name="source"> The source query. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function and a comparer.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="T">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
            <param name="action"> The action to perform on each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.EntityState">
            <summary>
                The state in which an entity is being tracked by a context.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.EntityState.Detached">
            <summary>
                The entity is not being tracked by the context.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged">
            <summary>
                The entity is being tracked by the context and exists in the database. Its property
                values have not changed from the values in the database.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.EntityState.Deleted">
            <summary>
                The entity is being tracked by the context and exists in the database. It has been marked
                for deletion from the database.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.EntityState.Modified">
            <summary>
                The entity is being tracked by the context and exists in the database. Some or all of its
                property values have been modified.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.EntityState.Added">
            <summary>
                The entity is being tracked by the context but does not yet exist in the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.EntityTypeExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets all types in the model that derive from a given entity type.
            </summary>
            <param name="entityType"> The base type to find types that derive from. </param>
            <returns> The derived types. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the root base type for a given entity type.
            </summary>
            <param name="entityType"> The type to find the root of. </param>
            <returns>
                The root base type. If the given entity type is not a derived type, then the same entity type is returned.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Determines if an entity type derives from (or is the same as) a given entity type.
            </summary>
            <param name="entityType"> The base entity type. </param>
            <param name="derivedType"> The entity type to check if it derives from <paramref name="entityType" />. </param>
            <returns>
                True if <paramref name="derivedType" /> derives from (or is the same as) <paramref name="entityType" />, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the least derived type between the specified two.
            </summary>
            <param name="entityType"> The type to compare. </param>
            <param name="otherEntityType"> The other entity type to compare with. </param>
            <returns>
                The least derived type between the specified two.
                If the given entity types are not related, then <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.HasDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets a value indicating whether this entity type has a defining navigation.
            </summary>
            <returns> True if this entity type has a defining navigation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsOwned(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets a value indicating whether this entity type is owned by another entity type.
            </summary>
            <returns> True if this entity type is owned by another entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the primary or alternate key that is defined on the given property. Returns null if no key is defined
                for the given property.
            </summary>
            <param name="entityType"> The entity type to find the key on. </param>
            <param name="property"> The property that the key is defined on. </param>
            <returns> The key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified
                property are returned. Composite foreign keys that include the specified property are not returned.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="property"> The property to find the foreign keys on. </param>
            <returns> The foreign keys. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                Gets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified
                set of properties are returned.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="properties"> The properties to find the foreign keys on. </param>
            <returns> The foreign keys. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="property"> The property that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The foreign key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                is the principal).
            </summary>
            <param name="entityType"> The entity type to find the foreign keys for. </param>
            <returns> The foreign keys that reference the given entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)">
            <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
            <param name="entityType"> The entity type to find the navigation property on. </param>
            <param name="propertyInfo"> The navigation property on the entity class. </param>
            <returns> The navigation property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
            <param name="entityType"> The entity type to find the navigation property on. </param>
            <param name="name"> The name of the navigation property on the entity class. </param>
            <returns> The navigation property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets all navigation properties on the given entity type.
            </summary>
            <param name="entityType"> The entity type to get navigation properties for. </param>
            <returns> All navigation properties on the given entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)">
            <summary>
                <para>
                    Gets a property on the given entity type. Returns null if no property is found.
                </para>
                <para>
                    This API only finds scalar properties and does not find navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)" /> to find a navigation property.
                </para>
            </summary>
            <param name="entityType"> The entity type to find the property on. </param>
            <param name="propertyInfo"> The property on the entity class. </param>
            <returns> The property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the index defined on the given property. Returns null if no index is defined.
            </summary>
            <param name="entityType"> The entity type to find the index on. </param>
            <param name="property"> The property to find the index on. </param>
            <returns> The index, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the change tracking strategy being used for this entity type. This strategy indicates how the
                context detects changes to properties for an instance of the entity type.
            </summary>
            <param name="entityType"> The entity type to get the change tracking strategy for. </param>
            <returns> The change tracking strategy. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)">
            <summary>
                Executes the specified operation.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})">
            <summary>
                Executes the specified operation and returns the result.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
            <returns>The result from the operation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0})">
            <summary>
                Executes the specified operation.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="state">The state that will be passed to the operation.</param>
            <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the specified asynchronous operation.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="operation">A function that returns a started task.</param>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="operation">A function that returns a started task.</param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
                Executes the specified asynchronous operation.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="state">The state that will be passed to the operation.</param>
            <param name="operation">A function that returns a started task.</param>
            <typeparam name="TState">The type of the state.</typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="state">The state that will be passed to the operation.</param>
            <param name="operation">A function that returns a started task.</param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState">The type of the state.</typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="state">The state that will be passed to the operation.</param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1})">
            <summary>
                Executes the specified operation and returns the result.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="state">The state that will be passed to the operation.</param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
            <returns>The result from the operation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="state">The state that will be passed to the operation.</param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},System.Func{``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}},``0)">
            <summary>
                Executes the specified operation and returns the result.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
            <returns> The result from the operation. </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
            <param name="strategy">The strategy that will be used for the execution.</param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action,System.Func{System.Boolean})">
            <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="operation">
                A delegate representing an executable operation.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="operation">
                A function that returns a started task.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="operation">
                A function that returns a started task.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0},System.Func{System.Boolean})">
            <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
            <returns> The result from the operation. </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A delegate representing an executable operation.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A function that returns a started task.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
            <returns> The result from the operation. </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean},System.Func{Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction})">
            <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="beginTransaction"> A delegate that begins a transaction using the given context. </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
            <returns> The result from the operation. </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Func{Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="beginTransaction"> A delegate that begins a transaction using the given context. </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Extensions.Internal.AsyncQueryProviderExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Extensions.Internal.AsyncQueryProviderExtensions.CreateEntityQueryableExpression(Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.IsEFProperty(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.IsEFPropertyMethod(System.Reflection.MethodInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Extensions.Internal.MethodInfoExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Extensions.Internal.MethodInfoExtensions.MethodIsClosedFormOf(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesFailed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.DbContext,System.Exception)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DuplicateDependentEntityTypeInstanceWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryIterationFailed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Type,System.Exception)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryModelCompiling(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RowLimitingOperationWithoutOrderByWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.FirstWithoutOrderByAndFilterWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryModelOptimized(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NavigationIncluded(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryExecutionPlanned(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SensitiveDataLoggingEnabledWarning``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.IncludeIgnoredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedCollectionNavigationNullComparisonWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedReferenceComparisonWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ServiceProviderCreated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.IServiceProvider)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ManyServiceProvidersCreatedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.Collections.Generic.ICollection{System.IServiceProvider})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ContextInitialized(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ExecutionStrategyRetrying(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.Collections.Generic.IReadOnlyList{System.Exception},System.TimeSpan,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.LazyLoadOnDisposedContextWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,System.Object,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NavigationLazyLoading(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,System.Object,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DetachedLazyLoadingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,System.Object,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ShadowPropertyCreated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RedundantIndexRemoved(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.IncompatibleMatchingForeignKeyProperties(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RequiredAttributeOnDependent(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RequiredAttributeOnBothNavigations(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ConflictingShadowForeignKeysWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultiplePrimaryKeyCandidates(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultipleNavigationProperties(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultipleInversePropertiesSameTargetWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}},System.Reflection.MemberInfo,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NonDefiningInverseNavigationWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NonOwnershipInverseNavigationWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyAttributesOnBothPropertiesWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyAttributesOnBothNavigationsWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DetectChangesStarting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DetectChangesCompleted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PropertyChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PropertyChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CollectionChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.ISet{System.Object},System.Collections.Generic.ISet{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CollectionChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.ISet{System.Object},System.Collections.Generic.ISet{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ReferenceChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ReferenceChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StartedTracking(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StartedTrackingSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StateChanged(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StateChangedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ValueGenerated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ValueGeneratedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDelete(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteOrphan(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteOrphanSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesStarting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesCompleted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.DbContext,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ContextDisposed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions.GetDependencies(Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
            <remarks>
                This should only be called from <see cref="T:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1"/> as it is created
                before the context is initialized
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions.GetDependencies(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbContextOptionsExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextOptionsExtensions.BuildOptionsFragment(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullConstantExpression(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchPropertyAccessList(System.Linq.Expressions.LambdaExpression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.PropertyInfo})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchSimplePropertyAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveTypeAs(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsEntityQueryable(System.Linq.Expressions.ConstantExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.TryGetReferencedQuerySource(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateAssignExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullPropagationCandidate(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateKeyAccessExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.AsyncLock">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.AsyncLock.#ctor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.AsyncLock.LockAsync(System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.AsyncLock.Lock">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.AsyncLock.Releaser">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.AsyncLock.Releaser.Dispose">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.ConcurrencyDetector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ConcurrencyDetector.#ctor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ConcurrencyDetector.EnterCriticalSection">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ConcurrencyDetector.EnterCriticalSectionAsync(System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ConcurrencyDetector.Dispose">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.CurrentDbContext">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CurrentDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CurrentDbContext.Context">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                </para>
                <para>
                    This type supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This type may change or be removed in future releases.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector,Microsoft.EntityFrameworkCore.Internal.IDbSetSource,Microsoft.EntityFrameworkCore.Internal.IDbQuerySource,Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.Model">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.SetSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.QuerySource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.EntityFinderFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.QueryProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.StateManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.ChangeDetector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.EntityGraphAttacher">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.UpdateLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextDependencies.InfrastructureLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Lease">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Lease.#ctor(Microsoft.EntityFrameworkCore.Internal.DbContextPool{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Lease.Context">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Rent">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Return(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Dispose">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot.#ctor(System.Nullable{System.Boolean},System.Nullable{Microsoft.EntityFrameworkCore.QueryTrackingBehavior},System.Nullable{System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot.AutoDetectChangesEnabled">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot.QueryTrackingBehavior">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot.AutoTransactionsEnabled">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbContextServices">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbContextServices.Initialize(System.IServiceProvider,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextServices.CurrentContext">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextServices.Model">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextServices.ContextOptions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbContextServices.InternalServiceProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbSetFinder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbSetFinder.FindSets(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbSetFinderExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbSetFinderExtensions.CreateClrTypeDbSetMapping(Microsoft.EntityFrameworkCore.Internal.IDbSetFinder,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbSetInitializer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbSetInitializer.#ctor(Microsoft.EntityFrameworkCore.Internal.IDbSetFinder,Microsoft.EntityFrameworkCore.Internal.IDbSetSource,Microsoft.EntityFrameworkCore.Internal.IDbQuerySource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbSetInitializer.InitializeSets(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbSetProperty">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbSetProperty.#ctor(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbSetProperty.Name">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbSetProperty.ClrType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbSetProperty.Setter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DbSetProperty.IsQueryType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DbSetSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbSetSource.Create(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DbSetSource.CreateQuery(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions,System.Diagnostics.DiagnosticSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.Options">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.Logger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.DiagnosticSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.ShouldLogSensitiveData">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.GetLogBehavior(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Internal.IDbSetSource,Microsoft.EntityFrameworkCore.Internal.IDbSetCache,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.Find(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.Microsoft#EntityFrameworkCore#Internal#IEntityFinder#Find(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.Microsoft#EntityFrameworkCore#Internal#IEntityFinder#FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.Load(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.LoadAsync(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.Query(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.GetDatabaseValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.GetDatabaseValuesAsync(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinder`1.Microsoft#EntityFrameworkCore#Internal#IEntityFinder#Query(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.EntityFinderFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinderFactory.#ctor(Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Internal.IDbSetSource,Microsoft.EntityFrameworkCore.Internal.IDbSetCache)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinderFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.EntityFinderSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EntityFinderSource.Create(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Internal.IDbSetSource,Microsoft.EntityFrameworkCore.Internal.IDbSetCache,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Any(System.Collections.IEnumerable)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.Graph`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSection">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSectionAsync(System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext.Context">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.Model">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QuerySource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QueryProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.UpdateLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.InfrastructureLogger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbContextPool">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Rent">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Return(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetPool(Microsoft.EntityFrameworkCore.Internal.IDbContextPool)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SnapshotConfiguration">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.Resurrect(Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.ResetState">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbContextServices">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbContextServices.Initialize(System.IServiceProvider,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextServices.CurrentContext">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextServices.Model">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextServices.ContextOptions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IDbContextServices.InternalServiceProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbQueryCache">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbQueryCache.GetOrAddQuery(Microsoft.EntityFrameworkCore.Internal.IDbQuerySource,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbQuerySource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbQuerySource.CreateQuery(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbSetCache">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetOrAddSet(Microsoft.EntityFrameworkCore.Internal.IDbSetSource,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbSetFinder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbSetFinder.FindSets(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbSetInitializer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbSetInitializer.InitializeSets(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IDbSetSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IDbSetSource.Create(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IEntityFinder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder.Find(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder.Load(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder.LoadAsync(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder.Query(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder.GetDatabaseValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder.GetDatabaseValuesAsync(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IEntityFinderFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinderFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource.Create(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Internal.IDbSetSource,Microsoft.EntityFrameworkCore.Internal.IDbSetCache,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IEntityFinder`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder`1.Find(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder`1.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IEntityFinder`1.Query(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.#ctor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.#ctor(Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.Length">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.Append(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.AppendLine">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.AppendLine(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.AppendLines(System.Object,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.Clear">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.IncrementIndent">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.DecrementIndent">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.Indent">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.InternalAccessorExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalAccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.InternalDbQuery`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbQuery`1.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Local">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Find(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.FindAsync(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Add(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Attach(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Remove(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Update(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.AddRange(`0[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.AddRangeAsync(`0[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.AttachRange(`0[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.RemoveRange(`0[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.UpdateRange(`0[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.AttachRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap.ServiceCollection">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap.GetOrCreateDescriptorIndexes(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap.AddNewDescriptor(System.Collections.Generic.IList{System.Int32},Microsoft.Extensions.DependencyInjection.ServiceDescriptor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap.AddDependencySingleton``1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap.AddDependencyScoped``1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap.AddDependency(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap.DoPatchInjection``1">
            <summary>
                <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
                <para>
                    Re-writes the registration for the given service such that if the implementation type
                    implements <see cref="T:Microsoft.EntityFrameworkCore.Internal.IPatchServiceInjectionSite" />, then
                    <see cref="M:Microsoft.EntityFrameworkCore.Internal.IPatchServiceInjectionSite.InjectServices(System.IServiceProvider)" /> will be called while resolving
                    the service allowing additional services to be injected without breaking the existing
                    constructor.
                </para>
                <para>
                    This mechanism should only be used to allow new services to be injected in a patch or
                    point release without making binary breaking changes.
                </para>
            </summary>
            <typeparam name="TService"> The service contract. </typeparam>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IPatchServiceInjectionSite">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IPatchServiceInjectionSite.InjectServices(System.IServiceProvider)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IReferenceRoot`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IReferenceRoot`1.Track(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.IReferenceRoot`1.Release(Microsoft.EntityFrameworkCore.Internal.Reference{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.IRegisteredServices">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.IRegisteredServices.Services">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.ISingletonOptionsInitializer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ISingletonOptionsInitializer.EnsureInitialized(System.IServiceProvider,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.LazyLoader">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.LazyLoader.#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.LazyLoader.Logger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.LazyLoader.Context">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.LazyLoader.Load(System.Object,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.LazyLoader.LoadAsync(System.Object,System.Threading.CancellationToken,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.LazyLoader.Dispose">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.LazyRef`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.LazyRef`1.#ctor(System.Func{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.LazyRef`1.#ctor(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.LazyRef`1.Value">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.LazyRef`1.HasValue">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.LazyRef`1.Reset(System.Func{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.LoggingOptions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.LoggingOptions.Initialize(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.LoggingOptions.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.LoggingOptions.IsSensitiveDataLoggingEnabled">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.LoggingOptions.IsSensitiveDataLoggingWarned">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.LoggingOptions.WarningsConfiguration">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.Multigraph`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.ToString(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Edges">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetEdges(`0,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertex(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertices(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdge(`0,`0,`1)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdges(`0,`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean},System.Func{System.Collections.Generic.IReadOnlyList{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort(System.Func{System.Collections.Generic.IReadOnlyList{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Vertices">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetOutgoingNeighbours(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetIncomingNeighbours(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``2(``1@,``0,System.Func{``0,``1})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``3(``2@,``0,``1,System.Func{``0,``1,``2})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``1(``0@,``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``2(``1@,``0,System.Action{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.ProductInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ProductInfo.GetVersion">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.Reference`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Reference`1.#ctor(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Reference`1.#ctor(`0,Microsoft.EntityFrameworkCore.Internal.IReferenceRoot{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.Reference`1.Object">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.Reference`1.Dispose">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2.Equals(`0,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2.GetHashCode(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.ReferenceEqualityComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.ReferenceEqualityComparer.Instance">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.RegisteredServices">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.RegisteredServices.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.RegisteredServices.Services">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.SemanticVersionComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.SemanticVersionComparer.Compare(System.String,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.ServiceProviderCache">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.ServiceProviderCache.Instance">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.ServiceProviderCache.GetOrAdd(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.SingletonOptionsInitializer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.SingletonOptionsInitializer.EnsureInitialized(System.IServiceProvider,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.TypeExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.IsDefaultValue(System.Type,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.ShortDisplayName(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.DisplayName(System.Type,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.GetFieldInfo(System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.GetNamespaces(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.CoreStrings">
            <summary>
            	This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ArgumentIsEmpty(System.Object)">
            <summary>
                The string argument '{argumentName}' cannot be empty.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CircularDependency(System.Object)">
            <summary>
                Unable to save changes because a circular dependency was detected in the data to be saved: '{cycle}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidEnumValue(System.Object,System.Object)">
            <summary>
                The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.StillUsingTypeMapper">
            <summary>
                The application or database provider is using an Obsolete TypeMapper API even after the provider has implemented a TypeMappingSource. The code must be updated to use the non-obsolete replacement APIs, as indicated by the Obsolete compiler warnings.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidPropertiesExpression(System.Object)">
            <summary>
                The properties expression '{expression}' is not valid. The expression should represent a simple property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidPropertyExpression(System.Object)">
            <summary>
                The expression '{expression}' is not a valid property expression. The expression should represent a simple property access: 't =&gt; t.MyProperty'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IdentityConflict(System.Object,System.Object)">
            <summary>
                The instance of entity type '{entityType}' cannot be tracked because another instance with the same key value for {keyProperties} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IdentityConflictSensitive(System.Object,System.Object)">
            <summary>
                The instance of entity type '{entityType}' cannot be tracked because another instance with the key value '{keyValue}' is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.WrongStateManager(System.Object)">
            <summary>
                Cannot start tracking InternalEntityEntry for entity type '{entityType}' because it was created by a different StateManager instance.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.MultipleEntries(System.Object)">
            <summary>
                Cannot start tracking InternalEntityEntry for entity type '{entityType}' because another InternalEntityEntry is already tracking the same entity.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyNotFound(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists and has been included in the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyIsNavigation(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is being accessed using the '{PropertyMethod}' method, but is defined in the model as a navigation property. Use either the '{ReferenceMethod}' or '{CollectionMethod}' method to access navigation properties.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationIsProperty(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is being accessed using the '{ReferenceMethod}' or '{CollectionMethod}' method, but is defined in the model as a non-navigation property. Use the '{PropertyMethod}' method to access non-navigation properties.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ReferenceIsCollection(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is being accessed using the '{ReferenceMethod}' method, but is defined in the model as a collection navigation property. Use the '{CollectionMethod}' method to access collection navigation properties.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CollectionIsReference(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is being accessed using the '{CollectionMethod}' method, but is defined in the model as a non-collection, reference navigation property. Use the '{ReferenceMethod}' method to access reference navigation properties.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ReferenceMustBeLoaded(System.Object,System.Object)">
            <summary>
                Navigation property '{navigation}' on entity type '{entityType}' cannot have 'IsLoaded' set to false because the referenced entity is non-null and therefore is loaded.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CannotLoadDetached(System.Object,System.Object)">
            <summary>
                Navigation property '{navigation}' on entity of type '{entityType}' cannot be loaded because the entity is not being tracked. Navigation properties can only be loaded for tracked entities.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CollectionArgumentIsEmpty(System.Object)">
            <summary>
                The collection argument '{argumentName}' must contain at least one element.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.EntityRequiresKey(System.Object)">
            <summary>
                The entity type '{entityType}' requires a primary key to be defined.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.KeyPropertiesWrongEntity(System.Object,System.Object)">
            <summary>
                The specified key properties {key} are not declared on the entity type '{entityType}'. Ensure key properties are declared on the target entity type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ForeignKeyPropertiesWrongEntity(System.Object,System.Object)">
            <summary>
                The specified foreign key properties {foreignKey} are not declared on the entity type '{entityType}'. Ensure foreign key properties are declared on the target entity type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IndexPropertiesWrongEntity(System.Object,System.Object)">
            <summary>
                The specified index properties {index} are not declared on the entity type '{entityType}'. Ensure index properties are declared on the target entity type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IQueryableNotAsync(System.Object)">
            <summary>
                The source IQueryable doesn't implement IAsyncEnumerable&lt;{genericParameter}&gt;. Only sources that implement IAsyncEnumerable can be used for Entity Framework asynchronous operations.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IQueryableProviderNotAsync">
            <summary>
                The provider for the source IQueryable doesn't implement IAsyncQueryProvider. Only providers that implement IEntityQueryProvider can be used for Entity Framework asynchronous operations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ChangeTrackingInterfaceMissing(System.Object,System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' is configured to use the '{changeTrackingStrategy}' change tracking strategy but does not implement the required '{notificationInterface}' interface.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NonNotifyingCollection(System.Object,System.Object,System.Object)">
            <summary>
                The collection type being used for navigation property '{navigation}' on entity type '{entityType}' does not implement 'INotifyCollectionChanged'. Any entity type configured to use the '{changeTrackingStrategy}' change tracking strategy must use collections that implement 'INotifyCollectionChanged'. Consider using 'ObservableCollection&lt;T&gt;' for this.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ResetNotSupported">
            <summary>
                'ObservableCollection&lt;T&gt;.Clear()' is not supported because it uses the 'INotifyCollectionChanged' 'Reset' operation, which does not supply the items removed. Either use multiple calls to 'Remove' or use a notifying collection that supports 'Clear', such as 'Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet&lt;T&gt;'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.OriginalValueNotTracked(System.Object,System.Object)">
            <summary>
                The original value for property '{property}' of entity type '{entityType}' cannot be accessed because it is not being tracked. Original values are not recorded for most properties of entities when the 'ChangingAndChangedNotifications' strategy is used. To access all original values use a different change tracking strategy such as 'ChangingAndChangedNotificationsWithOriginalValues'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ValueCannotBeNull(System.Object,System.Object,System.Object)">
            <summary>
                The value for property '{property}' of entity type '{entityType}' cannot be set to null because its type is '{propertyType}' which is not a nullable type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The value for property '{property}' of entity type '{entityType}' cannot be set to a value of type '{valueType}' because its type is '{propertyType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyDoesNotBelong(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' belongs to entity type '{entityType}' but is being used with an instance of entity type '{expectedType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.MissingBackingField(System.Object,System.Object,System.Object)">
            <summary>
                The specified field '{field}' could not be found for property '{property}' on entity type '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.BadBackingFieldType(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The specified field '{field}' of type '{fieldType}' cannot be used for the property '{entityType}.{property}' of type '{propertyType}'. Only backing fields of types that are assignable from the property type can be used.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoBackingField(System.Object,System.Object,System.Object)">
            <summary>
                No field was found backing property '{property}' of entity type '{entity}'. Either name the backing field so that it is picked up by convention, configure the backing field to use, or use a different '{pam}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoBackingFieldLazyLoading(System.Object,System.Object)">
            <summary>
                No field was found backing property '{property}' of entity type '{entity}'. Lazy-loaded navigation properties must have backing fields. Either name the backing field so that it is picked up by convention or configure the backing field to use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoFieldOrSetter(System.Object,System.Object)">
            <summary>
                No backing field could be found for property '{property}' of entity type '{entity}' and the property does not have a setter.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoFieldOrGetter(System.Object,System.Object)">
            <summary>
                No backing field could be found for property '{property}' of entity type '{entity}' and the property does not have a getter.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ReadonlyField(System.Object,System.Object)">
            <summary>
                Field '{field}' of entity type '{entity}' is readonly and so cannot be set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoProperty(System.Object,System.Object,System.Object)">
            <summary>
                No property was associated with field '{field}' of entity type '{entity}'. Either configure a property or use a different '{pam}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoSetter(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' of entity type '{entity}' does not have a setter. Either make the property writable or use a different '{pam}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoGetter(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' of entity type '{entity}' does not have a getter. Either make the property readable or use a different '{pam}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoClrType(System.Object)">
            <summary>
                The CLR entity materializer cannot be used for entity type '{entityType}' because it is a shadow state entity type.  Materialization to a CLR type is only possible for entity types that have a corresponding CLR type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.MultipleProvidersConfigured(System.Object)">
            <summary>
                Services for database providers {storeNames} have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to UseInternalServiceProvider. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DbContextMissingConstructor(System.Object)">
            <summary>
                AddDbContext was called with configuration, but the context type '{contextType}' only declares a parameterless constructor. This means that the configuration passed to AddDbContext will never be used. If configuration is passed to AddDbContext, then '{contextType}' should declare a constructor that accepts a DbContextOptions&lt;{contextType}&gt; and must pass it to the base constructor for DbContext.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoProviderConfigured">
            <summary>
                No database provider has been configured for this DbContext. A provider can be configured by overriding the DbContext.OnConfiguring method or by using AddDbContext on the application service provider. If AddDbContext is used, then also ensure that your DbContext type accepts a DbContextOptions&lt;TContext&gt; object in its constructor and passes it to the base constructor for DbContext.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoEfServices">
            <summary>
                Entity Framework services have not been added to the internal service provider. Either remove the call to UseInternalServiceProvider so that EF will manage its own internal services, or use the method from your database provider to add the required services to the service provider (e.g. AddEntityFrameworkSqlServer).
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidReplaceService(System.Object,System.Object)">
            <summary>
                A call was made to '{replaceService}', but Entity Framework is not building its own internal service provider. Either allow EF to build the service provider by removing the call to '{useInternalServiceProvider}', or build replacement services into the service provider before passing it to '{useInternalServiceProvider}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidUseService(System.Object,System.Object,System.Object)">
            <summary>
                A call was made to '{useService}', but Entity Framework is not building its own internal service provider. Either allow EF to build the service provider by removing the call to '{useInternalServiceProvider}', or build the '{service}' services to use into the service provider before passing it to '{useInternalServiceProvider}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SingletonOptionChanged(System.Object,System.Object)">
            <summary>
                A call was made to '{optionCall}' that changed an option that must be constant within a service provider, but Entity Framework is not building its own internal service provider. Either allow EF to build the service provider by removing the call to '{useInternalServiceProvider}', or ensure that the configuration for '{optionCall}' does not change for all uses of a given service provider passed to '{useInternalServiceProvider}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogServiceProviderCreated">
            <summary>
                An 'IServiceProvider' was created for internal use by Entity Framework.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogManyServiceProvidersCreated">
            <summary>
                More than twenty 'IServiceProvider' instances have been created for internal use by Entity Framework. This is commonly caused by injection of a new singleton service instance into every DbContext instance. For example, calling UseLoggerFactory passing in a new instance each time--see https://go.microsoft.com/fwlink/?linkid=869049 for more details. Consider reviewing calls on 'DbContextOptionsBuilder' that may require new service providers to be built.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogContextInitialized">
            <summary>
                Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NotAnEFService(System.Object)">
            <summary>
                The database provider attempted to register an implementation of the '{service}' service. This is not a service defined by EF and as such must be registered as a provider-specific service using the 'TryAddProviderSpecificServices' method.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ImplementationTypeRequired(System.Object)">
            <summary>
                The implementation type for the registration of the '{service}' service could not be determined. Specific implementation types must be used for services that expect multiple registrations so as to avoid duplicates.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SingletonRequired(System.Object,System.Object)">
            <summary>
                An attempt was made to register an instance for the '{scope}' service '{service}'. Instances can only be registered for 'Singleton' services.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoValueGenerator(System.Object,System.Object,System.Object)">
            <summary>
                The '{property}' on entity type '{entityType}' does not have a value set and no value generator is available for properties of type '{propertyType}'. Either set a value for the property before adding the entity or configure a value generator for properties of type '{propertyType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.BadDependencyRegistration(System.Object)">
            <summary>
                The service dependencies type '{dependenciesType}' has been registered inappropriately in the service collection. Service dependencies types must only be registered by Entity Framework, or in rare cases by database providers and then only to change the service lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.BadValueGeneratorType(System.Object,System.Object)">
            <summary>
                The type '{givenType}' cannot be used a a value generator because it does not inherit from '{expectedType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CannotCreateValueGenerator(System.Object)">
            <summary>
                Cannot create instance of value generator type '{generatorType}'. Ensure that the type is instantiable and has a parameterless constructor, or use the overload of HasValueGenerator that accepts a delegate.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.TempValuePersists(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' has a temporary value while attempting to change the entity's state to '{state}'. Either set a permanent value explicitly or ensure that the database is configured to generate values for this property.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogExceptionDuringQueryIteration">
            <summary>
                An exception occurred in the database while iterating the results of a query for context type '{contextType}'.{newline}{error}
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogExceptionDuringSaveChanges">
            <summary>
                An exception occurred in the database while saving changes for context type '{contextType}'.{newline}{error}
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogDetectChangesStarting">
            <summary>
                DetectChanges starting for '{contextType}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogDetectChangesCompleted">
            <summary>
                DetectChanges completed for '{contextType}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogPropertyChangeDetected">
            <summary>
                Unchanged '{entityType}.{property}' detected as changed and will be marked as modified. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogPropertyChangeDetectedSensitive">
            <summary>
                Unchanged '{entityType}.{property}' detected as changed from '{oldValue}' to '{newValue}' and will be marked as modified for entity with key '{keyValues}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogForeignKeyChangeDetected">
            <summary>
                Foreign key property '{entityType}.{property}' detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogForeignKeyChangeDetectedSensitive">
            <summary>
                Foreign key property '{entityType}.{property}' detected as changed from '{oldValue}' to '{newValue}' for entity with key '{keyValues}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogCollectionChangeDetected">
            <summary>
                Detected {addedCount} entities added and {removedCount} entities removed from navigation property '{entityType}.{property}'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogCollectionChangeDetectedSensitive">
            <summary>
                Detected {addedCount} entities added and {removedCount} entities removed from navigation property '{entityType}.{property}' on entity with key '{keyValues}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogReferenceChangeDetected">
            <summary>
                Navigation property '{entityType}.{property}' detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogReferenceChangeDetectedSensitive">
            <summary>
                Navigation property '{entityType}.{property}' for entity with key '{keyValues}' detected as changed.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogCascadeDelete">
            <summary>
                Cascade state change of '{entityType}' entity to '{state}' due to deletion of parent '{parentType}' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogCascadeDeleteSensitive">
            <summary>
                Cascade state change of '{entityType}' entity with key '{keyValues}' to '{state}' due to deletion of parent '{parentType}' entity with key '{parentKeyValues}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogCascadeDeleteOrphan">
            <summary>
                '{entityType}' entity changed to '{state}' state due to severed required relationship to parent '{parentType}' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogCascadeDeleteOrphanSensitive">
            <summary>
                '{entityType}' entity with key '{keyValues}' changed to '{state}' state due to severed required relationship to parent '{parentType}' entity.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogStartedTracking">
            <summary>
                Context '{contextType}' started tracking '{entityType}' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogStartedTrackingSensitive">
            <summary>
                Context '{contextType}' started tracking '{entityType}' entity with key '{keyValues}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogStateChanged">
            <summary>
                An '{entityType}' entity tracked by '{contextType}' changed from '{oldState}' to '{newState}'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogStateChangedSensitive">
            <summary>
                The '{entityType}' entity with key '{keyValues}' tracked by '{contextType}' changed from '{oldState}' to '{newState}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogValueGenerated">
            <summary>
                '{contextType}' generated a value for the '{property}' property of new '{entityType}' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogValueGeneratedSensitive">
            <summary>
                '{contextType}' generated value '{keyValue}' for the '{property}' property of new '{entityType}' entity.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogTempValueGenerated">
            <summary>
                '{contextType}' generated a temporary value for the '{property}' property of new '{entityType}' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogTempValueGeneratedSensitive">
            <summary>
                '{contextType}' generated temporary value '{keyValue}' for the '{property}' property of new '{entityType}' entity.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogSaveChangesStarting">
            <summary>
                SaveChanges starting for '{contextType}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogSaveChangesCompleted">
            <summary>
                SaveChanges completed for '{contextType}' with {savedCount} entities written to the database.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogContextDisposed">
            <summary>
                '{contextType}' disposed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyMethodInvoked">
            <summary>
                The EF.Property&lt;T&gt; method may only be used within LINQ queries.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyWrongClrType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' cannot be added to type '{entityType}' because the type of the corresponding CLR property or field '{clrType}' does not match the specified type '{propertyType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ClrPropertyOnShadowEntity(System.Object,System.Object)">
            <summary>
                The property '{property}' cannot exist on type '{entityType}' because the type is marked as shadow state while the property is not. Shadow state types can only contain shadow state properties.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyInUseKey(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' cannot be removed from entity type '{entityType}' because it is being used in the key {key}. All containing keys must be removed or redefined before the property can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.KeyInUse(System.Object,System.Object,System.Object)">
            <summary>
                Cannot remove key {key} from entity type '{entityType}' because it is referenced by a foreign key in entity type '{dependentType}'. All foreign keys must be removed or redefined before the referenced key can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DuplicateServicePropertyType(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The service property '{property}' of type '{serviceType}' cannot be added to the entity type '{entityType}' because service property '{duplicateName}' of the same type already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoClrNavigation(System.Object,System.Object)">
            <summary>
                The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because there is no corresponding CLR property on the underlying type and navigations properties cannot be added to shadow state.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationSingleWrongClrType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because its CLR type '{clrType}' does not match the expected CLR type '{targetType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationCollectionWrongClrType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The collection navigation property '{navigation}' cannot be added to the entity type '{entityType}' because its CLR type '{clrType}' does not implement 'IEnumerable&lt;{targetType}&gt;'. Collection navigation properties must implement IEnumerable&lt;&gt; of the related entity.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ForeignKeyCountMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The number of properties specified for the foreign key {foreignKey} on entity type '{dependentType}' does not match the number of properties in the principal key {principalKey} on entity type '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ForeignKeyTypeMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The types of the properties specified for the foreign key {foreignKey} on entity type '{dependentType}' do not match the types of the properties in the principal key {principalKey} on entity type '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationBadType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The type of navigation property '{navigation}' on the entity type '{entityType}' is '{foundType}' which does not implement ICollection&lt;{targetType}&gt;. Collection navigation properties must implement ICollection&lt;&gt; of the target type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationArray(System.Object,System.Object,System.Object)">
            <summary>
                The type of navigation property '{navigation}' on the entity type '{entityType}' is '{foundType}' which is an array type.. Collection navigation properties cannot be arrays.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationNoSetter(System.Object,System.Object)">
            <summary>
                The navigation property '{navigation}' on the entity type '{entityType}' does not have a setter and no writable backing field was found or specified. Read-only collection navigation properties must be initialized before use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationCannotCreateType(System.Object,System.Object,System.Object)">
            <summary>
                The type of navigation property '{navigation}' on the entity type '{entityType}' is '{foundType}' for which it was not possible to create a concrete instance. Either initialize the property before use, add a public parameterless constructor to the type, or use a type which can be assigned a HashSet&lt;&gt; or List&lt;&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.KeyReadOnly(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is part of a key and so cannot be modified or marked as modified. To change the principal of an existing entity with an identifying foreign key first delete the dependent and invoke 'SaveChanges' then associate the dependent with the new principal.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyReadOnlyAfterSave(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is defined to be read-only after it has been saved, but its value has been modified or marked as modified.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyReadOnlyBeforeSave(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is defined to be read-only before it is saved, but its value has been set to something other than a temporary or default value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.KeyPropertyMustBeReadOnly(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' must be marked as read-only after it has been saved because it is part of a key. Key properties are always read-only once an entity has been saved for the first time.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.RelationshipConceptualNull(System.Object,System.Object)">
            <summary>
                The association between entity types '{firstType}' and '{secondType}' has been severed but the relationship is either marked as 'Required' or is implicitly required because the foreign key is not nullable. If the dependent/child entity should be deleted when a required relationship is severed, then setup the relationship to use cascade deletes.  Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyConceptualNull(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is marked as null, but this cannot be saved because the property is marked as required.  Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DuplicateForeignKey(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The foreign key {foreignKey} cannot be added to the entity type '{entityType}' because a foreign key on the same properties already exists on entity type '{duplicateEntityType}' and also targets the key {key} on '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DuplicateIndex(System.Object,System.Object,System.Object)">
            <summary>
                The index {index} cannot be added to the entity type '{entityType}' because an index on the same properties already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DuplicateKey(System.Object,System.Object,System.Object)">
            <summary>
                The key {key} cannot be added to the entity type '{entityType}' because a key on the same properties already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationToShadowEntity(System.Object,System.Object,System.Object)">
            <summary>
                The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because the target entity type '{targetType}' is defined in shadow state and navigations properties cannot point to shadow state entities.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.EntityTypeNotInRelationship(System.Object,System.Object,System.Object)">
            <summary>
                The specified entity type '{entityType}' is invalid. It should be either the dependent entity type '{dependentType}' or the principal entity type '{principalType}' or an entity type derived from one of them.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DuplicateEntityType(System.Object)">
            <summary>
                The entity type '{entityType}' cannot be added to the model because an entity type with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DuplicateAnnotation(System.Object)">
            <summary>
                The annotation '{annotation}' cannot be added because an annotation with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.AnnotationNotFound(System.Object)">
            <summary>
                The annotation '{annotation}' was not found. Ensure that the annotation has been added.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IncludeBadNavigation(System.Object,System.Object)">
            <summary>
                The property '{property}' is not a navigation property of entity type '{entityType}'. The 'Include(string)' method can only be used with a '.' separated list of navigation property names.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogCompilingQueryModel">
            <summary>
                Compiling query model: {newline}'{queryModel}'
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogOptimizedQueryModel">
            <summary>
                Optimized query model: {newline}'{queryModel}'
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogIncludingNavigation">
            <summary>
                Including navigation: '{navigation}'
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogQueryExecutionPlanned">
            <summary>
                {plan}
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CannotBeNullable(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' cannot be marked as nullable/optional because the type of the property is '{propertyType}' which is not a nullable type. Any property can be marked as non-nullable/required, but only properties of nullable types and which are not part of primary key can be marked as nullable/optional.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.KeyPropertyCannotBeNullable(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' cannot be marked as nullable/optional because it has been included in a key {key}.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.RecursiveOnModelCreating">
            <summary>
                An attempt was made to use the model while it was being created. A DbContext instance cannot be used inside OnModelCreating in any way that makes use of the model that is being created.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.RecursiveOnConfiguring">
            <summary>
                An attempt was made to use the context while it is being configured. A DbContext instance cannot be used inside OnConfiguring since it is still being configured at this point. This can happen if a second operation is started on this context before a previous operation completed. Any instance members are not guaranteed to be thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.EntityTypeInUseByReferencingForeignKey(System.Object,System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' cannot be removed because it is being referenced by foreign key {foreignKey} on '{referencingEntityType}'. All referencing foreign keys must be removed or redefined before the entity type can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ArgumentPropertyNull(System.Object,System.Object)">
            <summary>
                The property '{property}' of the argument '{argument}' cannot be null.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.RelationshipCannotBeInverted">
            <summary>
                The principal and dependent ends of the relationship cannot be flipped once foreign key or principal key properties have been specified.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidEntityType(System.Object,System.Object)">
            <summary>
                The entity type '{type}' provided for the argument '{argumentName}' must be a reference type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ReferencedShadowKey(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The relationship from '{referencingEntityTypeOrNavigation}' to '{referencedEntityTypeOrNavigation}' with foreign key properties {foreignKeyPropertiesWithTypes} cannot target the primary key {primaryKeyPropertiesWithTypes} because it is not compatible. Configure a principal key or a set of compatible foreign key properties for this relationship.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.MutableKeyProperty(System.Object)">
            <summary>
                The property '{keyProperty}' cannot be configured as 'ValueGeneratedOnUpdate' or 'ValueGeneratedOnAddOrUpdate' because the key value cannot be changed after the entity has been added to the store.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ExpressionParameterizationException">
            <summary>
                An exception was thrown while attempting to evaluate a LINQ query parameter expression. To show additional information call EnableSensitiveDataLogging() when overriding DbContext.OnConfiguring.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidValueGeneratorFactoryProperty(System.Object,System.Object,System.Object)">
            <summary>
                The '{factory}' cannot create a value generator for property '{property}' on entity type '{entityType}'. Only integer properties are supported.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DerivedEntityTypeKey(System.Object,System.Object)">
            <summary>
                A key cannot be configured on '{derivedType}' because it is a derived type. The key must be configured on the root type '{rootType}'. If you did not intend for '{rootType}' to be included in the model, ensure that it is not included in a DbSet property on your context, referenced in a configuration call to ModelBuilder, or referenced from a navigation property on a type that is included in the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CircularInheritance(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' cannot inherit from '{baseEntityType}' because '{baseEntityType}' is a descendant of '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DerivedEntityCannotHaveKeys(System.Object)">
            <summary>
                Unable to set a base type for entity type '{entityType}' because it has one or more keys defined.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.GraphDoesNotContainVertex(System.Object)">
            <summary>
                The edge cannot be added because the graph does not contain vertex '{vertex}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CannotMaterializeAbstractType(System.Object)">
            <summary>
                Unable to create an instance of type entity type '{entityType}' because it is abstract. Either make it non-abstract or consider mapping at least one derived type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.FindNotCompositeKey(System.Object,System.Object)">
            <summary>
                Entity type '{entityType}' is defined with a single key property, but {valuesCount} values were passed to the 'DbSet.Find' method.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.FindValueCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                Entity type '{entityType}' is defined with a {propertiesCount}-part composite key, but {valuesCount} values were passed to the 'DbSet.Find' method.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.FindValueTypeMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The key value at position {index} of the call to 'DbSet&lt;{entityType}&gt;.Find' was of type '{valueType}', which does not match the property type of '{propertyType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ForeignKeyReferencedEntityKeyMismatch(System.Object,System.Object)">
            <summary>
                The provided principal entity key '{principalKey}' is not a key on the entity type '{principalEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.WrongGenericPropertyType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Property '{property}' on entity type '{entityType}' is of type '{actualType}' but the generic type provided is of type '{genericType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NonGenericOptions(System.Object)">
            <summary>
                The DbContextOptions passed to the {contextType} constructor must be a DbContextOptions&lt;{contextType}&gt;. When registering multiple DbContext types make sure that the constructor for each context type has a DbContextOptions&lt;TContext&gt; parameter rather than a non-generic DbContextOptions parameter.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.OptionsExtensionNotFound(System.Object)">
            <summary>
                Options extension of type '{optionsExtension}' not found.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DuplicatePropertiesOnBase(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The type '{entityType}' cannot have base type '{baseType}' because the properties '{derivedPropertyType}.{derivedProperty}' and '{basePropertyType}.{baseProperty}' are conflicting.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CannotBeNullablePK(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' cannot be marked as nullable/optional because the property is a part of a key. Any property can be marked as non-nullable/required, but only properties of nullable types and which are not part of a key can be marked as nullable/optional.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ForeignKeyCannotBeOptional(System.Object,System.Object)">
            <summary>
                The foreign key {foreignKey} on entity type '{entityType}' cannot be marked as optional because it does not contain any property of a nullable type. Any foreign key can be marked as required, but only foreign keys with at least one property of a nullable type and which is not part of primary key can be marked as optional.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ShadowEntity(System.Object)">
            <summary>
                Entity type '{entityType}' is in shadow-state. A valid model requires all entity types to have corresponding CLR type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CompositePKWithDataAnnotation(System.Object)">
            <summary>
                Entity type '{entityType}' has composite primary key defined with data annotations. To set composite primary key, use fluent API.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DuplicateNavigationsOnBase(System.Object,System.Object,System.Object)">
            <summary>
                The type '{entityType}' cannot have base type '{baseType}' because both types include the navigations: {navigations}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.EntityTypeModelMismatch(System.Object,System.Object)">
            <summary>
                The entity types '{firstEntityType}' and '{secondEntityType}' do not belong to the same model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.HiLoBadBlockSize">
            <summary>
                The block size used for Hi-Lo value generation must be positive. When the Hi-Lo generator is backed by a SQL sequence this means that the sequence increment must be positive.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ValueGenWithConversion(System.Object,System.Object,System.Object)">
            <summary>
                Value generation is not supported for property '{entityType}.{property}' because it has a '{converter}' converter configured. Configure the property to not use value generation using 'ValueGenerated.Never' or 'DatabaseGeneratedOption.None' and specify explict values instead.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IntraHierarchicalAmbiguousTargetEntityType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The entity type related to '{entityType}' cannot be determined because the specified foreign key {foreignKey} references entity type '{principalEntityType}' that it is in the same hierarchy as the entity type that it is declared on '{dependentEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NonClrBaseType(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' cannot inherit from '{baseEntityType}' because '{baseEntityType}' is a shadow state entity type while '{entityType}' is not.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NonShadowBaseType(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' cannot inherit from '{baseEntityType}' because '{entityType}' is a shadow state entity type while '{baseEntityType}' is not.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NotAssignableClrBaseType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' cannot inherit from '{baseEntityType}' because '{clrType}' is not a descendant of '{baseClrType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyWrongEntityClrType(System.Object,System.Object,System.Object)">
            <summary>
                CLR property '{property}' cannot be added to entity type '{entityType}' because it is declared on the CLR type '{clrType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidNavigationWithInverseProperty(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The InversePropertyAttribute on property '{property}' on type '{entityType}' is not valid. The property '{referencedProperty}' is not a valid navigation property on the related type '{referencedEntityType}'. Ensure that the property exists and is a valid reference or collection navigation property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SelfReferencingNavigationWithInverseProperty(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                A relationship cannot be established from property '{property}' on type '{entityType}' to property '{referencedProperty}' on type '{referencedEntityType}'. Check the values in the InversePropertyAttribute to ensure relationship definitions are unique and reference from one navigation property to its corresponding inverse navigation property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DataBindingWithIListSource">
            <summary>
                Data binding directly to a store query is not supported. Instead populate a DbSet with data, for example by calling Load on the DbSet, and then bind to local data to avoid sending a query to the database each time the databound control iterates the data. For WPF bind to 'DbSet.Local.ToObservableCollection()'. For WinForms bind to 'DbSet.Local.ToBindingList()'. For ASP.NET WebForms bind to 'DbSet.ToList()' or use Model Binding.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.KeyAttributeOnDerivedEntity(System.Object,System.Object)">
            <summary>
                The derived type '{derivedType}' cannot have KeyAttribute on property '{property}' since primary key can only be declared on the root type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InversePropertyMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                InversePropertyAttributes on navigation '{navigation}' in entity type '{entityType}' and on navigation '{referencedNavigation}' in entity type '{referencedEntityType}' are not pointing to each other.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CompositeFkOnProperty(System.Object,System.Object)">
            <summary>
                There are multiple properties pointing to navigation '{navigation}' in entity type '{entityType}'. To define composite foreign key using data annotations, use ForeignKeyAttribute on navigation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.FkAttributeOnPropertyNavigationMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The ForeignKeyAttributes on property '{property}' and navigation '{navigation}' in entity type '{entityType}' do not point at each other. The value of ForeignKeyAttribute on property should be navigation name and the value of ForeignKeyAttribute on navigation should be the foreign key property name.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidPropertyListOnNavigation(System.Object,System.Object)">
            <summary>
                The property list specified using ForeignKeyAttribute on navigation '{navigation}' in entity type '{entityType}' is incorrect. The attribute value should be comma-separated list of property names.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidRelationshipUsingDataAnnotations(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Invalid relationship has been specified using InversePropertyAttribute and ForeignKeyAttribute. The navigation '{navigation}' in entity type '{entityType}' and the navigation '{referencedNavigation}' in entity type '{referencedEntityType}' are related by InversePropertyAttribute but the ForeignKeyAttribute specified for both navigations have different values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConflictingPropertyOrNavigation(System.Object,System.Object,System.Object)">
            <summary>
                The property or navigation '{member}' cannot be added to the entity type '{entityType}' because a property or navigation with the same name already exists on entity type '{conflictingEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.EntityTypeNotInRelationshipStrict(System.Object,System.Object,System.Object)">
            <summary>
                The specified entity type '{entityType}' is invalid. It should be either the dependent entity type '{dependentType}' or the principal entity type '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.EntityTypeInUseByDerived(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' cannot be removed because '{derivedEntityType}' is derived from it. All derived entity types must be removed or redefined before the entity type can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationNotAdded(System.Object,System.Object,System.Object)">
            <summary>
                Unable to determine the relationship represented by navigation property '{entityType}.{navigation}' of type '{propertyType}'. Either manually configure the relationship, or ignore this property using the '[NotMapped]' attribute or by using 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyNotAdded(System.Object,System.Object,System.Object)">
            <summary>
                The property '{entityType}.{property}' could not be mapped, because it is of type '{propertyType}' which is not a supported primitive type or a valid entity type. Either explicitly map this property, or ignore it using the '[NotMapped]' attribute or by using 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyNotMapped(System.Object,System.Object,System.Object)">
            <summary>
                The property '{entityType}.{property}' is of type '{propertyType}' which is not supported by current database provider. Either change the property CLR type or ignore the property using the '[NotMapped]' attribute or by using 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InterfacePropertyNotAdded(System.Object,System.Object,System.Object)">
            <summary>
                The property '{entityType}.{navigation}' is of an interface type ('{propertyType}'). If it is a navigation property manually configure the relationship for this property by casting it to a mapped entity type, otherwise ignore the property using the NotMappedAttribute or 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NavigationForWrongForeignKey(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The navigation property '{navigation}' on entity type '{entityType}' cannot be associated with foreign key {targetFk} because it was created for foreign key {actualFk}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.EntityTypeNotFound(System.Object)">
            <summary>
                The entity type '{entityType}' was not found. Ensure that the entity type has been added to the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CustomMetadata(System.Object,System.Object,System.Object)">
            <summary>
                The extension method '{method}' is being used with a custom implementation of '{interfaceType}'. Use of custom implementations of the Entity Framework metadata interfaces is not supported. Consider deriving from '{concreteType}' instead. Please contact the Entity Framework team if you have a compelling case for a custom implementation of the metadata interfaces so that we can consider ways to achieve this.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidMemberInitBinding">
            <summary>
                Unhandled operation: MemberInitExpression binding is not a MemberAssignment
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidKeyValue(System.Object,System.Object)">
            <summary>
                Unable to track an entity of type '{entityType}' because primary key property '{keyProperty}' is null.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidAlternateKeyValue(System.Object,System.Object)">
            <summary>
                Unable to track an entity of type '{entityType}' because alternate key property '{keyProperty}' is null. If the alternate key is not used in a relationship, then consider using a unique index instead. Unique indexes may contain nulls, while alternate keys must not.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogSensitiveDataLoggingEnabled">
            <summary>
                Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ExpressionParameterizationExceptionSensitive(System.Object)">
            <summary>
                An exception was thrown while attempting to evaluate the LINQ query parameter expression '{expression}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.MultipleNavigationsSameFk(System.Object,System.Object)">
            <summary>
                There are multiple navigations in entity type '{entityType}' which are pointing to same set of properties - '{propertyList}' using ForeignKeyAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InconsistentInheritance(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' should derive from '{baseEntityType}' to reflect the hierarchy of the corresponding CLR types.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DependentEntityTypeNotInRelationship(System.Object,System.Object,System.Object)">
            <summary>
                You are configuring a relationship between '{dependentEntityType}' and '{principalEntityType}' but have specified a foreign key on '{entityType}'. The foreign key must be defined on a type that is part of the relationship.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PrincipalEntityTypeNotInRelationship(System.Object,System.Object,System.Object)">
            <summary>
                You are configuring a relationship between '{dependentEntityType}' and '{principalEntityType}' but have specified a foreign key targeting '{entityType}'. The foreign key must be targeting a type that is part of the relationship.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ForeignKeyPropertyInKey(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' cannot be part of a foreign key on '{entityType}' because it has value generation enabled and is contained in the key {key} defined on a base entity type '{baseEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.KeyPropertyInForeignKey(System.Object,System.Object)">
            <summary>
                The property '{property}' cannot be part of a key on '{entityType}' because it has value generation enabled and is contained in a foreign key defined on a derived entity type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NullableKey(System.Object,System.Object)">
            <summary>
                A key on entity type '{entityType}' cannot contain the property '{property}' because it is nullable/optional. All properties on which a key is declared must be marked as non-nullable/required.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConcurrentMethodInvocation">
            <summary>
                A second operation started on this context before a previous operation completed. Any instance members are not guaranteed to be thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.EntityTypesNotInRelationship(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The specified entity types '{invalidDependentType}' and '{invalidPrincipalType}' are invalid. They should be '{dependentType}' and '{principalType}' or entity types in the same hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidSetType(System.Object)">
            <summary>
                Cannot create a DbSet for '{typeName}' because this type is not included in the model for the context.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.AmbiguousOneToOneRelationship(System.Object,System.Object)">
            <summary>
                The child/dependent side could not be determined for the one-to-one relationship between '{dependentToPrincipalNavigationSpecification}' and '{principalToDependentNavigationSpecification}'. To identify the child/dependent side of the relationship, configure the foreign key property. If these navigations should not be part of the same relationship configure them without specifying the inverse. See http://go.microsoft.com/fwlink/?LinkId=724062 for more details.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.AmbiguousForeignKeyPropertyCandidates(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Both relationships between '{firstDependentToPrincipalNavigationSpecification}' and '{firstPrincipalToDependentNavigationSpecification}' and between '{secondDependentToPrincipalNavigationSpecification}' and '{secondPrincipalToDependentNavigationSpecification}' could use {foreignKeyProperties} as the foreign key. To resolve this configure the foreign key properties explicitly on at least one of the relationships.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidIncludeLambdaExpression(System.Object,System.Object)">
            <summary>
                The {methodName} property lambda expression '{includeLambdaExpression}' is invalid. The expression should represent a property access: 't =&gt; t.MyProperty'. To target navigations declared on derived types, specify an explicitly typed lambda parameter of the target type, E.g. '(Derived d) =&gt; d.MyProperty'. For more information on including related data, see http://go.microsoft.com/fwlink/?LinkID=746393.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.AbstractLeafEntityType(System.Object)">
            <summary>
                The corresponding CLR type for entity type '{entityType}' is not instantiable and there is no derived entity type in the model that corresponds to a concrete CLR type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoPropertyType(System.Object,System.Object)">
            <summary>
                The property '{property}' cannot be added to the type '{entityType}' because there was no property type specified and there is no corresponding CLR property or field. To add a shadow state property the property type must be specified.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.TempValue(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' has a temporary value. Either set a permanent value explicitly or ensure that the database is configured to generate values for this property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DatabaseGeneratedNull(System.Object,System.Object)">
            <summary>
                The database generated a null value for non-nullable property '{property}' of entity type '{entityType}'. Ensure value generation configuration in the database matches the configuration in the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoParameterlessConstructor(System.Object)">
            <summary>
                A parameterless constructor was not found on entity type '{entityType}'. In order to create an instance of '{entityType}' EF requires that a parameterless constructor be declared.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogIgnoredInclude">
            <summary>
                The Include operation for navigation '{include}' is unnecessary and was ignored because the navigation is not reachable in the final query results. See https://go.microsoft.com/fwlink/?linkid=850303 for more information.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConflictingRelationshipNavigation(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot create a relationship between '{newPrincipalEntityType}.{newPrincipalNavigation}' and '{newDependentEntityType}.{newDependentNavigation}', because there already is a relationship between '{existingPrincipalEntityType}.{existingPrincipalNavigation}' and '{existingDependentEntityType}.{existingDependentNavigation}'. Navigation properties can only participate in a single relationship.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.WarningAsErrorTemplate(System.Object,System.Object,System.Object)">
            <summary>
                Error generated for warning '{eventName}: {message}'. This exception can be suppressed or logged by passing event ID '{eventId}' to the 'ConfigureWarnings' method in 'DbContext.OnConfiguring' or 'AddDbContext'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ContextDisposed">
            <summary>
                Cannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoProviderConfiguredFailedToResolveService(System.Object)">
            <summary>
                Unable to resolve service for type '{service}'. This is often because no database provider has been configured for this DbContext. A provider can be configured by overriding the DbContext.OnConfiguring method or by using AddDbContext on the application service provider. If AddDbContext is used, then also ensure that your DbContext type accepts a DbContextOptions&lt;TContext&gt; object in its constructor and passes it to the base constructor for DbContext.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ErrorMaterializingProperty(System.Object,System.Object)">
            <summary>
                An exception occurred while reading a database value for property '{entityType}.{property}'. See the inner exception for more information.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ErrorMaterializingPropertyInvalidCast(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                An exception occurred while reading a database value for property '{entityType}.{property}'. The expected type was '{expectedType}' but the actual value was of type '{actualType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ErrorMaterializingPropertyNullReference(System.Object,System.Object,System.Object)">
            <summary>
                An exception occurred while reading a database value for property '{entityType}.{property}'. The expected type was '{expectedType}' but the actual value was null.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ErrorMaterializingValue">
            <summary>
                An exception occurred while reading a database value. See the inner exception for more information.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ErrorMaterializingValueInvalidCast(System.Object,System.Object)">
            <summary>
                An exception occurred while reading a database value. The expected type was '{expectedType}' but the actual value was of type '{actualType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ErrorMaterializingValueNullReference(System.Object)">
            <summary>
                An exception occurred while reading a database value. The expected type was '{expectedType}' but the actual value was null.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InheritedPropertyCannotBeIgnored(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' cannot be ignored on entity type '{entityType}', because it's declared on the base entity type '{baseEntityType}'. To exclude this property from your model, use NotMappedAttribute or Ignore method on the base type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.RetryLimitExceeded(System.Object,System.Object)">
            <summary>
                Maximum number of retries ({retryLimit}) exceeded while executing database operations with '{strategy}'. See inner exception for the most recent failure.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ExecutionStrategyExistingTransaction(System.Object,System.Object)">
            <summary>
                The configured execution strategy '{strategy}' does not support user initiated transactions. Use the execution strategy returned by '{getExecutionStrategyMethod}' to execute all the operations in the transaction as a retriable unit.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyCalledOnNavigation(System.Object,System.Object)">
            <summary>
                '{property}' cannot be used as a property on entity type '{entityType}' because it is configured as a navigation.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogRowLimitingOperationWithoutOrderBy">
            <summary>
                Query: '{queryModel}' uses a row limiting operation (Skip/Take) without OrderBy which may lead to unpredictable results.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyInUseForeignKey(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' cannot be removed from entity type '{entityType}' because it is being used in the foreign key {foreignKey} on '{foreignKeyType}'. All containing foreign keys must be removed or redefined before the property can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyInUseIndex(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' cannot be removed from entity type '{entityType}' because it is being used in the index {index} on '{indexType}'. All containing indexes must be removed or redefined before the property can be removed.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogFirstWithoutOrderByAndFilter">
            <summary>
                Query: '{queryModel}' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidPoolSize">
            <summary>
                The specified poolSize must be greater than 0.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PoolingContextCtorError(System.Object)">
            <summary>
                The DbContext of type '{contextType}' cannot be pooled because it does not have a single public constructor accepting a single parameter of type DbContextOptions.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PoolingOptionsModified">
            <summary>
                OnConfiguring cannot be used to modify DbContextOptions when DbContext pooling is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ForeignKeySelfReferencingDependentEntityType(System.Object)">
            <summary>
                The foreign keys on entity type '{dependentType}' cannot target the same entity type because it is a weak entity type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.EntityTypeInUseByForeignKey(System.Object,System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' cannot be removed because it is referencing '{referencedEntityType}' by foreign key {foreignKey}. All foreign keys must be removed before the entity type can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ClashingWeakEntityType(System.Object)">
            <summary>
                The entity type '{entityType}' cannot be added to the model because a weak entity type with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ClashingNonWeakEntityType(System.Object)">
            <summary>
                The weak entity type '{entityType}' cannot be added to the model because an entity type with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.WeakBaseType(System.Object,System.Object)">
            <summary>
                The type '{entityType}' cannot have weak entity type '{baseType}' as the base type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.WeakDerivedType(System.Object)">
            <summary>
                The weak entity type '{entityType}' cannot have a base type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DuplicatePropertyInList(System.Object,System.Object)">
            <summary>
                The property list {propertyList} cannot be used, because it contains a duplicate - '{property}'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConventionsInfiniteLoop">
            <summary>
                The convention invocations have reached the recursion limit. This is likely an issue in EF Core, please report it.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NoDefiningNavigation(System.Object,System.Object,System.Object)">
            <summary>
                The navigation '{navigation}' used to define the entity type '{entityType}' is not present on '{definingEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.MultipleOwnerships(System.Object)">
            <summary>
                The entity type '{entityType}' is the target of multiple ownership relationships.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.NonDefiningOwnership(System.Object,System.Object,System.Object)">
            <summary>
                The ownership by '{ownershipNavigation}' should use defining navigation '{definingNavigation}' for the owned type '{entityType}'
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InconsistentOwnership(System.Object,System.Object)">
            <summary>
                The entity type '{ownedEntityType}' is configured as owned, but the entity type '{nonOwnedEntityType}' is not. All entity types sharing a CLR type must be configured as owned.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InverseToOwnedType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The navigation '{principalEntityType}.{navigation}' is not supported because it is pointing to an owned entity type '{ownedType}'. Only the ownership navigation from the entity type '{ownerType}' can point to the owned entity type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PrincipalOwnedType(System.Object,System.Object,System.Object)">
            <summary>
                The relationship from '{referencingEntityTypeOrNavigation}' to '{referencedEntityTypeOrNavigation}' is not supported because the owned entity type '{ownedType}' cannot be on the principal side of a non-ownership relationship.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.AmbiguousDependentEntity(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' has a defining navigation and the supplied entity is currently referenced from several owner entities. To access the entry for a particular reference call '{targetEntryCall}' on the owner entry.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.UntrackedDependentEntity(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' has a defining navigation and the supplied entity is currently not being tracked. To start tracking this entity call '{targetEntryCall}' on the owner entry.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.BadFilterExpression(System.Object,System.Object,System.Object)">
            <summary>
                The filter expression '{filter}' specified for entity type '{entityType}' is invalid. The expression must accept a single parameter of type '{clrType}', return bool, and may not contain references to navigation properties.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.BadFilterDerivedType(System.Object,System.Object)">
            <summary>
                The filter expression '{filter}' cannot be specified for entity type '{entityType}'. A filter may only be applied to the root entity type in a hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConverterPropertyMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Converter for model type '{converterType}' cannot be used for '{entityType}.{propertyName}' because its type is '{propertyType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ComparerPropertyMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Comparer for type '{type}' cannot be used for '{entityType}.{propertyName}' because its type is '{propertyType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IncludeNotSpecifiedDirectlyOnEntityType(System.Object,System.Object)">
            <summary>
                The Include operation '{include}' is not supported. '{invalidNavigation}' must be a navigation property defined on an entity type.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogPossibleUnintendedCollectionNavigationNullComparison">
            <summary>
                Collection navigations are only considered null if their parent entity is null. Use '.Any()' to check whether collection navigation '{navigationPath}' is empty.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogPossibleUnintendedReferenceComparison">
            <summary>
                Possible unintended reference comparison between '{left}' and '{right}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogDuplicateDependentEntityTypeInstance">
            <summary>
                The same entity is being tracked as different weak entity types '{dependent1}' and '{dependent2}'. If a property value changes it will result in two store changes, which might not be the desired outcome.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IdentityConflictOwned(System.Object,System.Object)">
            <summary>
                The instance of entity type '{entityType}' cannot be tracked because another instance with the same key value for {keyProperties} is already being tracked. When replacing owned entities modify the properties without changing the instance or detach the previous owned entity entry first. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IdentityConflictOwnedSensitive(System.Object,System.Object)">
            <summary>
                The instance of entity type '{entityType}' cannot be tracked because another instance with the key value '{keyValue}' is already being tracked. When replacing owned entities modify the properties without changing the instance or detach the previous owned entity entry first.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConvertersCannotBeComposed(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot compose converter from '{typeOneIn}' to '{typeOneOut}' with converter from '{typeTwoIn}' to '{typeTwoOut}' because the output type of the first converter is different from the input type of the second converter.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConverterCloneNotImplemented(System.Object)">
            <summary>
                The '{mapping}' does not support value conversions. Support for value conversions typically requires changes in the database provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConverterBadType(System.Object,System.Object,System.Object)">
            <summary>
                The value converter '{converter}' cannot be used with type '{type}'. This converter can only be used with {allowed}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SeedDatumDuplicate(System.Object,System.Object)">
            <summary>
                The seed entity for entity type '{entityType}' cannot be added because another seed entity with the same key value for {keyProperties} has already been added. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SeedDatumDuplicateSensitive(System.Object,System.Object)">
            <summary>
                The seed entity for entity type '{entityType}' cannot be added because another seed entity with the key value '{keyValue}' has already been added.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SeedDatumIncompatibleValue(System.Object,System.Object,System.Object)">
            <summary>
                The seed entity for entity type '{entityType}' cannot be added because the value provided for the property '{property}' is not of the type '{type}'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the involved property values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SeedDatumIncompatibleValueSensitive(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The seed entity for entity type '{entityType}' cannot be added because the value '{value}' provided for the property '{property}' is not of the type '{type}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SeedDatumMissingValue(System.Object,System.Object)">
            <summary>
                The seed entity for entity type '{entityType}' cannot be added because there was no value provided for the required property '{property}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SeedDatumNavigation(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The seed entity for entity type '{entityType}' cannot be added because it has the navigation '{navigation}' set. To seed relationships you need to add the related entity seed to '{relatedEntityType}' and specify the foreign key values {foreignKeyProperties}. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the involved property values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SeedDatumNavigationSensitive(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The seed entity for entity type '{entityType}' with the key value '{keyValue}' cannot be added because it has the navigation '{navigation}' set. To seed relationships you need to add the related entity seed to '{relatedEntityType}' and specify the foreign key values {foreignKeyProperties}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.SeedDatumDerivedType(System.Object,System.Object)">
            <summary>
                The seed entity for entity type '{entityType}' cannot be added because the value provided is of a derived type '{derivedType}'. Add the derived seed entities to the corresponding entity type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConstructorNotFound(System.Object,System.Object)">
            <summary>
                No suitable constructor found for entity type '{entityType}'. The following parameters could not be bound to properties of the entity: '{parameters}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ConstructorConflict(System.Object,System.Object)">
            <summary>
                Two constructors were found with the same number of parameters that could both be used by Entity Framework. The constructor to use must be configured explicitly. The two constructors are '{firstConstructor}' and '{secondConstructor}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ClashingNonOwnedEntityType(System.Object)">
            <summary>
                The type '{entityType}' cannot be marked as owned because a non-owned entity type with the same name already exists.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.TransactionsNotSupported">
            <summary>
                Current provider doesn't support System.Transaction.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogShadowPropertyCreated">
            <summary>
                The property '{property}' on entity type '{entityType}' was created in shadow state because there are no eligible CLR members with a matching name.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogExecutionStrategyRetrying">
            <summary>
                A transient exception has been encountered during execution and the operation will be retried after {delay}ms.{newline}{error}
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogNavigationLazyLoading">
            <summary>
                Navigation property '{navigation}' of entity type '{entityType}' is being lazy-loaded.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogLazyLoadOnDisposedContext">
            <summary>
                An attempt was made to lazy-load navigation property '{navigation}' on entity type '{entityType}' after the associated DbContext was disposed.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogDetachedLazyLoading">
            <summary>
                An attempt was made to lazy-load navigation property '{navigation}' on detached entity of type '{entityType}'. Lazy-loading is not supported for detached entities or entities that are loaded with 'AsNoTracking()'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidSetTypeQuery(System.Object)">
            <summary>
                Cannot create a DbSet for '{typeName}' because it is a query type. Use the DbContext.Query method to create a DbQuery instead.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidSetTypeEntity(System.Object)">
            <summary>
                Cannot create a DbQuery for '{typeName}' because it is not a query type. Use the DbContext.Set method to create a DbSet instead.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.QueryTypeCannotBePrincipal(System.Object)">
            <summary>
                Unable to create a foreign key with the query type '{queryType}' as the principal type. Only entity types are allowed as foreign key principal types.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.QueryTypeNotValid(System.Object)">
            <summary>
                Unable to track an instance of type '{type}' because it is a query type. Only entity types may be tracked.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ErrorMixedQueryEntityTypeInheritance(System.Object,System.Object)">
            <summary>
                Cannot set '{baseType}' as the base type of '{derivedType}'. Inheritance hierarchies cannot contain a mix of entity types and query types.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CannotAccessEntityAsQuery(System.Object)">
            <summary>
                Cannot access type '{type}' as a query type because it has already been declared as an entity type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.CannotAccessQueryAsEntity(System.Object)">
            <summary>
                Cannot access type '{type}' as an entity type because it has already been declared as a query type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ErrorNavCannotTargetQueryType(System.Object)">
            <summary>
                Cannot create a navigation targeting type '{type}' because it is a query type. Only entity types can be used as navigation target types.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogRedundantIndexRemoved">
            <summary>
                The index {redundantIndex} was not created as the properties are already covered by the index {otherIndex}.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogIncompatibleMatchingForeignKeyProperties">
            <summary>
                The foreign key properties haven't been configured by convention because the best match {foreignKey} are incompatible with the current principal key {principalKey}. This message can be disregarded if explicit configuration has been specified.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogRequiredAttributeOnDependent">
            <summary>
                The navigation property '{navigation}' has a RequiredAttribute causing the entity type '{entityType}' to be configured as the dependent side in the corresponding relationship.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogRequiredAttributeOnBothNavigations">
            <summary>
                The RequiredAttribute on '{principalEntityType}.{principalNavigation}' was ignored because there is also a RequiredAttribute on '{dependentEntityType}.{dependentNavigation}'. RequiredAttribute should only be specified on the dependent side of the relationship.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogForeignKeyAttributesOnBothNavigations">
            <summary>
                Navigations '{dependentEntityType}.{dependentNavigation}' and '{principalEntityType}.{principalNavigation}' were separated into two relationships as ForeignKeyAttribute was specified on navigations on both sides.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogForeignKeyAttributesOnBothProperties">
            <summary>
                Navigations '{dependentEntityType}.{dependentNavigation}' and '{principalEntityType}.{principalNavigation}' were separated into two relationships as ForeignKeyAttribute was specified on properties '{dependentProperty}' and '{principalProperty}' on both sides.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogConflictingForeignKeyAttributesOnNavigationAndProperty">
            <summary>
                The relationship was separated into two relationships because ForeignKeyAttribute specified on the navigation '{navigationEntityType}.{navigation}' doesn't match the ForeignKeyAttribute specified on the property '{propertyEntityType}.{property}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogMultipleInversePropertiesSameTarget">
            <summary>
                There are multiple navigations ({navigations}) configured with InversePropertyAttribute that point to the same inverse navigation '{inverseNavigation}'.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogConflictingShadowForeignKeys">
            <summary>
                There are multiple relationships between '{dependentEntityType}' and '{principalEntityType}' without configured foreign key properties causing EF to create shadow properties on '{dependentType}' with names dependent on the discovery order.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogMultipleNavigationProperties">
            <summary>
                No relationship from '{firstEntityType}' to '{secondEntityType}' has been configured by convention because there are multiple properties on one entity type {navigationProperties} that could be matched with the properties on the other entity type {inverseNavigations}. This message can be disregarded if explicit configuration has been specified.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogMultiplePrimaryKeyCandidates">
            <summary>
                Primary key hasn't been configured by convention as both properties '{firstProperty}' and '{secondProperty}' could be used as the primary key for the entity type '{entityType}'. This message can be disregarded if explicit configuration has been specified.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.OwnedDerivedType(System.Object)">
            <summary>
                The owned entity type '{entityType}' cannot have a base type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.InvalidSetTypeWeak(System.Object)">
            <summary>
                Cannot create a DbSet for '{typeName}' because it is mapped to multiple entity types and should they should be accessed through the defining entities.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogNonDefiningInverseNavigation">
            <summary>
                The navigation '{targetEntityType}.{inverseNavigation}' cannot be used as the inverse of '{weakEntityType}.{navigation}' because it's not the defining navigation '{definingNavigation}'
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Internal.CoreStrings.LogNonOwnershipInverseNavigation">
            <summary>
                The navigation '{targetEntityType}.{inverseNavigation}' cannot be used as the inverse of '{ownedEntityType}.{navigation}' because it's not the ownership navigation '{ownershipNavigation}'
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.PropertyConceptualNullSensitive(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}'  is marked as null on entity '{entityType}' with the key value '{keyValue}', but this cannot be saved because the property is marked as required.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.RelationshipConceptualNullSensitive(System.Object,System.Object,System.Object)">
            <summary>
                The association between entities '{firstType}' and '{secondType}' with the key value '{secondKeyValue}' has been severed but the relationship is either marked as 'Required' or is implicitly required because the foreign key is not nullable. If the dependent/child entity should be deleted when a required relationship is severed, then setup the relationship to use cascade deletes.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IncompatiblePrincipalEntry(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The foreign key {foreignKey} set on '{dependentEntityType}' matches an entity of type '{foundPrincipalEntityType}', however the principal entity type should be assignable to '{principalEntityType}'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IncompatiblePrincipalEntrySensitive(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The foreign key '{foreignKeyValues}' set on '{dependentEntityType}' with the key value '{keyValue}' matches an entity of type '{foundPrincipalEntityType}', however the principal entity type should be assignable to '{principalEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.IdentifyingRelationshipCycle(System.Object)">
            <summary>
                The entity type '{entityType}' is part of a relationship cycle involving its primary key.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.AmbiguousServiceProperty(System.Object,System.Object,System.Object)">
            <summary>
                The service property '{property}' of type '{serviceType}' cannot be added to the entity type '{entityType}' because there is another property of the same type. Ignore one of the properties using the NotMappedAttribute or 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.CoreStrings.ErrorInvalidQueryable">
            <summary>
                Cannot use multiple DbContext instances within a single query execution. Ensure the query uses a single context instance.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.DerivedQueryTypeDefiningQuery(System.Object,System.Object)">
            <summary>
                The query type '{queryType}' cannot have a defining query bacause it is derived from '{baseType}'. Only base query types can have a defining query.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.CoreStrings.OwnerlessOwnedType(System.Object)">
            <summary>
                The owned entity type '{ownedType}' requires to be referenced from another entity type via a navigation. Add a navigation to an entity type that points at '{ownedType}'.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.DictionaryExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DictionaryExtensions.GetOrAddNew``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.DictionaryExtensions.Find``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.KeyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.KeyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                Gets all foreign keys that target a given primary or alternate key.
            </summary>
            <param name="key"> The key to find the foreign keys for. </param>
            <returns> The foreign keys that reference the given key. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ModelExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)">
            <summary>
                Gets the entity that maps the given entity class. Returns null if no entity type with the given CLR type is found
                or the entity type has a defining navigation.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="type"> The type to find the corresponding entity type for. </param>
            <returns> The entity type, or null if none if found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindRuntimeEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)">
            <summary>
                Gets the entity that maps the given entity class, where the class may be a proxy derived from the
                actual entity type. Returns null if no entity type with the given CLR type is found
                or the entity type has a defining navigation.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="type"> The type to find the corresponding entity type for. </param>
            <returns> The entity type, or null if none if found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the entity type for the given type, defining navigation name
                and the defining entity type. Returns null if no matching entity type is found.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="type"> The type of the entity type to find. </param>
            <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
            <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
            <returns> The entity type, or null if none are found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)">
            <summary>
                Gets the entity types for the given type.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="type"> The type of the entity type to find. </param>
            <returns> The entity types found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)">
            <summary>
                Gets the entity types for the given name.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="name"> The name of the entity type to find. </param>
            <returns> The entity types found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)">
            <summary>
                Gets a value indicating whether the corresponding entity type has a defining navigation.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="type"> The type used to find an entity type a defining navigation. </param>
            <returns> true if the model contains a corresponding entity type with a defining navigation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)">
            <summary>
                Gets a value indicating whether the corresponding entity type has a defining navigation.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="name"> The name used to find an entity type with a defining navigation. </param>
            <returns> true if the model contains a corresponding entity type with a defining navigation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Gets the default change tracking strategy being used for entities in the model. This strategy indicates how the
                context detects changes to properties for an instance of an entity type.
            </summary>
            <param name="model"> The model to get the default change tracking strategy for. </param>
            <returns> The change tracking strategy. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> being used for properties of entity types in this model.
                    Null indicates that the default property access mode is being used.
                </para>
                <para>
                    Note that individual entity types can override this access mode, and individual properties of
                    entity types can override the access mode set on the entity type. The value returned here will
                    be used for any property for which no override has been specified.
                </para>
            </summary>
            <param name="model"> The model to get the access mode for. </param>
            <returns> The access mode being used, or null if the default access mode is being used. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions.GetOrAddAnnotation(Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable,System.String,System.String)">
            <summary>
                Gets the existing annotation with a given key, or adds a new annotation if one does not exist.
            </summary>
            <param name="annotatable"> The object to find or add the annotation to. </param>
            <param name="annotationName"> The key of the annotation to be found or added. </param>
            <param name="value"> The value to be stored in the annotation if a new one is created. </param>
            <returns> The found or added annotation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions.AddAnnotations(Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                Adds annotations to an object.
            </summary>
            <param name="annotatable"> The object to add the annotations to. </param>
            <param name="annotations"> The annotations to be added. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Gets all types in the model that derive from a given entity type.
            </summary>
            <param name="entityType"> The base type to find types that derive from. </param>
            <returns> The derived types. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Gets the root base type for a given entity type.
            </summary>
            <param name="entityType"> The type to find the root of. </param>
            <returns>
                The root base type. If the given entity type is not a derived type, then the same entity type is returned.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)">
            <summary>
                Sets the primary key for this entity.
            </summary>
            <param name="entityType"> The entity type to set the key on. </param>
            <param name="property"> The primary key property. </param>
            <returns> The newly created key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)">
            <summary>
                Gets the existing primary key of an entity, or sets it if one is not defined.
            </summary>
            <param name="entityType"> The entity type to get or set the key on. </param>
            <param name="property"> The property to set as the primary key if one is not already defined. </param>
            <returns> The existing or newly created key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})">
            <summary>
                Gets the existing primary key of an entity, or sets it if one is not defined.
            </summary>
            <param name="entityType"> The entity type to get or set the key on. </param>
            <param name="properties"> The properties to set as the primary key if one is not already defined. </param>
            <returns> The existing or newly created key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the primary or alternate key that is defined on the given property. Returns null if no key is defined
                for the given property.
            </summary>
            <param name="entityType"> The entity type to find the key on. </param>
            <param name="property"> The property that the key is defined on. </param>
            <returns> The key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)">
            <summary>
                Adds a new alternate key to this entity type.
            </summary>
            <param name="entityType"> The entity type to add the alternate key to. </param>
            <param name="property"> The property to use as an alternate key. </param>
            <returns> The newly created key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)">
            <summary>
                Gets the existing alternate key defined on a property, or creates a new one if one is not
                already defined.
            </summary>
            <param name="entityType"> The entity type to get or create the alternate key on. </param>
            <param name="property"> The property that is used as the alternate key. </param>
            <returns> The existing or newly created alternate key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})">
            <summary>
                Gets the existing alternate key defined on a set of properties, or creates a new one if one is not
                already defined.
            </summary>
            <param name="entityType"> The entity type to get or create the alternate key on. </param>
            <param name="properties"> The properties that are used as the alternate key. </param>
            <returns> The existing or newly created alternate key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified
                property are returned. Composite foreign keys that include the specified property are not returned.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="property"> The property to find the foreign keys on. </param>
            <returns> The foreign keys. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                Gets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified
                set of properties are returned.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="properties"> The properties to find the foreign keys on. </param>
            <returns> The foreign keys. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="property"> The property that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The foreign key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                is the principal).
            </summary>
            <param name="entityType"> The entity type to find the foreign keys for. </param>
            <returns> The foreign keys that reference the given entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Adds a new relationship to this entity.
            </summary>
            <param name="entityType"> The entity type to add the foreign key to. </param>
            <param name="property"> The property that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The newly created foreign key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Gets an existing relationship, or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the foreign key to. </param>
            <param name="property"> The property that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The existing or newly created foreign key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Gets an existing relationship, or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the foreign key to. </param>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The existing or newly created foreign key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)">
            <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
            <param name="entityType"> The entity type to find the navigation property on. </param>
            <param name="propertyInfo"> The navigation property on the entity class. </param>
            <returns> The navigation property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
            <param name="entityType"> The entity type to find the navigation property on. </param>
            <param name="name"> The name of the navigation property on the entity class. </param>
            <returns> The navigation property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Gets all navigation properties on the given entity type.
            </summary>
            <param name="entityType"> The entity type to get navigation properties for. </param>
            <returns> All navigation properties on the given entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)">
            <summary>
                <para>
                    Gets a property on the given entity type. Returns null if no property is found.
                </para>
                <para>
                    This API only finds scalar properties and does not find navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" /> to find a navigation property.
                </para>
            </summary>
            <param name="entityType"> The entity type to find the property on. </param>
            <param name="propertyInfo"> The property on the entity class. </param>
            <returns> The property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)">
            <summary>
                Adds a property to this entity.
            </summary>
            <param name="entityType"> The entity type to add the property to. </param>
            <param name="propertyInfo"> The corresponding property in the entity class. </param>
            <returns> The newly created property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)">
            <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the property to. </param>
            <param name="name"> The name of the property. </param>
            <param name="propertyType"> The type of value the property will hold. </param>
            <returns> The existing or newly created property. </returns>
            <remarks> The returned property might not have the specified type. </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)">
            <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the property to. </param>
            <param name="propertyInfo"> The corresponding property in the entity class. </param>
            <returns> The existing or newly created property. </returns>
            <remarks> The returned property might not have the specified type. </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the index defined on the given property. Returns null if no index is defined.
            </summary>
            <param name="entityType"> The entity type to find the index on. </param>
            <param name="property"> The property to find the index on. </param>
            <returns> The index, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)">
            <summary>
                Adds an index to this entity.
            </summary>
            <param name="entityType"> The entity type to add the index to. </param>
            <param name="property"> The property to be indexed. </param>
            <returns> The newly created index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)">
            <summary>
                Gets the index defined on the given property or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the index to. </param>
            <param name="property"> The property to be indexed. </param>
            <returns> The existing or newly created index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})">
            <summary>
                Gets the index defined on the given property or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the index to. </param>
            <param name="properties"> The properties to be indexed. </param>
            <returns> The existing or newly created index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties and navigations of this entity type.
                </para>
                <para>
                    Note that individual properties and navigations can override this access mode. The value set here will
                    be used for any property or navigation for which no override has been specified.
                </para>
            </summary>
            <param name="entityType"> The entity type for which to set the access mode. </param>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetNavigationAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for navigations of this entity type.
                </para>
                <para>
                    Note that individual navigations can override this access mode. The value set here will
                    be used for any navigation for which no override has been specified.
                </para>
            </summary>
            <param name="entityType"> The entity type for which to set the access mode. </param>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)">
            <summary>
                Sets the change tracking strategy to use for this entity type. This strategy indicates how the
                context detects changes to properties for an instance of the entity type.
            </summary>
            <param name="entityType"> The entity type to set the change tracking strategy for. </param>
            <param name="changeTrackingStrategy"> The strategy to use. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MutableKeyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableKey" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableKeyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableKey)">
            <summary>
                Gets all foreign keys that target a given primary or alternate key.
            </summary>
            <param name="key"> The key to find the foreign keys for. </param>
            <returns> The foreign keys that reference the given key. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MutableModelExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)">
            <summary>
                Gets the entity that maps the given entity class. Returns null if no entity type with the given name is found.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="type"> The type to find the corresponding entity type for. </param>
            <returns> The entity type, or null if none if found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Gets the entity type for the given name, defining navigation name
                and the defining entity type. Returns null if no matching entity type is found.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="type"> The type of the entity type to find. </param>
            <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
            <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
            <returns> The entity type, or null if none are found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Gets the entity type with the given name or adds a new entity type if none is found.
            </summary>
            <param name="model"> The model to find or add the entity type to. </param>
            <param name="name"> The name of the entity type. </param>
            <returns> The existing or newly created entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)">
            <summary>
                Gets the entity type with the given CLR class or adds a new entity type if none is found.
            </summary>
            <param name="model"> The model to find or add the entity type to. </param>
            <param name="type"> The CLR class of the entity type. </param>
            <returns> The existing or newly created entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)">
            <summary>
                Removes an entity type from the model.
            </summary>
            <param name="model"> The model to remove the entity type from. </param>
            <param name="type"> The entity type to be removed. </param>
            <returns> The entity type that was removed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Removes an entity type from the model.
            </summary>
            <param name="model"> The model to remove the entity type from. </param>
            <param name="entityType"> The entity type to be removed. </param>
            <returns> The entity type that was removed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Removes an entity type with a defining navigation from the model.
            </summary>
            <param name="model"> The model to remove the entity type from. </param>
            <param name="type"> The CLR class that is used to represent instances of this entity type. </param>
            <param name="definingNavigationName"> The defining navigation. </param>
            <param name="definingEntityType"> The defining entity type. </param>
            <returns> The entity type that was removed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of all entity types
                    in this model.
                </para>
                <para>
                    Note that individual entity types can override this access mode, and individual properties of
                    entity types can override the access mode set on the entity type. The value set here will
                    be used for any property for which no override has been specified.
                </para>
            </summary>
            <param name="model"> The model to set the access mode for. </param>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)">
            <summary>
                Sets the default change tracking strategy to use for entities in the model. This strategy indicates how the
                context detects changes to properties for an instance of an entity type.
            </summary>
            <param name="model"> The model to set the default change tracking strategy for. </param>
            <param name="changeTrackingStrategy"> The strategy to use. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MutableNavigationExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableNavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation)">
            <summary>
                Gets the navigation property on the other end of the relationship. Returns null if
                there is no navigation property defined on the other end of the relationship.
            </summary>
            <param name="navigation"> The navigation property to find the inverse of. </param>
            <returns>
                The inverse navigation, or null if none is defined.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutableNavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation)">
            <summary>
                Gets the entity type that a given navigation property will hold an instance of
                (or hold instances of if it is a collection navigation).
            </summary>
            <param name="navigation"> The navigation property to find the target entity type of. </param>
            <returns> The target entity type. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetField(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.String)">
            <summary>
                <para>
                    Sets the backing field to use for this property.
                </para>
                <para>
                    Backing fields are normally found by convention as described
                    here: http://go.microsoft.com/fwlink/?LinkId=723277.
                    This method is useful for setting backing fields explicitly in cases where the
                    correct field is not found by convention.
                </para>
                <para>
                    By default, the backing field, if one is found or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. This can be changed by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />.
                </para>
            </summary>
            <param name="property"> The property for which the backing field should be set. </param>
            <param name="fieldName"> The name of the field to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.
            </summary>
            <param name="property"> The property for which to set the access mode. </param>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MutablePropertyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})">
            <summary>
                <para>
                    Sets the factory to use for generating values for this property, or null to clear any previously set factory.
                </para>
                <para>
                    Setting null does not disable value generation for this property, it just clears any generator explicitly
                    configured for this property. The database provider may still have a value generator for the property type.
                </para>
            </summary>
            <param name="property"> The property to set the value generator for. </param>
            <param name="valueGeneratorFactory">
                A factory that will be used to create the value generator, or null to
                clear any previously set factory.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})">
            <summary>
                Sets the maximum length of data that is allowed in this property. For example, if the property is a <see cref="T:System.String" /> '
                then this is the maximum number of characters.
            </summary>
            <param name="property"> The property to set the maximum length of. </param>
            <param name="maxLength"> The maximum length of data that is allowed in this property. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether or not this property can persist Unicode characters.
            </summary>
            <param name="property"> The property to set the value for. </param>
            <param name="unicode"> True if the property accepts Unicode characters, false if it does not, null to clear the setting. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)">
            <summary>
                Gets all foreign keys that use this property (including composite foreign keys in which this property
                is included).
            </summary>
            <param name="property"> The property to get foreign keys for. </param>
            <returns>
                The foreign keys that use this property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)">
            <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
            <param name="property"> The property to get primary key for. </param>
            <returns>
                The primary that use this property, or null if it is not part of the primary key.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)">
            <summary>
                Gets all primary or alternate keys that use this property (including composite keys in which this property
                is included).
            </summary>
            <param name="property"> The property to get primary and alternate keys for. </param>
            <returns>
                The primary and alternate keys that use this property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetProviderClrType(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Type)">
            <summary>
                Sets the type that the property value will be converted to before being sent to the database provider.
            </summary>
            <param name="property"> The property. </param>
            <param name="providerClrType"> The type to use, or <c>null</c> to remove any previously set type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueConverter(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter"/> for this property.
            </summary>
            <param name="property"> The property. </param>
            <param name="converter"> The converter, or <c>null</c> to remove any previously set converter. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueComparer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)">
            <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer"/> for this property.
            </summary>
            <param name="property"> The property. </param>
            <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetKeyValueComparer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)">
            <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer"/> for this property when performing key comparisons..
            </summary>
            <param name="property"> The property. </param>
            <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.NavigationExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.NavigationExtensions.IsDependentToPrincipal(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                Gets a value indicating whether the given navigation property is the navigation property on the dependent entity
                type that points to the principal entity.
            </summary>
            <param name="navigation"> The navigation property to check. </param>
            <returns>
                True if the given navigation property is the navigation property on the dependent entity
                type that points to the principal entity, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.NavigationExtensions.IsCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                Gets a value indicating whether the given navigation property is a collection property.
            </summary>
            <param name="navigation"> The navigation property to check. </param>
            <returns>
                True if this is a collection property, false if it is a reference property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.NavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                Gets the navigation property on the other end of the relationship. Returns null if
                there is no navigation property defined on the other end of the relationship.
            </summary>
            <param name="navigation"> The navigation property to find the inverse of. </param>
            <returns>
                The inverse navigation, or null if none is defined.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.NavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                Gets the entity type that a given navigation property will hold an instance of
                (or hold instances of if it is a collection navigation).
            </summary>
            <param name="navigation"> The navigation property to find the target entity type of. </param>
            <returns> The target entity type. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ObservableCollectionExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
                Returns an <see cref="T:System.ComponentModel.BindingList`1" /> implementation that stays in sync with the given
                <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
            </summary>
            <typeparam name="T"> The element type. </typeparam>
            <param name="source"> The collection that the binding list will stay in sync with. </param>
            <returns> The binding list. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.PropertyBaseExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetFieldName(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                Gets the name of the backing field for this property, or null if the backing field
                is not known.
            </summary>
            <param name="propertyBase"> The property for which the backing field will be returned. </param>
            <returns> The name of the backing field, or null. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> being used for this property.
                    Null indicates that the default property access mode is being used.
                </para>
            </summary>
            <param name="propertyBase"> The property for which to get the access mode. </param>
            <returns> The access mode being used, or null if the default access mode is being used. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.PropertyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the factory that has been set to generate values for this property, if any.
            </summary>
            <param name="property"> The property to get the value generator factory for. </param>
            <returns> The factory, or null if no factory has been set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the maximum length of data that is allowed in this property. For example, if the property is a <see cref="T:System.String" /> '
                then this is the maximum number of characters.
            </summary>
            <param name="property"> The property to get the maximum length of. </param>
            <returns> The maximum length, or null if none if defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets a value indicating whether or not the property can persist Unicode characters.
            </summary>
            <param name="property"> The property to get the Unicode setting for. </param>
            <returns> The Unicode setting, or null if none if defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets a value indicating whether this property is used as a foreign key (or part of a composite foreign key).
            </summary>
            <param name="property"> The property to check. </param>
            <returns>
                True if the property is used as a foreign key, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets a value indicating whether this property is used as an index (or part of a composite index).
            </summary>
            <param name="property"> The property to check. </param>
            <returns>
                True if the property is used as an index, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets a value indicating whether this property is used as the primary key (or part of a composite primary key).
            </summary>
            <param name="property"> The property to check. </param>
            <returns>
                True if the property is used as the primary key, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets a value indicating whether this property is used as part of a primary or alternate key
                (or part of a composite primary or alternate key).
            </summary>
            <param name="property"> The property to check. </param>
            <returns>
                True if the property is part of a key, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets all foreign keys that use this property (including composite foreign keys in which this property
                is included).
            </summary>
            <param name="property"> The property to get foreign keys for. </param>
            <returns>
                The foreign keys that use this property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingIndexes(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets all indexes that use this property (including composite indexes in which this property
                is included).
            </summary>
            <param name="property"> The property to get indexes for. </param>
            <returns>
                The indexes that use this property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
            <param name="property"> The property to get primary key for. </param>
            <returns>
                The primary that use this property, or null if it is not part of the primary key.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets all primary or alternate keys that use this property (including composite keys in which this property
                is included).
            </summary>
            <param name="property"> The property to get primary and alternate keys for. </param>
            <returns>
                The primary and alternate keys that use this property.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetProviderClrType(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the type that the property value will be converted to before being sent to the database provider.
            </summary>
            <param name="property"> The property. </param>
            <returns> The provider type, or <c>null</c> if none has been set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueConverter(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the custom <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter"/> set for this property.
            </summary>
            <param name="property"> The property. </param>
            <returns> The converter, or <c>null</c> if none has been set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueComparer(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer"/> for this property, or null if none is set.
            </summary>
            <param name="property"> The property. </param>
            <returns> The comparer, or <c>null</c> if none has been set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetKeyValueComparer(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer"/> for this property, or null if none is set.
            </summary>
            <param name="property"> The property. </param>
            <returns> The comparer, or <c>null</c> if none has been set. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.TypeBaseExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.TypeBaseExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)">
            <summary>
                <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> being used for properties and navigations of this type.
                    Null indicates that the default property access mode is being used.
                </para>
                <para>
                    Note that individual properties and navigations can override this access mode. The value returned here will
                    be used for any property or navigation for which no override has been specified.
                </para>
            </summary>
            <param name="typeBase"> The type for which to get the access mode. </param>
            <returns> The access mode being used, or null if the default access mode is being used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.TypeBaseExtensions.GetNavigationAccessMode(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)">
            <summary>
                <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> being used for navigations of this type.
                    Null indicates that the default property access mode is being used.
                </para>
                <para>
                    Note that individual navigations can override this access mode. The value returned here will
                    be used for any navigation for which no override has been specified.
                </para>
            </summary>
            <param name="typeBase"> The type for which to get the access mode. </param>
            <returns> The access mode being used, or null if the default access mode is being used. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1">
            <summary>
                Allows configuration for an entity type to be factored into a separate class,
                rather than in-line in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
                Implement this interface, applying configuration for the entity in the
                <see cref="M:Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})" /> method,
                and then apply the configuration to the model using
                <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.ApplyConfiguration``1(Microsoft.EntityFrameworkCore.IEntityTypeConfiguration{``0})" />
                in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                Configures the entity of type <typeparamref name="TEntity" />.
            </summary>
            <param name="builder"> The builder to be used to configure the entity type. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions">
            <summary>
                <para>
                    Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" />.
                </para>
                <para>
                    These methods are typically used by database providers (and other extensions). They are generally
                    not used in application code.
                </para>
                <para>
                    <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" /> is used to hide properties that are not intended to be used in
                    application code but can be used in extension methods written by database providers etc.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})">
            <summary>
                <para>
                    Resolves a service from the <see cref="T:System.IServiceProvider" /> exposed from a type that implements
                    <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" />.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" /> is used to hide properties that are not intended to be used in
                    application code but can be used in extension methods written by database providers etc.
                </para>
            </summary>
            <typeparam name="TService"> The type of service to be resolved. </typeparam>
            <param name="accessor"> The object exposing the service provider. </param>
            <returns> The requested service. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})">
            <summary>
                <para>
                    Gets the value from a property that is being hidden using <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" />.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" /> is used to hide properties that are not intended to be used in
                    application code but can be used in extension methods written by database providers etc.
                </para>
            </summary>
            <typeparam name="T"> The type of the property being hidden by <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" />. </typeparam>
            <param name="accessor"> The object that exposes the property. </param>
            <returns> The object assigned to the property. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable">
            <summary>
                <para>
                    Base class for types that support reading and writing annotations.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.GetAnnotations">
            <summary>
                Gets all annotations on the current object.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.AddAnnotation(System.String,System.Object)">
            <summary>
                Adds an annotation to this object. Throws if an annotation with the specified name already exists.
            </summary>
            <param name="name"> The key of the annotation to be added. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The newly added annotation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.AddAnnotation(System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                Adds an annotation to this object. Throws if an annotation with the specified name already exists.
            </summary>
            <param name="name"> The key of the annotation to be added. </param>
            <param name="annotation"> The annotation to be added. </param>
            <returns> The added annotation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.SetAnnotation(System.String,System.Object)">
            <summary>
                Sets the annotation stored under the given key. Overwrites the existing annotation if an
                annotation with the specified name already exists.
            </summary>
            <param name="name"> The ket of the annotation to be added. </param>
            <param name="value"> The value to be stored in the annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.SetAnnotation(System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                Sets the annotation stored under the given key. Overwrites the existing annotation if an
                annotation with the specified name already exists.
            </summary>
            <param name="name"> The key of the annotation to be added. </param>
            <param name="annotation"> The annotation to be set. </param>
            <returns> The annotation that was set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.OnAnnotationSet(System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                Runs the corresponding conventions when an annotation was set or removed.
            </summary>
            <param name="name"> The key of the set annotation. </param>
            <param name="annotation"> The annotation set. </param>
            <param name="oldAnnotation"> The old annotation. </param>
            <returns> The annotation that was set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.GetOrAddAnnotation(System.String,System.Object)">
            <summary>
                Adds an annotation to this object or returns the existing annotation if one with the specified name
                already exists.
            </summary>
            <param name="name"> The key of the annotation to be added. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, the newly
                added annotation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.FindAnnotation(System.String)">
            <summary>
                Gets the annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, null.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.RemoveAnnotation(System.String)">
            <summary>
                Removes the given annotation from this object.
            </summary>
            <param name="name"> The annotation to remove. </param>
            <returns> The annotation that was removed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.Item(System.String)">
            <summary>
                Gets the value annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The value of the existing annotation if an annotation with the specified name already exists.
                Otherwise, null.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.CreateAnnotation(System.String,System.Object)">
            <summary>
                Creates a new annotation.
            </summary>
            <param name="name"> The key of the annotation. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The newly created annotation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.Microsoft#EntityFrameworkCore#Infrastructure#IAnnotatable#GetAnnotations">
            <summary>
                Gets all annotations on the current object.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.Microsoft#EntityFrameworkCore#Infrastructure#IAnnotatable#FindAnnotation(System.String)">
            <summary>
                Gets the annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, null.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableExtensions.GetAnnotation(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.String)">
            <summary>
                Gets the annotation with the given name, throwing if it does not exist.
            </summary>
            <param name="annotatable"> The object to find the annotation on. </param>
            <param name="annotationName"> The key of the annotation to find. </param>
            <returns> The annotation with the specified name. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.Annotation">
            <summary>
                <para>
                    An arbitrary piece of metadata that can be stored on an object that implements <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.Annotation.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.Annotation" /> class.
            </summary>
            <param name="name"> The key of this annotation. </param>
            <param name="value"> The value assigned to this annotation. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.Annotation.Name">
            <summary>
                Gets the key of this annotation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.Annotation.Value">
            <summary>
                Gets the value assigned to this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension">
            <summary>
                <para>
                    Represents options managed by the core of Entity Framework, as opposed to those managed
                    by database providers or extensions. These options are set using <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
                </para>
                <para>
                    Instances of this class are designed to be immutable. To change an option, call one of the 'With...'
                    methods to obtain a new instance with the option changed.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.#ctor">
            <summary>
                Creates a new set of options with everything set to default values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension)">
            <summary>
                Called by a derived class constructor when implementing the <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.Clone" /> method.
            </summary>
            <param name="copyFrom"> The instance that is being cloned. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.Clone">
            <summary>
                Override this method in a derived class to ensure that any clone created is also of that class.
            </summary>
            <returns> A clone of this instance, which can be modified before being returned as immutable. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithInternalServiceProvider(System.IServiceProvider)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="internalServiceProvider"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithApplicationServiceProvider(System.IServiceProvider)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="applicationServiceProvider"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithModel(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="model"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithMemoryCache(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="memoryCache"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="loggerFactory"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithSensitiveDataLoggingEnabled(System.Boolean)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="sensitiveDataLoggingEnabled"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithQueryTrackingBehavior(Microsoft.EntityFrameworkCore.QueryTrackingBehavior)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="queryTrackingBehavior"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithReplacedService(System.Type,System.Type)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="serviceType"> The service contract. </param>
            <param name="implementationType"> The implementation type to use for the service. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithMaxPoolSize(System.Nullable{System.Int32})">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="maxPoolSize"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WithWarningsConfiguration(Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="warningsConfiguration"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.IsSensitiveDataLoggingEnabled">
            <summary>
                The option set from the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableSensitiveDataLogging(System.Boolean)" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.Model">
            <summary>
                The option set from the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.LoggerFactory">
            <summary>
                The option set from the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.MemoryCache">
            <summary>
                The option set from the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseMemoryCache(Microsoft.Extensions.Caching.Memory.IMemoryCache)" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.InternalServiceProvider">
            <summary>
                The option set from the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.ApplicationServiceProvider">
            <summary>
                The option set from the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseApplicationServiceProvider(System.IServiceProvider)" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.WarningsConfiguration">
            <summary>
                The options set from the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ConfigureWarnings(System.Action{Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder})" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.QueryTrackingBehavior">
            <summary>
                The option set from the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseQueryTrackingBehavior(Microsoft.EntityFrameworkCore.QueryTrackingBehavior)" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.ReplacedServices">
            <summary>
                The options set from the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ReplaceService``2" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.MaxPoolSize">
            <summary>
                The option set from the
                <see
                    cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
                method.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds the services required to make the selected options work. This is used when there
                is no external <see cref="T:System.IServiceProvider" /> and EF is maintaining its own service
                provider internally. This allows database providers (and other extensions) to register their
                required services when EF is creating an service provider.
            </summary>
            <param name="services"> The collection to add services to. </param>
            <returns> False since no database provider is registered. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.GetServiceProviderHashCode">
            <summary>
                Returns a hash code created from any options that would cause a new <see cref="T:System.IServiceProvider" />
                to be needed.
            </summary>
            <returns> A hash over options that require a new service provider when changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Gives the extension a chance to validate that all options in the extension are valid.
                If options are invalid, then an exception will be thrown.
            </summary>
            <param name="options"> The options being validated. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension.LogFragment">
            <summary>
                Creates a message fragment for logging typically containing information about
                any useful non-default options that have been configured.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade">
            <summary>
                Provides access to database related information and operations for a context.
                Instances of this class are typically obtained from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" /> and it is not designed
                to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> class. Instances of this class are typically
                obtained from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" /> and it is not designed to be directly constructed
                in your application code.
            </summary>
            <param name="context"> The context this database API belongs to .</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated">
            <summary>
                <para>
                    Ensures that the database for the context exists. If it exists, no action is taken. If it does not
                    exist then the database and all its schema are created. If the database exists, then no effort is made
                    to ensure it is compatible with the model for this context.
                </para>
                <para>
                    Note that this API does not use migrations to create the database. In addition, the database that is
                    created cannot be later updated using migrations. If you are targeting a relational database and using migrations,
                    you can use the DbContext.Database.Migrate() method to ensure the database is created and all migrations
                    are applied.
                </para>
            </summary>
            <returns> True if the database is created, false if it already existed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreatedAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Asynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not
                    exist then the database and all its schema are created. If the database exists, then no effort is made
                    to ensure it is compatible with the model for this context.
                </para>
                <para>
                    Note that this API does not use migrations to create the database. In addition, the database that is
                    created cannot be later updated using migrations. If you are targeting a relational database and using migrations,
                    you can use the DbContext.Database.Migrate() method to ensure the database is created and all migrations
                    are applied.
                </para>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains true if the database is created,
                false if it already existed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeleted">
            <summary>
                <para>
                    Ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted, and no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
            </summary>
            <returns> True if the database is deleted, false if it did not exist. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeletedAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Asynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted, and no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains true if the database is deleted,
                false if it did not exist.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransaction">
            <summary>
                Starts a new transaction.
            </summary>
            <returns>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> that represents the started transaction.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously starts a new transaction.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous transaction initialization. The task result contains a <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />
                that represents the started transaction.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CommitTransaction">
            <summary>
                Applies the outstanding operations in the current transaction to the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.RollbackTransaction">
            <summary>
                Discards the outstanding operations in the current transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CreateExecutionStrategy">
            <summary>
                Creates an instance of the configured <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <returns>An <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> instance.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CurrentTransaction">
            <summary>
                <para>
                    Gets the current <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> being used by the context, or null
                    if no transaction is in use.
                </para>
                <para>
                    This property will be null unless one of the 'BeginTransaction' or 'UseTransaction' methods has
                    been called, some of which are available as extension methods installed by EF providers.
                    No attempt is made to obtain a transaction from the current DbConnection or similar.
                </para>
                <para>
                    For relational databases, the underlying DbTransaction can be obtained using the
                    'Microsoft.EntityFrameworkCore.Storage.GetDbTransaction'extension method
                    on the returned <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.AutoTransactionsEnabled">
            <summary>
                <para>
                    Gets or sets a value indicating whether or not a transaction will be created
                    automatically by <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> if none of the
                    'BeginTransaction' or 'UseTransaction' methods have been called.
                </para>
                <para>
                    Setting this value to false will also disable the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
                    for <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                </para>
                <para>
                    The default value is true, meaning that SaveChanges will always use a transaction
                    when saving changes.
                </para>
                <para>
                    Setting this value to false should only be done with caution since the database
                    could be left in a corrupted state if SaveChanges fails.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.ProviderName">
            <summary>
                <para>
                    Returns the name of the database provider currently in use.
                    The name is typically the name of the provider assembly.
                    It is usually easier to use a sugar method such as 'IsSqlServer()' instead of
                    calling this method directly.
                </para>
                <para>
                    This method can only be used after the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has been configured because
                    it is only then that the provider is known. This means that this method cannot be used
                    in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> because this is where application code sets the
                    provider to use as part of configuring the context.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance">
            <summary>
                <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute">
            <summary>
                Identifies the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> that a class belongs to. For example, this attribute is used
                to identify which context a migration applies to.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute" /> class.
            </summary>
            <param name="contextType"> The associated context. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute.ContextType">
            <summary>
                Gets the associated context.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.DbContextFactoryOptions">
            <summary>
                Provides information about the environment an application is running in.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.DbContextFactoryOptions.ApplicationBasePath">
            <summary>
                Gets or sets the directory containing the application.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.DbContextFactoryOptions.ContentRootPath">
            <summary>
                Gets or sets the directory containing the application content files.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.DbContextFactoryOptions.EnvironmentName">
            <summary>
                Gets or sets the name of the environment.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServiceCollectionExtensions">
            <summary>
                Extension methods for setting up Entity Framework related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This method is no longer functional. Call a provider-specific method such as
                AddEntityFrameworkSqlServer, AddEntityFrameworkSqlite, etc. instead.
            </summary>
            <param name="serviceCollection"> The service collection. </param>
            <returns> Always throws NotSupportedException. </returns>
            <exception cref="T:System.NotSupportedException"> Always throws NotSupportedException. </exception>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder">
            <summary>
                <para>
                    A builder API designed for database providers to use when registering services.
                </para>
                <para>
                    Providers should create an instance of this class, use its methods to register
                    services, and then call <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAddCoreServices" /> to fill out the remaining Entity
                    Framework services.
                </para>
                <para>
                    Relational providers should use 'EntityFrameworkRelationalServicesBuilder instead.
                </para>
                <para>
                    Entity Framework ensures that services are registered with the appropriate scope. In some cases a provider
                    may register a service with a different scope, but great care must be taken that all its dependencies
                    can handle the new scope, and that it does not cause issue for services that depend on it.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.CoreServices">
            <summary>
                <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
                <para>
                    This dictionary is exposed for testing and provider-validation only.
                    It should not be used from application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Used by database providers to create a new <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder" /> for
                registration of provider services. Relational providers should use
                'EntityFrameworkRelationalServicesBuilder'.
            </summary>
            <param name="serviceCollection"> The collection to which services will be registered. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCollectionMap">
            <summary>
                Access to the underlying <see cref="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCollectionMap" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.GetServiceCharacteristics(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAddProviderSpecificServices(System.Action{Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap})">
            <summary>
                Database providers should call this method for access to the underlying
                <see cref="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCollectionMap" /> such that provider-specific services can be registered.
                Note that implementations of Entity Framework services should be registered directly on the
                <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder" /> and not through this method.
            </summary>
            <param name="serviceMap"> The underlying map to which provider services should be added.</param>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAddCoreServices">
            <summary>
                Registers default implementations of all services not already registered by the provider.
                Database providers must call this method as the last step of service registration--that is,
                after all provider services have been registered.
            </summary>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd``2">
            <summary>
                Adds an implementation of an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd(System.Type,System.Type)">
            <summary>
                Adds an implementation of an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd``1(System.Func{System.IServiceProvider,``0})">
            <summary>
                Adds a factory for an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <param name="factory"> The factory that will create the service instance. </param>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a factory for an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <param name="factory"> The factory that will create the service instance. </param>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd(System.Type,System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
                Adds a factory for an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <param name="factory"> The factory that will create the service instance. </param>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd``1(``0)">
            <summary>
                Adds an implementation of an Entity Framework service only if one has not already been registered.
                This method can only be used for singleton services.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <param name="implementation"> The implementation of the service. </param>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd(System.Type,System.Object)">
            <summary>
                Adds an implementation of an Entity Framework service only if one has not already been registered.
                This method can only be used for singleton services.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementation"> The implementation of the service. </param>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics.Lifetime">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics.MultipleRegistrations">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable">
            <summary>
                <para>
                    A class that exposes annotations. Annotations allow for arbitrary metadata to be stored on an object.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.Item(System.String)">
            <summary>
                Gets the value annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The value of the existing annotation if an annotation with the specified name already exists. Otherwise, null.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.FindAnnotation(System.String)">
            <summary>
                Gets the annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, null.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.GetAnnotations">
            <summary>
                Gets all annotations on the current object.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation">
            <summary>
                <para>
                    An arbitrary piece of metadata that can be stored on an object that implements <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" />.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation.Name">
            <summary>
                Gets the key of this annotation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation.Value">
            <summary>
                Gets the value assigned to this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextFactory`1">
            <summary>
                A factory for creating derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. Implement this interface to enable
                design-time services for context types that do not have a public default constructor. At design-time,
                derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances can be created in order to enable specific design-time
                experiences such as Migrations. Design-time services will automatically discover implementations of
                this interface that are in the same assembly as the derived context.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextFactory`1.Create(Microsoft.EntityFrameworkCore.Infrastructure.DbContextFactoryOptions)">
            <summary>
                Creates a new instance of a derived context.
            </summary>
            <param name="options"> Information about the environment an application is running in. </param>
            <returns> An instance of <typeparamref name="TContext" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions">
            <summary>
                The options to be used by a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. You normally override
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or use a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
                to create instances of classes that implement this interface, they are not designed to be directly created
                in your application code.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.Extensions">
            <summary>
                Gets the extensions that store the configured options.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension``1">
            <summary>
                Gets the extension of the specified type. Returns null if no extension of the specified type is configured.
            </summary>
            <typeparam name="TExtension"> The type of the extension to get. </typeparam>
            <returns> The extension, or null if none was found. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure">
            <summary>
                <para>
                    Explicitly implemented by <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> to hide methods that are used by database provider
                    extension methods but not intended to be called by application developers.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension``1(``0)">
            <summary>
                <para>
                    Adds the given extension to the options. If an existing extension of the same type already exists, it will be replaced.
                </para>
                <para>
                    This property is intended for use by extension methods to configure the context. It is not intended to be used in
                    application code.
                </para>
            </summary>
            <typeparam name="TExtension"> The type of extension to be added. </typeparam>
            <param name="extension"> The extension to be added. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension">
            <summary>
                <para>
                    Interface for extensions that are stored in <see cref="P:Microsoft.EntityFrameworkCore.DbContextOptions.Extensions" />.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds the services required to make the selected options work. This is used when there
                is no external <see cref="T:System.IServiceProvider" /> and EF is maintaining its own service
                provider internally. This allows database providers (and other extensions) to register their
                required services when EF is creating an service provider.
            </summary>
            <param name="services"> The collection to add services to. </param>
            <returns> True if a database provider and was registered; false otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension.GetServiceProviderHashCode">
            <summary>
                Returns a hash code created from any options that would cause a new <see cref="T:System.IServiceProvider" />
                to be needed. Most extensions do not have any such options and should return zero.
            </summary>
            <returns> A hash over options that require a new service provider when changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Gives the extension a chance to validate that all options in the extension are valid.
                Most extensions do not have invalid combinations and so this will be a no-op.
                If options are invalid, then an exception should be thrown.
            </summary>
            <param name="options"> The options being validated. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension.LogFragment">
            <summary>
                Creates a message fragment for logging typically containing information about
                any useful non-default options that have been configured.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1">
            <summary>
                <para>
                    This interface is explicitly implemented by type to hide properties that are not intended to be used in application code
                    but can be used in extension methods written by database providers etc.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <typeparam name="T"> The type of the property being hidden. </typeparam>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance">
            <summary>
                Gets the value of the property being hidden.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory">
            <summary>
                <para>
                    Creates keys that uniquely identifies the model for a given context. This is used to store and lookup
                    a cached model for a given context.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory.Create(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Gets the model cache key for a given context.
            </summary>
            <param name="context">
                The context to get the model cache key for.
            </param>
            <returns> The created key. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer">
            <summary>
                <para>
                    Performs additional configuration of the model in addition to what is discovered by convention.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    When replacing this service consider deriving the implementation from <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer"/> or
                    'RelationalModelCustomizer' to preserve the default behavior.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer.Customize(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                <para>
                    Builds the model for a given context.
                </para>
                <para>
                    If any instance data from <paramref name="context" /> is
                    used when building the model, then the implementation of <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory.Create(Microsoft.EntityFrameworkCore.DbContext)" />
                    also needs to be updated to ensure the model is cached correctly.
                </para>
            </summary>
            <param name="modelBuilder">
                The builder being used to construct the model.
            </param>
            <param name="context">
                The context instance that the model is being created for.
            </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource">
            <summary>
                <para>
                    Produces an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> based on a context. This is typically implemented by database providers to ensure that any
                    conventions and validation specific to their database are used.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator)">
            <summary>
                Gets the model to be used.
            </summary>
            <param name="context"> The context the model is being produced for. </param>
            <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
            <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
            <returns> The model to be used. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator">
            <summary>
                Validates a model after it is built.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator.Validate(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Validates a model, throwing an exception if any errors are found.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IResettableService">
            <summary>
                <para>
                    This interface must be implemented by any service that needs to be reset between
                    different uses of the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> in different pools.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState">
            <summary>
                Resets the service so that it can be used from the pool.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ISingletonOptions">
            <summary>
                Implemented by any class that represents options that can only be set at the
                <see cref="T:System.IServiceProvider" /> singleton level.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ISingletonOptions.Initialize(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Initializes the singleton options from the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ISingletonOptions.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Validates that the options in given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" /> have not
                changed when compared to the options already set here, and throws if they have.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey">
            <summary>
                <para>
                    A key that uniquely identifies the model for a given context. This is used to store and lookup
                    a cached model for a given context. This default implementation uses the context type as they key, thus
                    assuming that all contexts of a given type have the same model.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey" /> class.
            </summary>
            <param name="context">
                The context instance that this key is for.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey.Equals(Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey)">
            <summary>
                Determines if this key is equivalent to a given key (i.e. if they are for the same context type).
            </summary>
            <param name="other">
                The key to compare this key to.
            </param>
            <returns>
                True if the key is for the same context type, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey.Equals(System.Object)">
            <summary>
                Determines if this key is equivalent to a given object (i.e. if they are keys for the same context type).
            </summary>
            <param name="obj">
                The object to compare this key to.
            </param>
            <returns>
                True if the object is a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey" /> and is for the same context type, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey.GetHashCode">
            <summary>
                Gets the hash code for the key.
            </summary>
            <returns>
                The hash code for the key.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactory">
            <summary>
                <para>
                    Creates keys that uniquely identifies the model for a given context. This is used to store and lookup
                    a cached model for a given context. This default implementation uses the context type as they key, thus
                    assuming that all contexts of a given type have the same model.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactory.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactoryDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactory" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactory.Create(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Gets the model cache key for a given context.
            </summary>
            <param name="context">
                The context to get the model cache key for.
            </param>
            <returns> The created key. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactoryDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactory" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactoryDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactory" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer">
            <summary>
                <para>
                    Builds the model for a given context. This default implementation builds the model by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> on the context.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizerDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer.Dependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer.Customize(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Performs additional configuration of the model in addition to what is discovered by convention. This default implementation
                builds the model for a given context by calling <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                on the context.
            </summary>
            <param name="modelBuilder">
                The builder being used to construct the model.
            </param>
            <param name="context">
                The context instance that the model is being created for.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer.FindSets(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Adds the entity types found in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on the context to the model.
            </summary>
            <param name="modelBuilder"> The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> being used to build the model. </param>
            <param name="context"> The context to find <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizerDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizerDependencies.#ctor(Microsoft.EntityFrameworkCore.Internal.IDbSetFinder)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizerDependencies.SetFinder">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Internal.IDbSetFinder" /> that will locate the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties
                on the derived context.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizerDependencies.With(Microsoft.EntityFrameworkCore.Internal.IDbSetFinder)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="setFinder"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource">
            <summary>
                <para>
                    An implementation of <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" /> that produces a model based on
                    the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties exposed on the context. The model is cached to avoid
                    recreating it every time it is requested.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.Dependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator)">
            <summary>
                Returns the model from the cache, or creates a model if it is not present in the cache.
            </summary>
            <param name="context"> The context the model is being produced for. </param>
            <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
            <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
            <returns> The model to be used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator)">
            <summary>
                Creates the model. This method is called when the model was not found in the cache.
            </summary>
            <param name="context"> The context the model is being produced for. </param>
            <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
            <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
            <returns> The model to be used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateConventionSet(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder)">
            <summary>
                Creates the convention set to be used for the model. Only uses the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder" />
                if <paramref name="conventionSetBuilder" /> is null.
            </summary>
            <param name="conventionSetBuilder"> The provider convention set builder to be used. </param>
            <returns> The convention set to be used. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer,Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" />.
                </para>
                <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies.CoreConventionSetBuilder">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder" /> that will build the conventions to be used
                to build the model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies.ModelCustomizer">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer" /> that will perform additional configuration of the model
                in addition to what is discovered by convention.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies.ModelCacheKeyFactory">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory" /> that will create keys used to store and lookup models
                the model cache.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies.With(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="coreConventionSetBuilder"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="modelCustomizer"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="modelCacheKeyFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator">
            <summary>
                The validator that enforces core rules common for all providers.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.Dependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.Validate(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Validates a model, throwing an exception if any errors are found.
            </summary>
            <param name="model"> The model to validate. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateNoShadowEntities(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateNoShadowKeys(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateNoMutableKeys(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateNoCycles(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateNonNullPrimaryKeys(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateClrInheritance(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateClrInheritance(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.HashSet{Microsoft.EntityFrameworkCore.Metadata.IEntityType})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateOwnership(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateDefiningNavigations(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateFieldMapping(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateQueryTypes(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateQueryFilters(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateData(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.LogShadowProperties(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
            <param name="logger"> The validation logger. </param>
            <param name="modelLogger"> The model logger. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies.Logger">
            <summary>
                The validation logger.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies.ModelLogger">
            <summary>
                The model logger.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="logger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="modelLogger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap">
            <summary>
                <para>
                    Provides a map over a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> that allows <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />
                    entries to be conditionally added or re-written without requiring linear scans of the service
                    collection each time this is done.
                </para>
                <para>
                    Note that the collection should not be modified without in other ways while it is being managed
                    by the map. The collection can be used in the normal way after modifications using the map have
                    been completed.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" /> to operate on the given <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceCollection"> The collection to work with. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.ServiceCollection">
            <summary>
                The underlying <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient``2">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped``2">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton``2">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient(System.Type,System.Type)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped(System.Type,System.Type)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton(System.Type,System.Type)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAdd(System.Type,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Adds a service implemented by the given concrete type if no service for the given service
                type has already been registered.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <param name="lifetime"> The service lifetime. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient``1(System.Func{System.IServiceProvider,``0})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <param name="factory"> The factory that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped``1(System.Func{System.IServiceProvider,``0})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <param name="factory"> The factory that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton``1(System.Func{System.IServiceProvider,``0})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <param name="factory"> The factory that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that the given factory creates. </typeparam>
            <param name="factory"> The factory that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that the given factory creates. </typeparam>
            <param name="factory"> The factory that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that the given factory creates. </typeparam>
            <param name="factory"> The factory that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient(System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="factory"> The factory that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped(System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="factory"> The factory that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton(System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="factory"> The factory that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAdd(System.Type,System.Func{System.IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Adds a service implemented by the given factory if no service for the given service type
                has already been registered.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="factory"> The factory that implements the service. </param>
            <param name="lifetime"> The service lifetime. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton``1(``0)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given instance
                if no service for the given service type has already been registered.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <param name="implementation"> The object that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton(System.Type,System.Object)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given instance
                if no service for the given service type has already been registered.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementation"> The object that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransientEnumerable``2">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScopedEnumerable``2">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable``2">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransientEnumerable(System.Type,System.Type)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScopedEnumerable(System.Type,System.Type)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable(System.Type,System.Type)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddEnumerable(System.Type,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Adds a service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <param name="lifetime"> The service lifetime. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransientEnumerable``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given factory
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <param name="factory"> The factory that implements this service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScopedEnumerable``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given factory
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <param name="factory"> The factory that implements this service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given factory
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
            <param name="factory"> The factory that implements this service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddEnumerable(System.Type,System.Type,System.Func{System.IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Adds a service implemented by the given factory
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementationType"> The concrete type that implements the service. </param>
            <param name="factory"> The factory that implements this service. </param>
            <param name="lifetime"> The service lifetime. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable``1(``0)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given instance
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <typeparam name="TService"> The contract for the service. </typeparam>
            <param name="implementation"> The object that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable(System.Type,System.Object)">
            <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given instance
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
            <param name="serviceType"> The contract for the service. </param>
            <param name="implementation"> The object that implements the service. </param>
            <returns> The map, such that further calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.IQueryTypeConfiguration`1">
            <summary>
                Allows configuration for a query type to be factored into a separate class,
                rather than in-line in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
                Implement this interface, applying configuration for the query in the
                <see cref="M:Microsoft.EntityFrameworkCore.IQueryTypeConfiguration`1.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{`0})" /> method,
                and then apply the configuration to the model using
                <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.ApplyConfiguration``1(Microsoft.EntityFrameworkCore.IQueryTypeConfiguration{``0})" />
                in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
            </summary>
            <typeparam name="TQuery"> The query type to be configured. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.IQueryTypeConfiguration`1.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{`0})">
            <summary>
                Configures the query of type <typeparamref name="TQuery" />.
            </summary>
            <param name="builder"> The builder to be used to configure the query type. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on
                    an end of the relationship with a collection that contains instances of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.CollectionName">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.CollectionProperty">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.RelatedEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.DeclaringEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalRelationshipBuilder}#Instance">
            <summary>
                <para>
                    Gets the internal builder being used to configure the relationship.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)">
            <summary>
                <para>
                     Configures this as a one-to-many relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
            </summary>
            <param name="navigationName">
                The name of the reference navigation property on the other end of this relationship.
                If null or not specified, then there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOneBuilder(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOneBuilder(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on
                    an end of the relationship with a collection that contains instances of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                <para>
                     Configures this as a one-to-many relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
            </summary>
            <param name="navigationExpression">
                A lambda expression representing the reference navigation property on the other end of this
                relationship (<c>post => post.Blog</c>). If no property is specified, the relationship will be
                configured without a navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.String)">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="navigationName">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder">
            <summary>
                Allows further configuration of model data.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder`1">
            <summary>
                Allows further configuration of model data.
            </summary>
            <typeparam name="TEntity"> The entity type of the data. </typeparam>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure the entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata">
            <summary>
                The entity type being configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance">
            <summary>
                The model that the entity type belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.String)">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <param name="name"> The name of the base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.Type)">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <param name="entityType"> The base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey(System.String[])">
            <summary>
                Sets the properties that make up the primary key for this entity type.
            </summary>
            <param name="propertyNames"> The names of the properties that make up the primary key. </param>
            <returns> An object that can be used to configure the primary key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey(System.String[])">
            <summary>
                Creates an alternate key in the model for this entity type if one does not already exist over the specified
                properties. This will force the properties to be read-only. Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String[])" /> to specify uniqueness
                in the model that does not force properties to be read-only.
            </summary>
            <param name="propertyNames"> The names of the properties that make up the key. </param>
            <returns> An object that can be used to configure the key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property``1(System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the property to be configured. </typeparam>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.Type,System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
            </summary>
            <param name="propertyType"> The type of the property to be configured. </param>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property with this overload the property name must match the
                    name of a CLR property or field on the entity type. This overload cannot be used to
                    add a new shadow state property.
                </para>
            </summary>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore(System.String)">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyName"> The name of then property to be removed from the entity type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasQueryFilter(System.Linq.Expressions.LambdaExpression)">
            <summary>
                Specifies a LINQ predicate expression that will automatically be applied to any queries targeting
                this entity type.
            </summary>
            <param name="filter">The LINQ predicate expression.</param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.OwnsOne(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <param name="ownedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.OwnsOne(System.String,System.String)">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <param name="ownedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.OwnsOne(System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder})">
            <summary>
                <para>
                    Configures a relationship where this entity type provides identity to
                    the other type in the relationship.
                </para>
            </summary>
            <param name="ownedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
            <param name="buildAction"> An action that performs configuration of the relationship. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.OwnsOne(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder})">
            <summary>
                <para>
                    Configures a relationship where this entity type provides identity to
                    the other type in the relationship.
                </para>
            </summary>
            <param name="ownedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
            <param name="buildAction"> An action that performs configuration of the relationship. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String[])">
            <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
            <param name="propertyNames"> The names of the properties that make up the index. </param>
            <returns> An object that can be used to configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.String,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.String,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)">
            <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
            <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
                <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
                <para>
                    Calling this method overrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
            </summary>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this entity type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasData(System.Object[])">
            <summary>
                Configures this entity to have seed data. It is used to generate data motion migrations.
            </summary>
            <param name="data">
                An array of seed data of the same type as the entity we're building.
            </param>
            <returns> An object that can be used to configure the model data. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same typeBuilder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasBaseType(System.String)">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <param name="name"> The name of the base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasBaseType(System.Type)">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <param name="entityType"> The base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasBaseType``1">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <typeparam name="TBaseType"> The base type. </typeparam>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Sets the properties that make up the primary key for this entity type.
            </summary>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the primary key property(s) (<c>blog => blog.Url</c>).
                </para>
                <para>
                    If the primary key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>post => new { post.Title, post.BlogId }</c>).
                </para>
            </param>
            <returns> An object that can be used to configure the primary key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasAlternateKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Creates an alternate key in the model for this entity type if one does not already exist over the specified
                properties. This will force the properties to be read-only. Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> to specify uniqueness
                in the model that does not force properties to be read-only.
            </summary>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the key property(s) (<c>blog => blog.Url</c>).
                </para>
                <para>
                    If the key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>post => new { post.Title, post.BlogId }</c>).
                </para>
            </param>
            <returns> An object that can be used to configure the key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Returns an object that can be used to configure a property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog => blog.Url</c>).
            </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to be ignored
                (<c>blog => blog.Url</c>).
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.Ignore(System.String)">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyName"> The name of then property to be removed from the entity type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasQueryFilter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Specifies a LINQ predicate expression that will automatically be applied to any queries targeting
                this entity type.
            </summary>
            <param name="filter">The LINQ predicate expression.</param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
            <param name="indexExpression">
                <para>
                    A lambda expression representing the property(s) to be included in the index
                    (<c>blog => blog.Url</c>).
                </para>
                <para>
                    If the index is made up of multiple properties then specify an anonymous type including the
                    properties (<c>post => new { post.Title, post.BlogId }</c>).
                </para>
            </param>
            <returns> An object that can be used to configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer => customer.Address</c>).
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{`0,``0}})">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer => customer.Address</c>).
            </param>
            <param name="buildAction"> An action that performs configuration of the relationship. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})" />
                    or
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>post => post.Blog</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasOne``1(System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})" />
                    or
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationExpression">
                A lambda expression representing the collection navigation property on this entity type that represents
                the relationship (<c>blog => blog.Posts</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasMany``1(System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)">
            <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
            <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
                <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
                <para>
                    Calling this method overrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
            </summary>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this entity type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasData(`0[])">
            <summary>
                Configures this entity to have seed data. It is used to generate data motion migrations.
            </summary>
            <param name="data">
                An array of seed data.
            </param>
            <returns> An object that can be used to configure the model data. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Index" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalIndexBuilder}#Instance">
            <summary>
                The internal builder being used to configure the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder.Metadata">
            <summary>
                The index being configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance">
            <summary>
                The model that the index belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the index. If an annotation with the key specified in
                <paramref name="annotation" />
                already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder.IsUnique(System.Boolean)">
            <summary>
                Configures whether this index is unique (i.e. the value(s) for each instance must be unique).
            </summary>
            <param name="unique"> A value indicating whether this index is unique. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Key" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalKeyBuilder}#Instance">
            <summary>
                The internal builder being used to configure the key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder.Metadata">
            <summary>
                The key being configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance">
            <summary>
                The model that the key belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the key. If an annotation with the key specified in
                <paramref name="annotation" />
                already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder">
            <summary>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder`1">
            <summary>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="T"> The entity type being configured. </typeparam>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Property" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalPropertyBuilder}#Instance">
            <summary>
                The internal builder being used to configure the property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.Metadata">
            <summary>
                The property being configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance">
            <summary>
                The model that the property belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the property. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.IsRequired(System.Boolean)">
            <summary>
                Configures whether this property must have a value assigned or whether null is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned null.
            </summary>
            <param name="required"> A value indicating whether the property is required. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasMaxLength(System.Int32)">
            <summary>
                Configures the maximum length of data that can be stored in this property.
                Maximum length can only be set on array properties (including <see cref="T:System.String" /> properties).
            </summary>
            <param name="maxLength"> The maximum length of data allowed in the property. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.IsUnicode(System.Boolean)">
            <summary>
                Configures the property as capable of persisting unicode characters or not.
                Can only be set on <see cref="T:System.String" /> properties.
            </summary>
            <param name="unicode"> A value indicating whether the property can contain unicode characters or not. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.IsRowVersion">
            <summary>
                <para>
                    Configures the property as <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.ValueGeneratedOnAddOrUpdate" /> and
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.IsConcurrencyToken(System.Boolean)" />.
                </para>
                <para>
                    Database providers can choose to interpret this in different way, but it is commonly used
                    to indicate some form of automatic row-versioning as used for optimistic concurrency detection.
                </para>
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasValueGenerator``1">
            <summary>
                <para>
                    Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> that will generate values for this property.
                </para>
                <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (null for string, 0 for int, Guid.Empty for Guid, etc.).
                </para>
                <para>
                    A single instance of this type will be created and used to generate values for this property in all
                    instances of the entity type. The type must be instantiable and have a parameterless constructor.
                </para>
                <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasValueGenerator(System.Type)">
            <summary>
                <para>
                    Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> that will generate values for this property.
                </para>
                <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (null for string, 0 for int, Guid.Empty for Guid, etc.).
                </para>
                <para>
                    A single instance of this type will be created and used to generate values for this property in all
                    instances of the entity type. The type must be instantiable and have a parameterless constructor.
                </para>
                <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
                <para>
                    Setting null does not disable value generation for this property, it just clears any generator explicitly
                    configured for this property. The database provider may still have a value generator for the property type.
                </para>
            </summary>
            <param name="valueGeneratorType"> A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasValueGenerator(System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})">
            <summary>
                <para>
                    Configures a factory for creating a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> to use to generate values
                    for this property.
                </para>
                <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (null for string, 0 for int, Guid.Empty for Guid, etc.).
                </para>
                <para>
                    This factory will be invoked once to create a single instance of the value generator, and
                    this will be used to generate values for this property in all instances of the entity type.
                </para>
                <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
            </summary>
            <param name="factory"> A delegate that will be used to create value generator instances. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.IsConcurrencyToken(System.Boolean)">
            <summary>
                Configures whether this property should be used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
            <param name="concurrencyToken"> A value indicating whether this property is a concurrency token. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.ValueGeneratedNever">
            <summary>
                Configures a property to never have a value generated by the database when an instance of this
                entity type is saved.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
            <remarks>
                Note that values may still be generated by a client-side value generator, if one is set explicitly or by a convention.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.ValueGeneratedOnAdd">
            <summary>
                Configures a property to have a value generated only when saving a new entity, unless a non-null,
                non-temporary value has been set, in which case the set value will be saved instead. The value
                may be generated by a client-side value generator or may be generated by the database as part
                of saving the entity.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.ValueGeneratedOnAddOrUpdate">
            <summary>
                Configures a property to have a value generated when saving a new or existing entity.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.ValueGeneratedOnUpdate">
            <summary>
                Configures a property to have a value generated when saving an existing entity.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasField(System.String)">
            <summary>
                <para>
                    Sets the backing field to use for this property.
                </para>
                <para>
                    Backing fields are normally found by convention as described
                    here: http://go.microsoft.com/fwlink/?LinkId=723277.
                    This method is useful for setting backing fields explicitly in cases where the
                    correct field is not found by convention.
                </para>
                <para>
                    By default, the backing field, if one is found or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. This can be changed by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />.
                </para>
            </summary>
            <param name="fieldName"> The field name. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.
                </para>
                <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for this property as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
                <para>
                    Calling this method overrides for this property any access mode that was set on the
                    entity type or model.
                </para>
            </summary>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasConversion``1">
            <summary>
                Configures the property so that the property value is converted to the given type before
                writing to the database and converted back when reading from the database.
            </summary>
            <typeparam name="TProvider"> The type to convert to and from. </typeparam>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasConversion(System.Type)">
            <summary>
                Configures the property so that the property value is converted to the given type before
                writing to the database and converted back when reading from the database.
            </summary>
            <param name="providerClrType"> The type to convert to and from. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
                Configures the property so that the property value is converted to and from the database
                using the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.
            </summary>
            <param name="converter"> The converter to use. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Property" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the property. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.IsRequired(System.Boolean)">
            <summary>
                Configures whether this property must have a value assigned or whether null is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned null.
            </summary>
            <param name="required"> A value indicating whether the property is required. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasMaxLength(System.Int32)">
            <summary>
                Configures the maximum length of data that can be stored in this property.
                Maximum length can only be set on array properties (including <see cref="T:System.String" /> properties).
            </summary>
            <param name="maxLength"> The maximum length of data allowed in the property. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.IsUnicode(System.Boolean)">
            <summary>
                Configures the property as capable of persisting unicode characters or not.
                Can only be set on <see cref="T:System.String" /> properties.
            </summary>
            <param name="unicode"> A value indicating whether the property can contain unicode characters or not. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.IsRowVersion">
            <summary>
                <para>
                    Configures the property as <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.ValueGeneratedOnAddOrUpdate" /> and
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.IsConcurrencyToken(System.Boolean)" />.
                </para>
                <para>
                    Database providers can choose to interpret this in different way, but it is commonly used
                    to indicate some form of automatic row-versioning as used for optimistic concurrency detection.
                </para>
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasValueGenerator``1">
            <summary>
                <para>
                    Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> that will generate values for this property.
                </para>
                <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (null for string, 0 for int, Guid.Empty for Guid, etc.).
                </para>
                <para>
                    A single instance of this type will be created and used to generate values for this property in all
                    instances of the entity type. The type must be instantiable and have a parameterless constructor.
                </para>
                <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasValueGenerator(System.Type)">
            <summary>
                <para>
                    Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> that will generate values for this property.
                </para>
                <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (null for string, 0 for int, Guid.Empty for Guid, etc.).
                </para>
                <para>
                    A single instance of this type will be created and used to generate values for this property in all
                    instances of the entity type. The type must be instantiable and have a parameterless constructor.
                </para>
                <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
                <para>
                    Setting null does not disable value generation for this property, it just clears any generator explicitly
                    configured for this property. The database provider may still have a value generator for the property type.
                </para>
            </summary>
            <param name="valueGeneratorType"> A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasValueGenerator(System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})">
            <summary>
                <para>
                    Configures a factory for creating a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> to use to generate values
                    for this property.
                </para>
                <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (null for string, 0 for int, Guid.Empty for Guid, etc.).
                </para>
                <para>
                    This factory will be invoked once to create a single instance of the value generator, and
                    this will be used to generate values for this property in all instances of the entity type.
                </para>
                <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
            </summary>
            <param name="factory"> A delegate that will be used to create value generator instances. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.IsConcurrencyToken(System.Boolean)">
            <summary>
                Configures whether this property should be used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
            <param name="concurrencyToken"> A value indicating whether this property is a concurrency token. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.ValueGeneratedNever">
            <summary>
                Configures a property to never have a value generated when an instance of this
                entity type is saved.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
            <remarks>
                Note that temporary values may still be generated for use internally before a
                new entity is saved.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.ValueGeneratedOnAdd">
            <summary>
                Configures a property to have a value generated only when saving a new entity, unless a non-null,
                non-temporary value has been set, in which case the set value will be saved instead. The value
                may be generated by a client-side value generator or may be generated by the database as part
                of saving the entity.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.ValueGeneratedOnAddOrUpdate">
            <summary>
                Configures a property to have a value generated when saving a new or existing entity.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.ValueGeneratedOnUpdate">
            <summary>
                Configures a property to have a value generated when saving an existing entity.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasField(System.String)">
            <summary>
                <para>
                    Sets the backing field to use for this property.
                </para>
                <para>
                    Backing fields are normally found by convention as described
                    here: http://go.microsoft.com/fwlink/?LinkId=723277.
                    This method is useful for setting backing fields explicitly in cases where the
                    correct field is not found by convention.
                </para>
                <para>
                    By default, the backing field, if one is found or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. This can be changed by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />.
                </para>
            </summary>
            <param name="fieldName"> The field name. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasConversion``1">
            <summary>
                Configures the property so that the property value is converted to the given type before
                writing to the database and converted back when reading from the database.
            </summary>
            <typeparam name="TProvider"> The type to convert to and from. </typeparam>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasConversion(System.Type)">
            <summary>
                Configures the property so that the property value is converted to the given type before
                writing to the database and converted back when reading from the database.
            </summary>
            <param name="providerClrType"> The type to convert to and from. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasConversion``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
                Configures the property so that the property value is converted to and from the database
                using the given conversion expressions.
            </summary>
            <typeparam name="TProvider"> The store type generated by the conversions. </typeparam>
            <param name="convertToProviderExpression"> An expression to convert objects when writing data to the store. </param>
            <param name="convertFromProviderExpression"> An expression to convert objects when reading data from the store. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasConversion``1(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter{`0,``0})">
            <summary>
                Configures the property so that the property value is converted to and from the database
                using the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2" />.
            </summary>
            <typeparam name="TProvider"> The store type generated by the converter. </typeparam>
            <param name="converter"> The converter to use. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
                Configures the property so that the property value is converted to and from the database
                using the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.
            </summary>
            <param name="converter"> The converter to use. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.
                </para>
                <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for this property as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
                <para>
                    Calling this method overrides for this property any access mode that was set on the
                    entity type or model.
                </para>
            </summary>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a query type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.Metadata">
            <summary>
                The query type being configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance">
            <summary>
                The model that the query type belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure the query type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the query type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.HasBaseType(System.String)">
            <summary>
                Sets the base type of this query type in an inheritance hierarchy.
            </summary>
            <param name="name"> The name of the base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.HasBaseType(System.Type)">
            <summary>
                Sets the base type of this query type in an inheritance hierarchy.
            </summary>
            <param name="queryType"> The base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.Property``1(System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the query type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the query type class
                    then it will be added to the model. If no property exists in the query type class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the query type class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the query type class.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the property to be configured. </typeparam>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.Property(System.Type,System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the query type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the query type class
                    then it will be added to the model. If no property exists in the query type class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the query type class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the query type class.
                </para>
            </summary>
            <param name="propertyType"> The type of the property to be configured. </param>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.Property(System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the query type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property with this overload the property name must match the
                    name of a CLR property or field on the query type. This overload cannot be used to
                    add a new shadow state property.
                </para>
            </summary>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.Ignore(System.String)">
            <summary>
                Excludes the given property from the query type. This method is typically used to remove properties
                from the query type that were added by convention.
            </summary>
            <param name="propertyName"> The name of then property to be removed from the query type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.HasQueryFilter(System.Linq.Expressions.LambdaExpression)">
            <summary>
                Specifies a LINQ predicate expression that will automatically be applied to any queries targeting
                this query type.
            </summary>
            <param name="filter">The LINQ predicate expression.</param>
            <returns> An object that can be used to configure the query type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.HasOne(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where this query type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedType"> The query type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this query type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.HasOne(System.String,System.String)">
            <summary>
                <para>
                    Configures a relationship where this query type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedTypeName"> The name of the query type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this query type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this query type.
                </para>
                <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this query type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
                <para>
                    Calling this method overrrides for all properties of this query type any access mode that was
                    set on the model.
                </para>
            </summary>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this query type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TQuery"> The query type being configured. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the query type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same typeBuilder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.HasBaseType(System.String)">
            <summary>
                Sets the base type of this query type in an inheritance hierarchy.
            </summary>
            <param name="name"> The name of the base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.HasBaseType(System.Type)">
            <summary>
                Sets the base type of this query type in an inheritance hierarchy.
            </summary>
            <param name="queryType"> The base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.HasBaseType``1">
            <summary>
                Sets the base type of this query type in an inheritance hierarchy.
            </summary>
            <typeparam name="TBaseType"> The base type. </typeparam>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Returns an object that can be used to configure a property of the query type.
                If the specified property is not already part of the model, it will be added.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog => blog.Url</c>).
            </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Excludes the given property from the query type. This method is typically used to remove properties
                from the query type that were added by convention.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to be ignored
                (<c>blog => blog.Url</c>).
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.Ignore(System.String)">
            <summary>
                Excludes the given property from the query type. This method is typically used to remove properties
                from the query type that were added by convention.
            </summary>
            <param name="propertyName"> The name of then property to be removed from the query type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.HasQueryFilter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Specifies a LINQ predicate expression that will automatically be applied to any queries targeting
                this query type.
            </summary>
            <param name="filter">The LINQ predicate expression.</param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.ToQuery(System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{`0}}})">
            <summary>
                Configures a query used to provide data for a query type.
            </summary>
            <param name="query"> The query that will provider the underlying data for the query type. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.HasOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                <para>
                    Configures a relationship where this query type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})" />
                    or
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The query type that this relationship targets. </typeparam>
            <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this query type that represents
                the relationship (<c>post => post.Blog</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this query type.
                </para>
                <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this query type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
                <para>
                    Calling this method overrrides for all properties of this query type any access mode that was
                    set on the model.
                </para>
            </summary>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this query type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-many relationship.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.Builder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.Metadata">
            <summary>
                The foreign key that represents this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance">
            <summary>
                The model that this relationship belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalRelationshipBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure this relationship.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" />
                already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.HasForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one that does not
                    have a corresponding property in the entity class. The current value for the  property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.HasPrincipalKey(System.String[])" /> is not specified, then an attempt will be made to match
                    the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.HasForeignKeyBuilder(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.HasForeignKeyBuilder(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.HasPrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.HasPrincipalKeyBuilder(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.HasPrincipalKeyBuilder(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.IsRequired(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.OnDelete(Microsoft.EntityFrameworkCore.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-many relationship.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TPrincipalEntity"> The principal entity type in this relationship. </typeparam>
            <typeparam name="TDependentEntity"> The dependent entity type in this relationship. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.HasForeignKey(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> is not specified, then
                    an attempt will be made to match the data type and order of foreign key properties against the
                    primary key of the principal entity type. If they do not match, new shadow state properties that
                    form a unique index will be added to the principal entity type to serve as the reference key.
                    A shadow state property is one that does not have a corresponding property in the entity class. The
                    current value for the property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being
                    stored in instances of the entity class.
                </para>
            </summary>
            <param name="foreignKeyExpression">
                <para>
                    A lambda expression representing the foreign key property(s) (<c>post => post.BlogId</c>).
                </para>
                <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>comment => new { comment.BlogId, comment.PostTitle }</c>). The order specified should match the order of
                    corresponding keys in <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />.
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the reference key property(s) (<c>blog => blog.BlogId</c>).
                </para>
                <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>post => new { post.BlogId, post.PostTitle }</c>).
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.HasForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> is not specified, then an attempt will be made to
                    match
                    the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.IsRequired(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2.OnDelete(Microsoft.EntityFrameworkCore.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on
                    an end of the relationship with a reference that points to an instance of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.ReferenceName">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.ReferenceProperty">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.RelatedEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.DeclaringEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalRelationshipBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure the relationship.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)">
            <summary>
                <para>
                    Configures this as a one-to-many relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
            </summary>
            <param name="collection">
                The name of the collection navigation property on the other end of this relationship.
                If null or not specified, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithManyBuilder(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithManyBuilder(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)">
            <summary>
                <para>
                    Configures this as a one-to-one relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null or not specified, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOneBuilder(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOneBuilder(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on an end of the
                    relationship with a reference that points to an instance of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})">
            <summary>
                <para>
                    Configures this as a one-to-many relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
            </summary>
            <param name="navigationExpression">
                A lambda expression representing the collection navigation property on the other end of this
                relationship (<c>blog => blog.Posts</c>). If no property is specified, the relationship will be
                configured without a navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                <para>
                    Configures this as a one-to-one relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
            </summary>
            <param name="navigationExpression">
                A lambda expression representing the reference navigation property on the other end of this
                relationship (<c>blog => blog.BlogInfo</c>). If no property is specified, the relationship will be
                configured without a navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.String)">
            <summary>
                <para>
                    Configures this as a one-to-many relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
            </summary>
            <param name="navigationName">
                The name of the collection navigation property on the other end of this relationship.
                If null or not specified, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.String)">
            <summary>
                <para>
                    Configures this as a one-to-many relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
            </summary>
            <param name="navigationName">
                The name of the reference navigation property on the other end of this relationship.
                If null or not specified, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-one ownership.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure the entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnedEntityType">
            <summary>
                The entity type being configured.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasForeignKeyAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the foreign key. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasPrincipalKey(System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasPrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <remarks>
                <para>
                    If multiple principal key properties are specified, the order of principal key properties should
                    match the order that the primary key or unique constraint properties were configured on the principal
                    entity type.
                </para>
            </remarks>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OnDelete(Microsoft.EntityFrameworkCore.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasEntityTypeAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Property``1(System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the property to be configured. </typeparam>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Property(System.Type,System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
            </summary>
            <param name="propertyType"> The type of the property to be configured. </param>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Property(System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property with this overload the property name must match the
                    name of a CLR property or field on the entity type. This overload cannot be used to
                    add a new shadow state property.
                </para>
            </summary>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Ignore(System.String)">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyName"> The name of then property to be removed from the entity type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasIndex(System.String[])">
            <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
            <param name="propertyNames"> The names of the properties that make up the index. </param>
            <returns> An object that can be used to configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnsOne(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <param name="ownedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnsOne(System.String,System.String)">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <param name="ownedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnsOne(System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder})">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <param name="ownedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
            <param name="buildAction"> An action that performs configuration of the relationship. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnsOne(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder})">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <param name="ownedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
            <param name="buildAction"> An action that performs configuration of the relationship. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasOne(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasOne(System.String,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasMany(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasMany(System.String,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)">
            <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
            <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
                <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
                <para>
                    Calling this method overrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
            </summary>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this entity type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasData(System.Object[])">
            <summary>
                Configures this entity to have seed data. It is used to generate data motion migrations.
            </summary>
            <param name="data">
                An array of seed data of the same type as the entity we're building.
            </param>
            <returns> An object that can be used to configure the model data. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-one ownership.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasForeignKeyAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the foreign key. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasPrincipalKey(System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasForeignKey(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasPrincipalKey(System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyExpression">
                <para>
                    A lambda expression representing the foreign key property(s) (<c>t => t.Id1</c>).
                </para>
                <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t => new { t.Id1, t.Id2 }</c>). The order specified should match the order of
                    corresponding keys in <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasPrincipalKey(System.String[])" />.
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasPrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <remarks>
                <para>
                    If multiple principal key properties are specified, the order of principal key properties should
                    match the order that the primary key or unique constraint properties were configured on the principal
                    entity type.
                </para>
            </remarks>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <remarks>
                <para>
                    If multiple principal key properties are specified, the order of principal key properties should
                    match the order that the primary key or unique constraint properties were configured on the principal
                    entity type.
                </para>
            </remarks>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the reference key property(s) (<c>t => t.Id</c>).
                </para>
                <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>t => new { t.Id1, t.Id2 }</c>).
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.OnDelete(Microsoft.EntityFrameworkCore.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasEntityTypeAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the property to be configured. </typeparam>
            <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog => blog.Url</c>).
            </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.Ignore(System.String)">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyName"> The name of then property to be removed from the entity type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.Ignore(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to be ignored
                (<c>blog => blog.Url</c>).
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasIndex(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
            <param name="indexExpression">
                <para>
                    A lambda expression representing the property(s) to be included in the index
                    (<c>blog => blog.Url</c>).
                </para>
                <para>
                    If the index is made up of multiple properties then specify an anonymous type including the
                    properties (<c>post => new { post.Title, post.BlogId }</c>).
                </para>
            </param>
            <returns> An object that can be used to configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.OwnsOne``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <typeparam name="TNewRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer => customer.Address</c>).
            </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.OwnsOne``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{`1,``0}})">
            <summary>
                <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
                <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
                <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
            </summary>
            <typeparam name="TNewRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer => customer.Address</c>).
            </param>
            <param name="buildAction"> An action that performs configuration of the relationship. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasOne``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})" />
                    or
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TNewRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>post => post.Blog</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasMany``1(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TNewRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="navigationExpression">
                A lambda expression representing the collection navigation property on this entity type that represents
                the relationship (<c>blog => blog.Posts</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)">
            <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
            <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
                <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
                <para>
                    Calling this method overrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
            </summary>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this entity type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2.HasData(`1[])">
            <summary>
                Configures this entity to have seed data. It is used to generate data motion migrations.
            </summary>
            <param name="data">
                An array of seed data.
            </param>
            <returns> An object that can be used to configure the model data. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-one relationship.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasForeignKey(System.Type,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityType">
                The entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasForeignKey(System.String,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityTypeName">
                The name of the entity type that is the dependent in this relationship (the type that has the foreign
                key properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasForeignKeyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasForeignKeyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKey(System.Type,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <remarks>
                If multiple principal key properties are specified, the order of principal key properties should
                match the order that the primary key or unique constraint properties were configured on the principal
                entity type.
            </remarks>
            <param name="principalEntityType">
                The entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKey(System.String,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <remarks>
                If multiple principal key properties are specified, the order of principal key properties should
                match the order that the primary key or unique constraint properties were configured on the principal
                entity type.
            </remarks>
            <param name="principalEntityTypeName">
                The name of the entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKeyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKeyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.ResolveEntityType(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.ResolveEntityType(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.IsRequired(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder.OnDelete(Microsoft.EntityFrameworkCore.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.DeclaringEntityType">
            <summary>
                Gets the first entity type used to configure this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.RelatedEntityType">
            <summary>
                Gets the second entity type used to configure this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.Builder">
            <summary>
                Gets the internal builder being used to configure this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalRelationshipBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.Metadata">
            <summary>
                The foreign key that represents this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance">
            <summary>
                The model that this relationship belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-one relationship.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey(System.Type,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityType">
                The entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey``1(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <typeparam name="TDependentEntity">
                The entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </typeparam>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.Type,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <remarks>
                If multiple principal key properties are specified, the order of principal key properties should
                match the order that the primary key or unique constraint properties were configured on the principal
                entity type.
            </remarks>
            <param name="principalEntityType">
                The entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <typeparam name="TPrincipalEntity">
                The entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </typeparam>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey(System.String,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.String,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityTypeName">
                The name of entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.String,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint
                will be introduced.
            </summary>
            <remarks>
                If multiple principal key properties are specified, the order of principal key properties should
                match the order that the primary key or unique constraint properties were configured on the principal
                entity type.
            </remarks>
            <param name="principalEntityTypeName">
                The name of entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <typeparam name="TDependentEntity">
                The entity type that is the dependent in this relationship. That is, the type
                that has the foreign key properties.
            </typeparam>
            <param name="foreignKeyExpression">
                <para>
                    A lambda expression representing the foreign key property(s) (<c>t => t.Id1</c>).
                </para>
                <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t => new { t.Id1, t.Id2 }</c>). The order specified should match the order of
                    corresponding keys in <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.Type,System.String[])" />.
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <remarks>
                If multiple principal key properties are specified, the order of principal key properties should
                match the order that the primary key or unique constraint properties were configured on the principal
                entity type.
            </remarks>
            <typeparam name="TPrincipalEntity">
                The entity type that is the principal in this relationship. That is, the type
                that has the reference key properties.
            </typeparam>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the reference key property(s) (<c>t => t.Id</c>).
                </para>
                <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>t => new { t.Id1, t.Id2 }</c>).
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.IsRequired(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.OnDelete(Microsoft.EntityFrameworkCore.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet">
            <summary>
                Base implementation for a set of conventions used to build a model. This base implementation is an empty set of conventions.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.EntityTypeAddedConventions">
            <summary>
                Conventions to run when an entity type is added to the model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.EntityTypeIgnoredConventions">
            <summary>
                Conventions to run when an entity type is ignored.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.EntityTypeRemovedConventions">
            <summary>
                Conventions to run when an entity type is removed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.EntityTypeMemberIgnoredConventions">
            <summary>
                Conventions to run when a property is ignored.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.BaseEntityTypeChangedConventions">
            <summary>
                Conventions to run when the base entity type is changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.EntityTypeAnnotationChangedConventions">
            <summary>
                Conventions to run when an annotation is set or removed on an entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.ModelAnnotationChangedConventions">
            <summary>
                Conventions to run when an annotation is set or removed on a model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.ForeignKeyAddedConventions">
            <summary>
                Conventions to run when a foreign key is added.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.ForeignKeyRemovedConventions">
            <summary>
                Conventions to run when a foreign key is removed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.KeyAddedConventions">
            <summary>
                Conventions to run when a key is added.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.KeyRemovedConventions">
            <summary>
                Conventions to run when a key is removed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.PrimaryKeyChangedConventions">
            <summary>
                Conventions to run when a primary key is changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.IndexAddedConventions">
            <summary>
                Conventions to run when an index is added.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.IndexRemovedConventions">
            <summary>
                Conventions to run when an index is removed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.IndexUniquenessChangedConventions">
            <summary>
                Conventions to run when the uniqueness of an index is changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.IndexAnnotationChangedConventions">
            <summary>
                Conventions to run when an annotation is changed on an index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.PrincipalEndChangedConventions">
            <summary>
                Conventions to run when the principal end of a relationship is configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.ModelBuiltConventions">
            <summary>
                Conventions to run when model building is completed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.ModelInitializedConventions">
            <summary>
                Conventions to run to setup the initial model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.NavigationAddedConventions">
            <summary>
                Conventions to run when a navigation property is added.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.NavigationRemovedConventions">
            <summary>
                Conventions to run when a navigation property is removed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.ForeignKeyUniquenessChangedConventions">
            <summary>
                Conventions to run when the uniqueness of a foreign key is changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.ForeignKeyOwnershipChangedConventions">
            <summary>
                Conventions to run when the ownership of a foreign key is changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.PropertyAddedConventions">
            <summary>
                Conventions to run when a property is added.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.PropertyNullabilityChangedConventions">
            <summary>
                Conventions to run when the nullability of a property is changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.PropertyFieldChangedConventions">
            <summary>
                Conventions to run when the field of a property is changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.PropertyAnnotationChangedConventions">
            <summary>
                Conventions to run when an annotation is changed on a property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.CreateConventionSet(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.BackingFieldConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.BackingFieldConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.BackingFieldConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.BackingFieldConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.BaseTypeDiscoveryConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.BaseTypeDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CacheCleanupConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CacheCleanupConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CascadeDeleteConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CascadeDeleteConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CascadeDeleteConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CascadeDeleteConvention.TargetDeleteBehavior(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ChangeTrackingStrategyConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ChangeTrackingStrategyConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CompositeConventionSetBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CompositeConventionSetBuilder.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CompositeConventionSetBuilder.Builders">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CompositeConventionSetBuilder.AddConventions(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConcurrencyCheckAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConcurrencyCheckAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConstructorBindingConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConstructorBindingConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConstructorBindingConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionBatchExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionBatchExtensions.Run(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.Tracker">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnEntityTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnEntityTypeIgnored(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,System.String,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnEntityTypeRemoved(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnEntityTypeMemberIgnored(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnBaseEntityTypeChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnEntityTypeAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnModelAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnForeignKeyAdded(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnForeignKeyRemoved(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnKeyAdded(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnKeyRemoved(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnPrimaryKeyChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnIndexAdded(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnIndexRemoved(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Index)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnIndexUniquenessChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnIndexAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnNavigationAdded(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnNavigationRemoved(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnForeignKeyUniquenessChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnForeignKeyOwnershipChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnPrincipalEndChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnPropertyAdded(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnPropertyNullableChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnPropertyFieldChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.Reflection.FieldInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnPropertyAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnModelBuilt(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnModelInitialized(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.StartBatch">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder.CreateConventionSet">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMapper)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource,Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory,Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories,Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Storage.ITypeMapper)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.TypeMappingSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.ParameterBindingFactories">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.MemberClassifier">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.ConstructorBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.Logger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.With(Microsoft.EntityFrameworkCore.Storage.ITypeMapper)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMapper"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.With(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.With(Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="constructorBindingFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="logger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.With(Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="parameterBindingFactories"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies.With(Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="memberClassifier"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.DatabaseGeneratedAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.DatabaseGeneratedAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.DerivedTypeDiscoveryConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.DerivedTypeDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.EntityTypeAttributeConvention`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.EntityTypeAttributeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.EntityTypeAttributeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyAttributeConvention.FindCandidateNavigationPropertyType(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Index)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.Microsoft#EntityFrameworkCore#Metadata#Conventions#Internal#IForeignKeyUniquenessChangedConvention#Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.Microsoft#EntityFrameworkCore#Metadata#Conventions#Internal#IIndexUniquenessChangedConvention#Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.CreateIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyIndexConvention.AreIndexedBy(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.Reflection.FieldInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Microsoft#EntityFrameworkCore#Metadata#Conventions#Internal#IForeignKeyUniquenessChangedConvention#Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Microsoft#EntityFrameworkCore#Metadata#Conventions#Internal#IPrimaryKeyChangedConvention#Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ForeignKeyPropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IBaseTypeChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IBaseTypeChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch.Run(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder.AddConventions(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder.CreateConventionSet">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeAddedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeAddedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeAnnotationChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeAnnotationChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeIgnoredConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeIgnoredConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,System.String,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeMemberIgnoredConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeMemberIgnoredConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeRemovedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeRemovedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IForeignKeyAddedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IForeignKeyAddedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IForeignKeyOwnershipChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IForeignKeyOwnershipChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IForeignKeyRemovedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IForeignKeyRemovedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IForeignKeyUniquenessChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IForeignKeyUniquenessChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IgnoredMembersValidationConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IgnoredMembersValidationConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IIndexAddedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IIndexAddedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IIndexAnnotationChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IIndexAnnotationChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IIndexRemovedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IIndexRemovedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Index)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IIndexUniquenessChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IIndexUniquenessChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IKeyAddedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IKeyAddedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IKeyRemovedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IKeyRemovedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IModelAnnotationChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IModelAnnotationChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IModelBuiltConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IModelBuiltConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IModelInitializedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IModelInitializedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.INavigationAddedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.INavigationAddedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.INavigationRemovedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.INavigationRemovedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InheritanceDiscoveryConventionBase">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InheritanceDiscoveryConventionBase.FindClosestBaseType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention.InverseNavigationsAnnotationName">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.PropertyInfo,System.Type,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,System.Type,System.Reflection.PropertyInfo,System.Type,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo,System.Type,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention.ApplyIgnored(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.PropertyInfo,System.Type,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.InversePropertyAttributeConvention.IsAmbiguous(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPrimaryKeyChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPrimaryKeyChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPrincipalEndChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPrincipalEndChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPropertyAddedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPropertyAddedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPropertyAnnotationChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPropertyAnnotationChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPropertyFieldChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPropertyFieldChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.Reflection.FieldInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPropertyNullabilityChangedConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IPropertyNullabilityChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.ComponentModel.DataAnnotations.KeyAttribute,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention.DiscoverKeyProperties(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.Reflection.FieldInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.KeyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.MaxLengthAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.MaxLengthAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.ComponentModel.DataAnnotations.MaxLengthAttribute,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.MetadataTracker">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.MetadataTracker.Update(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.MetadataTracker.Track(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.MetadataTracker.Microsoft#EntityFrameworkCore#Internal#IReferenceRoot{Microsoft#EntityFrameworkCore#Metadata#Internal#ForeignKey}#Release(Microsoft.EntityFrameworkCore.Internal.Reference{Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ModelCleanupConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ModelCleanupConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,System.String,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.FindCandidateNavigationPropertyType(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.PropertyInfo,System.Type,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,System.Type,System.Reflection.PropertyInfo,System.Type,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo,System.Type,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeEntityTypeConvention`1.ApplyIgnored(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.PropertyInfo,System.Type,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeNavigationConvention`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeNavigationConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeNavigationConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation,`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationAttributeNavigationConvention`1.GetAttributes``1(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationEagerLoadingConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NavigationEagerLoadingConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NotMappedEntityTypeAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NotMappedEntityTypeAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NotMappedMemberAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NotMappedMemberAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NullConventionSetBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.NullConventionSetBuilder.AddConventions(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.OwnedEntityTypeAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.OwnedEntityTypeAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.OwnedAttribute)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyAttributeConvention`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyAttributeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyAttributeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.Reflection.FieldInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyAttributeConvention`1.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,`0,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.IsCandidatePrimitiveProperty(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyMappingValidationConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyMappingValidationConvention.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource,Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyMappingValidationConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyMappingValidationConvention.IsMappedPrimitiveProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyMappingValidationConvention.FindCandidateNavigationPropertyType(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.NavigationCandidatesAnnotationName">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.AmbiguousNavigationsAnnotationName">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.FindCandidateNavigationPropertyType(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipValidationConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationshipValidationConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RequiredNavigationAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RequiredNavigationAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RequiredNavigationAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation,System.ComponentModel.DataAnnotations.RequiredAttribute)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RequiredPropertyAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RequiredPropertyAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.ComponentModel.DataAnnotations.RequiredAttribute,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ServicePropertyDiscoveryConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ServicePropertyDiscoveryConvention.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource,Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ServicePropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ServicePropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ServicePropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ServicePropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.StringLengthAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.StringLengthAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.ComponentModel.DataAnnotations.StringLengthAttribute,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.TimestampAttributeConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.TimestampAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,System.ComponentModel.DataAnnotations.TimestampAttribute,System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.TypeMappingConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.TypeMappingConvention.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.TypeMappingConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ValueGeneratorConvention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ValueGeneratorConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ValueGeneratorConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ValueGeneratorConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ValueGeneratorConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ValueGeneratorConvention.GetValueGenerated(Microsoft.EntityFrameworkCore.Metadata.Internal.Property)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ValueGeneratorConvention.CanBeGenerated(Microsoft.EntityFrameworkCore.Metadata.Internal.Property)">
            <summary>
                Indicates whether the specified property can have the value generated by the store or by a non-temporary value generator
                when not set.
            </summary>
            <param name="property"> The key property that might be store generated. </param>
            <returns> A value indicating whether the specified property should have the value generated by the sto </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType">
            <summary>
                Represents an entity type in an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IEntityType.BaseType">
            <summary>
                Gets the base type of the entity. Returns null if this is not a derived type in an inheritance hierarchy.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IEntityType.DefiningNavigationName">
            <summary>
                Gets the name of the defining navigation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IEntityType.DefiningEntityType">
            <summary>
                Gets the defining entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IEntityType.QueryFilter">
            <summary>
                Gets the LINQ expression filter automatically applied to queries for this entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IEntityType.DefiningQuery">
            <summary>
                Gets the LINQ query used as the default source for queries of this type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IEntityType.IsQueryType">
            <summary>
                Gets whether this entity type is a query type.
            </summary>
            <returns> true if the entity type is a query type; otherwise false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindPrimaryKey">
            <summary>
                <para>
                    Gets primary key for this entity. Returns null if no primary key is defined.
                </para>
                <para>
                    To be a valid model, each entity type must have a primary key defined. Therefore, the primary key may be
                    null while the model is being created, but will be present by the time the model is used with a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
            </summary>
            <returns> The primary key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                Gets the primary or alternate key that is defined on the given properties. Returns null if no key is defined
                for the given properties.
            </summary>
            <param name="properties"> The properties that make up the key. </param>
            <returns> The key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetKeys">
            <summary>
                Gets the primary and alternate keys for this entity.
            </summary>
            <returns> The primary and alternate keys. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The foreign key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetForeignKeys">
            <summary>
                Gets the foreign keys defined on this entity.
            </summary>
            <returns> The foreign keys defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                Gets the index defined on the given properties. Returns null if no index is defined.
            </summary>
            <param name="properties"> The properties to find the index on. </param>
            <returns> The index, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetIndexes">
            <summary>
                Gets the indexes defined on this entity.
            </summary>
            <returns> The indexes defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindProperty(System.String)">
            <summary>
                <para>
                    Gets the property with a given name. Returns null if no property with the given name is defined.
                </para>
                <para>
                    This API only finds scalar properties and does not find navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" /> to find a navigation property.
                </para>
            </summary>
            <param name="name"> The name of the property. </param>
            <returns> The property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetProperties">
            <summary>
                <para>
                    Gets the properties defined on this entity.
                </para>
                <para>
                    This API only returns scalar properties and does not return navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" /> to get navigation properties.
                </para>
            </summary>
            <returns> The properties defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindServiceProperty(System.String)">
            <summary>
                <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IServiceProperty"/> with a given name. Returns null if no property with the given name is defined.
                </para>
                <para>
                    This API only finds service properties and does not find scalar or navigation properties.
                </para>
            </summary>
            <param name="name"> The name of the property. </param>
            <returns> The service property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetServiceProperties">
            <summary>
                <para>
                    Gets all the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IServiceProperty"/> defined on this entity.
                </para>
                <para>
                    This API only returns service properties and does not return scalar or navigation properties.
                </para>
            </summary>
            <returns> The service properties defined on this entity. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey">
            <summary>
                Represents a relationship where a foreign key property(s) in a dependent entity type
                reference a corresponding primary or alternate key in a principal entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.DeclaringEntityType">
            <summary>
                Gets the dependent entity type. This may be different from the type that <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.Properties" />
                are defined on when the relationship is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.Properties">
            <summary>
                Gets the foreign key properties in the dependent entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalEntityType">
            <summary>
                Gets the principal entity type that this relationship targets. This may be different from the type that
                <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalKey" /> is defined on when the relationship targets a derived type in an inheritance
                hierarchy (since the key is defined on the base type of the hierarchy).
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalKey">
            <summary>
                Gets the primary or alternate key that the relationship targets.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.DependentToPrincipal">
            <summary>
                Gets the navigation property on the dependent entity type that points to the principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalToDependent">
            <summary>
                Gets the navigation property on the principal entity type that points to the dependent entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.IsUnique">
            <summary>
                Gets a value indicating whether the values assigned to the foreign key properties are unique.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.IsRequired">
            <summary>
                Gets a value indicating if this relationship is required. If true, the dependent entity must always be
                assigned to a valid principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.IsOwnership">
            <summary>
                Gets or sets a value indicating whether this relationship defines ownership. If true, the dependent entity must always be
                accessed via the navigation from the principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKey.DeleteBehavior">
            <summary>
                Gets a value indicating how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IIndex">
            <summary>
                Represents an index on a set of properties.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IIndex.Properties">
            <summary>
                Gets the properties that this index is defined on.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IIndex.IsUnique">
            <summary>
                Gets a value indicating whether the values assigned to the indexed properties are unique.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IIndex.DeclaringEntityType">
            <summary>
                Gets the entity type the index is defined on. This may be different from the type that <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IIndex.Properties" />
                are defined on when the index is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IKey">
            <summary>
                Represents a primary or alternate key on an entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IKey.Properties">
            <summary>
                Gets the properties that make up the key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IKey.DeclaringEntityType">
            <summary>
                Gets the entity type the key is defined on. This may be different from the type that <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IKey.Properties" />
                are defined on when the key is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IModel">
            <summary>
                Metadata about the shape of entities, the relationships between them, and how they map to the database. A model is typically
                created by overriding the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method on a derived context, or
                using <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes">
            <summary>
                Gets all entity types defined in the model.
            </summary>
            <returns> All entity types defined in the model. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.String)">
            <summary>
                Gets the entity type with the given name. Returns null if no entity type with the given name is found
                or the entity type has a defining navigation.
            </summary>
            <param name="name"> The name of the entity type to find. </param>
            <returns> The entity type, or null if none are found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the entity type for the given name, defining navigation name
                and the defining entity type. Returns null if no matching entity type is found.
            </summary>
            <param name="name"> The name of the entity type to find. </param>
            <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
            <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
            <returns> The entity type, or null if none are found. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable">
            <summary>
                <para>
                    A class that exposes annotations that can be modified. Annotations allow for arbitrary metadata to be
                    stored on an object.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.Item(System.String)">
            <summary>
                Gets or sets the value of the annotation with the given name.
            </summary>
            <param name="name"> The key of the annotation. </param>
            <returns>
                The value of the existing annotation if an annotation with the specified name already exists. Otherwise, null.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.GetAnnotations">
            <summary>
                Gets all annotations on the current object.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.AddAnnotation(System.String,System.Object)">
            <summary>
                Adds an annotation to this object. Throws if an annotation with the specified name already exists.
            </summary>
            <param name="name"> The key of the annotation to be added. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The newly added annotation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.SetAnnotation(System.String,System.Object)">
            <summary>
                Sets the annotation stored under the given key. Overwrites the existing annotation if an
                annotation with the specified name already exists.
            </summary>
            <param name="name"> The ket of the annotation to be added. </param>
            <param name="value"> The value to be stored in the annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.FindAnnotation(System.String)">
            <summary>
                Gets the annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, null.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.RemoveAnnotation(System.String)">
            <summary>
                Removes the given annotation from this object.
            </summary>
            <param name="name"> The annotation to remove. </param>
            <returns> The annotation that was removed. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType">
            <summary>
                <para>
                    Represents an entity in an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.Model">
            <summary>
                Gets the model this entity belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.BaseType">
            <summary>
                Gets or sets the base type of the entity. Returns null if this is not a derived type in an inheritance hierarchy.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.QueryFilter">
            <summary>
                Gets or sets the LINQ expression filter automatically applied to queries for this entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.IsQueryType">
            <summary>
                Gets or sets whether this entity type is a query type.
            </summary>
            <returns> true if the entity type is a query type; otherwise false. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.DefiningQuery">
            <summary>
                Gets the LINQ query used as the default source for queries of this type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.SetPrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})">
            <summary>
                Sets the primary key for this entity.
            </summary>
            <param name="properties"> The properties that make up the primary key. </param>
            <returns> The newly created key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindPrimaryKey">
            <summary>
                <para>
                    Gets primary key for this entity. Returns null if no primary key is defined.
                </para>
                <para>
                    To be a valid model, each entity type must have a primary key defined. Therefore, the primary key may be
                    null while the model is being created, but will be present by the time the model is used with a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
            </summary>
            <returns> The primary key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})">
            <summary>
                Adds a new alternate key to this entity type.
            </summary>
            <param name="properties"> The properties that make up the alternate key. </param>
            <returns> The newly created key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                Gets the primary or alternate key that is defined on the given properties. Returns null if no key is defined
                for the given properties.
            </summary>
            <param name="properties"> The properties that make up the key. </param>
            <returns> The key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetKeys">
            <summary>
                Gets the primary and alternate keys for this entity.
            </summary>
            <returns> The primary and alternate keys. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                Removes a primary or alternate key from this entity.
            </summary>
            <param name="properties"> The properties that make up the key. </param>
            <returns> The key that was removed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Adds a new relationship to this entity.
            </summary>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The newly created foreign key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The foreign key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetForeignKeys">
            <summary>
                Gets the foreign keys defined on this entity.
            </summary>
            <returns> The foreign keys defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Removes a relationship from this entity.
            </summary>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The foreign key that was removed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})">
            <summary>
                Adds an index to this entity.
            </summary>
            <param name="properties"> The properties that are to be indexed. </param>
            <returns> The newly created index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                Gets the index defined on the given properties. Returns null if no index is defined.
            </summary>
            <param name="properties"> The properties to find the index on. </param>
            <returns> The index, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetIndexes">
            <summary>
                Gets the indexes defined on this entity.
            </summary>
            <returns> The indexes defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                Removes an index from this entity.
            </summary>
            <param name="properties"> The properties that make up the index. </param>
            <returns> The index that was removed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddProperty(System.String,System.Type)">
            <summary>
                Adds a property to this entity.
            </summary>
            <param name="name"> The name of the property to add. </param>
            <param name="propertyType"> The type of value the property will hold. </param>
            <returns> The newly created property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindProperty(System.String)">
            <summary>
                <para>
                    Gets the property with a given name. Returns null if no property with the given name is defined.
                </para>
                <para>
                    This API only finds scalar properties and does not find navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" /> to find
                    a navigation property.
                </para>
            </summary>
            <param name="name"> The name of the property. </param>
            <returns> The property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetProperties">
            <summary>
                <para>
                    Gets the properties defined on this entity.
                </para>
                <para>
                    This API only returns scalar properties and does not return navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" /> to get navigation
                    properties.
                </para>
            </summary>
            <returns> The properties defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveProperty(System.String)">
            <summary>
                Removes a property from this entity.
            </summary>
            <param name="name"> The name of the property to remove. </param>
            <returns> The property that was removed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddServiceProperty(System.Reflection.MemberInfo)">
            <summary>
                Adds a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty"/> to this entity.
            </summary>
            <param name="memberInfo"> The <see cref="T:System.Reflection.PropertyInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> of the property to add. </param>
            <returns> The newly created property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindServiceProperty(System.String)">
            <summary>
                <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty"/> with a given name. Returns null if no property with the given name is defined.
                </para>
                <para>
                    This API only finds service properties and does not find scalar or navigation properties.
                </para>
            </summary>
            <param name="name"> The name of the property. </param>
            <returns> The service property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetServiceProperties">
            <summary>
                <para>
                    Gets all the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty"/> defined on this entity.
                </para>
                <para>
                    This API only returns service properties and does not return scalar or navigation properties.
                </para>
            </summary>
            <returns> The service properties defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveServiceProperty(System.String)">
            <summary>
                Removes an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty"/> from this entity.
            </summary>
            <param name="name"> The name of the property to remove. </param>
            <returns> The property that was removed. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey">
            <summary>
                <para>
                    Represents a relationship where a foreign key property(s) in a dependent entity type
                    reference a corresponding primary or alternate key in a principal entity type.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" /> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.Properties">
            <summary>
                Gets the foreign key properties in the dependent entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalKey">
            <summary>
                Gets the primary or alternate key that the relationship targets.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.DeclaringEntityType">
            <summary>
                Gets the dependent entity type. This may be different from the type that <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.Properties" />
                are defined on when the relationship is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalEntityType">
            <summary>
                Gets the principal entity type that this relationship targets. This may be different from the type that
                <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalKey" /> is defined on when the relationship targets a derived type in an inheritance
                hierarchy (since the key is defined on the base type of the hierarchy).
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.DependentToPrincipal">
            <summary>
                Gets the navigation property on the dependent entity type that points to the principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalToDependent">
            <summary>
                Gets the navigation property on the principal entity type that points to the dependent entity.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.HasDependentToPrincipal(System.String)">
            <summary>
                Sets the navigation property on the dependent entity type that points to the principal entity.
            </summary>
            <param name="name">
                The name of the navigation property on the dependent type. Passing null will result in there being
                no navigation property defined.
            </param>
            <returns> The newly created navigation property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.HasDependentToPrincipal(System.Reflection.PropertyInfo)">
            <summary>
                Sets the navigation property on the dependent entity type that points to the principal entity.
            </summary>
            <param name="property">
                The navigation property on the dependent type. Passing null will result in there being
                no navigation property defined.
            </param>
            <returns> The newly created navigation property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.HasPrincipalToDependent(System.String)">
            <summary>
                Sets the navigation property on the principal entity type that points to the dependent entity.
            </summary>
            <param name="name">
                The name of the navigation property on the principal type. Passing null will result in there being
                no navigation property defined.
            </param>
            <returns> The newly created navigation property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.HasPrincipalToDependent(System.Reflection.PropertyInfo)">
            <summary>
                Sets the navigation property on the principal entity type that points to the dependent entity.
            </summary>
            <param name="property">
                The name of the navigation property on the principal type. Passing null will result in there being
                no navigation property defined.
            </param>
            <returns> The newly created navigation property. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.IsUnique">
            <summary>
                Gets or sets a value indicating whether the values assigned to the foreign key properties are unique.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.IsRequired">
            <summary>
                Gets or sets a value indicating whether this relationship is required. If true, the dependent entity must always be
                assigned to a valid principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.IsOwnership">
            <summary>
                Gets or sets a value indicating whether this relationship defines ownership. If true, the dependent entity must always be
                accessed via the navigation from the principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.DeleteBehavior">
            <summary>
                Gets or sets a value indicating how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex">
            <summary>
                <para>
                    Represents an index on a set of properties.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" /> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.IsUnique">
            <summary>
                Gets or sets a value indicating whether the values assigned to the indexed properties are unique.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.Properties">
            <summary>
                Gets the properties that this index is defined on.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.DeclaringEntityType">
            <summary>
                Gets the entity type the index is defined on. This may be different from the type that <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.Properties" />
                are defined on when the index is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableKey">
            <summary>
                <para>
                    Represents a primary or alternate key on an entity.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" /> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableKey.Properties">
            <summary>
                Gets the properties that make up the key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableKey.DeclaringEntityType">
            <summary>
                Gets the entity type the key is defined on. This may be different from the type that <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableKey.Properties" />
                are defined on when the key is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel">
            <summary>
                <para>
                    Metadata about the shape of entities, the relationships between them, and how they map to the database. A model is typically
                    created by overriding the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method on a derived context, or
                    using <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" />.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System.String)">
            <summary>
                <para>
                    Adds a shadow state entity type to the model.
                </para>
                <para>
                    Shadow entities are not currently supported in a model that is used at runtime with a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                    Therefore, shadow state entity types will only exist in migration model snapshots, etc.
                </para>
            </summary>
            <param name="name"> The name of the entity to be added. </param>
            <returns> The new entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System.Type)">
            <summary>
                Adds an entity type to the model.
            </summary>
            <param name="clrType"> The CLR class that is used to represent instances of the entity type. </param>
            <returns> The new entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Adds an entity type with a defining navigation to the model.
            </summary>
            <param name="name"> The name of the entity to be added. </param>
            <param name="definingNavigationName"> The defining navigation. </param>
            <param name="definingEntityType"> The defining entity type. </param>
            <returns> The new entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Adds an entity type with a defining navigation to the model.
            </summary>
            <param name="clrType"> The CLR class that is used to represent instances of this entity type. </param>
            <param name="definingNavigationName"> The defining navigation. </param>
            <param name="definingEntityType"> The defining entity type. </param>
            <returns> The new entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(System.String)">
            <summary>
                Gets the entity with the given name. Returns null if no entity type with the given name is found
                or the entity type has a defining navigation.
            </summary>
            <param name="name"> The name of the entity type to find. </param>
            <returns> The entity type, or null if none are found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Gets the entity type for the given name, defining navigation name
                and the defining entity type. Returns null if no matching entity type is found.
            </summary>
            <param name="name"> The name of the entity type to find. </param>
            <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
            <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
            <returns> The entity type, or null if none are found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(System.String)">
            <summary>
                Removes an entity type without a defining navigation from the model.
            </summary>
            <param name="name"> The name of the entity type to be removed. </param>
            <returns> The entity type that was removed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Removes an entity type with a defining navigation from the model.
            </summary>
            <param name="name"> The name of the entity to be removed. </param>
            <param name="definingNavigationName"> The defining navigation. </param>
            <param name="definingEntityType"> The defining entity type. </param>
            <returns> The entity type that was removed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.GetEntityTypes">
            <summary>
                Gets all entity types defined in the model.
            </summary>
            <returns> All entity types defined in the model. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddQueryType(System.Type)">
            <summary>
                Adds a query type to the model.
            </summary>
            <param name="type">The CLR class that is used to represent instances of the query type.</param>
            <returns>The query type.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation">
            <summary>
                <para>
                    Represents a navigation property which can be used to navigate a relationship.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" /> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.DeclaringEntityType">
            <summary>
                Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.ForeignKey">
            <summary>
                Gets the foreign key that defines the relationship this navigation property will navigate.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.IsEagerLoaded">
            <summary>
                Determines whether this navigation should be eager loaded by default.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty">
            <summary>
                <para>
                    Represents a scalar property of an entity.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.DeclaringEntityType">
            <summary>
                Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.IsNullable">
            <summary>
                Gets or sets a value indicating whether this property can contain null.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.ValueGenerated">
            <summary>
                Gets or sets a value indicating when a value for this property will be generated by the database. Even when the
                property is set to be generated by the database, EF may still attempt to save a specific value (rather than
                having one generated by the database) when the entity is added and a value is assigned, or the property is
                marked as modified for an existing entity. See <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.BeforeSaveBehavior" /> and <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.AfterSaveBehavior" />
                for more information.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.BeforeSaveBehavior">
            <summary>
                <para>
                    Gets a value indicating whether or not this property can be modified before the entity is
                    saved to the database.
                </para>
                <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a value is assigned to this property when it is in
                    the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
                <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any value
                    set will be ignored when it is in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.AfterSaveBehavior">
            <summary>
                <para>
                    Gets a value indicating whether or not this property can be modified before the entity is
                    saved to the database.
                </para>
                <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a new value is assigned to this property after the entity exists in the database.
                </para>
                <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any modification to the
                    property value of an entity that already exists in the database will be ignored.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.IsReadOnlyBeforeSave">
            <summary>
                This property is obsolete. Use <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.BeforeSaveBehavior" /> instead.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.IsReadOnlyAfterSave">
            <summary>
                This property is obsolete. Use <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.BeforeSaveBehavior" /> instead.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.IsStoreGeneratedAlways">
            <summary>
                This property is obsolete. Use <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.BeforeSaveBehavior" /> or <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.AfterSaveBehavior" /> instead.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.IsConcurrencyToken">
            <summary>
                Gets or sets a value indicating whether this property is used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase">
            <summary>
                <para>
                    Base type for navigation and scalar properties.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase" /> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType">
            <summary>
                Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase"/> in the Entity Framework model that represents an
                injected service from the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty.DeclaringEntityType">
            <summary>
                Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase">
            <summary>
                <para>
                    Represents a type in an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITypeBase" /> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.Model">
            <summary>
                Gets the model that this type belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.INavigation">
            <summary>
                Represents a navigation property which can be used to navigate a relationship.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.INavigation.DeclaringEntityType">
            <summary>
                Gets the entity type that this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.INavigation.ForeignKey">
            <summary>
                Gets the foreign key that defines the relationship this navigation property will navigate.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.INavigation.IsEagerLoaded">
            <summary>
                Determines whether this navigation should be eager loaded by default.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.AnnotatableExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.AnnotatableExtensions.AnnotationsToDebugString(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrAccessorFactory`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrAccessorFactory`1.Create(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrAccessorFactory`1.Create(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrAccessorFactory`1.CreateGeneric``3(System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.CollectionType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.#ctor(System.String,System.Func{`0,`1},System.Action{`0,`1},System.Func{`0,System.Action{`0,`1},`1},System.Func{`1})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Add(System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.AddRange(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Create">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Create(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.GetOrCreate(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Contains(System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Remove(System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrCollectionAccessorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrCollectionAccessorFactory.Create(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetter`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetter`2.#ctor(System.Func{`0,`1},System.Func{`0,System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetter`2.GetClrValue(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetter`2.HasDefaultValue(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetterFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetterFactory.CreateGeneric``3(System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetter`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetter`2.#ctor(System.Action{`0,`1})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetter`2.SetClrValue(System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetterFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetterFactory.CreateGeneric``3(System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.CollectionTypeFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.CollectionTypeFactory.TryFindTypeToInstantiate(System.Type,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.DataAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Convention">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Overrides(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Overrides(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.OverridesStrictly(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Max(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Max(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding.CreateConstructorExpression(Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding.ParameterBindings">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding.RuntimeType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.IPropertyParameterBindingFactory,Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ContextParameterBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ContextParameterBinding.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ContextParameterBinding.BindToParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ContextParameterBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ContextParameterBindingFactory.CanBind(System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ContextParameterBindingFactory.Bind(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable.GetAnnotations">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable.AddAnnotation(System.String,System.Object,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable.AddAnnotation(System.String,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable.SetAnnotation(System.String,System.Object,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable.GetOrAddAnnotation(System.String,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable.FindAnnotation(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable.RemoveAnnotation(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable.CreateAnnotation(System.String,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotation.#ctor(System.String,System.Object,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotation.GetConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotation.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.MaxLengthAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.UnicodeAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ProductVersionAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ValueGeneratorFactoryAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.PropertyAccessModeAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.NavigationAccessModeAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.OwnedTypesAnnotation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ConstructorBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.TypeMapping">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ValueConverter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ValueComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.KeyValueComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ProviderClrType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView`1.#ctor(`0,System.Func{`0,System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView`1.View">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.DefaultServiceParameterBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DefaultServiceParameterBinding.#ctor(System.Type,System.Type,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DefaultServiceParameterBinding.BindToParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.DirectConstructorBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DirectConstructorBinding.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DirectConstructorBinding.Constructor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DirectConstructorBinding.CreateConstructorExpression(Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DirectConstructorBinding.RuntimeType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.CreateReadValueExpression(System.Linq.Expressions.Expression,System.Type,System.Int32,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValueMethod">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.ThrowReadValueExceptionMethod">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.CreateReadValueCallExpression(System.Linq.Expressions.Expression,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.CreateMaterializeExpression(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Linq.Expressions.Expression,System.Int32[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.GetMaterializer(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.#ctor(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.Model,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.Model,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.#ctor(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Builder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.BaseType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.QueryFilter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.DefiningQuery">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.IsQueryType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.DefiningNavigationName">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.DefiningEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.HasBaseType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.OnTypeRemoved">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetBaseTypeConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDirectlyDerivedTypes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedTypes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedTypesInclusive">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.RootType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.ClearCaches">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.ChangeTrackingStrategy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.OnAnnotationSet(System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                Runs the conventions when an annotation was set or removed.
            </summary>
            <param name="name"> The key of the set annotation. </param>
            <param name="annotation"> The annotation set. </param>
            <param name="oldAnnotation"> The old annotation. </param>
            <returns> The annotation that was set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindMembersInHierarchy(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Property)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.SetPrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Property)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrSetPrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindPrimaryKey">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDeclaredPrimaryKey">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindPrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetPrimaryKeyConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.SetPrimaryKeyConfigurationSource(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.UpdatePrimaryKeyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Property,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Property)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrAddKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDeclaredKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDeclaredKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.RemoveKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Property,Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Property,Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrAddForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindForeignKeys(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDeclaredForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedForeignKeysInclusive">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDeclaredForeignKeys(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDeclaredForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDerivedForeignKeys(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDerivedForeignKeys(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindForeignKeysInHierarchy(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindForeignKeysInHierarchy(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.RemoveForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetReferencingForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDeclaredReferencingForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedReferencingForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedReferencingForeignKeysInclusive">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddNavigation(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindNavigation(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindNavigation(System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDeclaredNavigation(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDeclaredNavigations">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedNavigations">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedNavigationsInclusive">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDerivedNavigations(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindNavigationsInHierarchy(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.RemoveNavigation(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetNavigations">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddIndex(Microsoft.EntityFrameworkCore.Metadata.Internal.Property,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.Internal.Property)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrAddIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDeclaredIndexes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedIndexes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDerivedIndexesInclusive">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDeclaredIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDerivedIndexes(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindIndexesInHierarchy(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.RemoveIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetIndexes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddProperty(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddProperty(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrAddProperty(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrAddProperty(System.String,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindProperty(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindProperty(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDeclaredProperty(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDeclaredProperties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDerivedProperties(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDerivedPropertiesInclusive(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindPropertiesInHierarchy(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.RemoveProperty(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetProperties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.PropertyMetadataChanged">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Counts">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.RelationshipSnapshotFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.OriginalValuesFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.ShadowValuesFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.EmptyShadowValuesFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddServiceProperty(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindServiceProperty(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindServiceProperty(System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDeclaredServiceProperty(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDerivedServiceProperties(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindDerivedServicePropertiesInclusive(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindServicePropertiesInHierarchy(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetOrAddServiceProperty(System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.RemoveServiceProperty(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetServiceProperties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetDeclaredServiceProperties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.FindIgnoredMemberConfigurationSource(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.OnTypeMemberIgnored(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.GetData(System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddData(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Snapshot">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Snapshot.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder},System.Collections.Generic.List{System.ValueTuple{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource}}},System.Collections.Generic.List{System.ValueTuple{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Snapshot}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Snapshot.Attach(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.DebugView">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShortName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.DisplayName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindOwnership(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindOwnership(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredOwnership(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredOwnership(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInOwnershipPath(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.UseEagerSnapshots(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.StoreGeneratedCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.RelationshipPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.OriginalValueCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShadowPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.NavigationCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.PropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CalculateCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetRelationshipSnapshotFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetOriginalValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetEmptyShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetConcreteTypesInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsSameHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredServiceProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetPropertiesAndNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetNotificationProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetData(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckPropertyBelongsToType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.AsEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeParameterBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeParameterBinding.#ctor(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeParameterBinding.BindToParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeParameterBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeParameterBindingFactory.CanBind(System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeParameterBindingFactory.Bind(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypePathComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypePathComparer.Instance">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypePathComparer.Compare(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypePathComparer.GetHashCode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.FactoryMethodConstructorBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.FactoryMethodConstructorBinding.#ctor(System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding},System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.FactoryMethodConstructorBinding.#ctor(System.Object,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding},System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.FactoryMethodConstructorBinding.CreateConstructorExpression(Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.FactoryMethodConstructorBinding.RuntimeType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.Properties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.PrincipalKey">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.DeclaringEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.PrincipalEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.Builder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetForeignKeyPropertiesConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdateForeignKeyPropertiesConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetPrincipalKeyConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdatePrincipalKeyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetPrincipalEndConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.SetPrincipalEndConfigurationSource(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdatePrincipalEndConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.DependentToPrincipal">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.HasDependentToPrincipal(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.HasDependentToPrincipal(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetDependentToPrincipalConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdateDependentToPrincipalConfigurationSource(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.PrincipalToDependent">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.HasPrincipalToDependent(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.HasPrincipalToDependent(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetPrincipalToDependentConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdatePrincipalToDependentConfigurationSource(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.Navigation(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.IsUnique">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.SetIsUnique(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetIsUniqueConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdateIsUniqueConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.IsRequired">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.SetIsRequired(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetIsRequiredConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.SetIsRequiredConfigurationSource(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdateIsRequiredConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.DeleteBehavior">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.SetDeleteBehavior(Microsoft.EntityFrameworkCore.DeleteBehavior,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetDeleteBehaviorConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdateDeleteBehaviorConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.IsOwnership">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.SetIsOwnership(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.GetIsOwnershipConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.UpdateIsOwnershipConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.FindNavigationsFrom(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.FindNavigationsFromInHierarchy(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.FindNavigationsTo(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.FindNavigationsToInHierarchy(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.ResolveOtherEntityTypeInHierarchy(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.ResolveOtherEntityType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.ResolveEntityTypeInHierarchy(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.CanPropertiesBeRequired(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.AreCompatible(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.DependentKeyValueFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.DependentsMapFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey.DebugView">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyComparer.Instance">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyComparer.Compare(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyComparer.Equals(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyComparer.GetHashCode(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsSelfReferencing(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsIntraHierarchical(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsSelfPrimaryKeyReferencing(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsFrom(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsFromInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsTo(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsToInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveOtherEntityType(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveOtherEntityTypeInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveEntityTypeInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.GetDependentKeyValueFactory``1(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.CreateDependentsMapFactory(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Boolean,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.AsForeignKey(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Add(System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.AddRange(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Contains(System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Remove(System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Create">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Create(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.GetOrCreate(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.CollectionType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertyGetter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertyGetter.GetClrValue(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertyGetter.HasDefaultValue(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter.SetClrValue(System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource.CreateReadValueExpression(System.Linq.Expressions.Expression,System.Type,System.Int32,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource.CreateReadValueCallExpression(System.Linq.Expressions.Expression,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource.CreateMaterializeExpression(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Linq.Expressions.Expression,System.Int32[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource.GetMaterializer(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.FindCandidateNavigationPropertyType(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Index">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.Properties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.DeclaringEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.Builder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.GetConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.IsUnique">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.SetIsUnique(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.GetIsUniqueConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.OnAnnotationSet(System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                Runs the conventions when an annotation was set or removed.
            </summary>
            <param name="name"> The key of the set annotation. </param>
            <param name="annotation"> The annotation set. </param>
            <param name="oldAnnotation"> The old annotation. </param>
            <returns> The annotation that was set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.GetNullableValueFactory``1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Index.DebugView">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.GetNullableValueFactory``1(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.AsIndex(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Boolean,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.ServiceProperty(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanAddNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanAddOrReplaceNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.IsIgnored(System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Ignore(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasQueryFilter(System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasDefiningQuery(System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasBaseType(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasBaseType(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasBaseType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachAllMembers(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveShadowPropertiesIfUnused(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveIndex(Microsoft.EntityFrameworkCore.Metadata.Internal.Index,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(System.String,System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(System.String,System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(System.Type,System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(System.Type,System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.MemberInfo,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.String,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.Type,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.Type,System.Reflection.MemberInfo,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveNonOwnershipRelationships(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Navigation(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Navigation(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CreateForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,System.String,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.ReUniquifyTemporaryProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetActualProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.Index,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder.IsUnique(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder.Attach(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder.Attach(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder.Metadata">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder.ModelBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder.HasAnnotation(System.String,System.Object,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder.CanSetAnnotation(System.String,System.Object,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder.RemoveAnnotation(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder.MergeAnnotationsFrom(Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder.MergeAnnotationsFrom(Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder`1.#ctor(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataBuilder`1.Metadata">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataItemBuilder`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataItemBuilder`1.#ctor(`0,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataItemBuilder`1.ModelBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.Model)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.ModelBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Entity(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Entity(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Query(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Entity(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Entity(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Owned(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Owned(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.IsIgnored(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.IsIgnored(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Ignore(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Ignore(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.RemoveEntityTypesUnreachableByNavigations(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.FindLeastDerivedEntityTypes(System.Type,System.Func{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.Property,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.IsRequired(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.CanSetRequired(System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.HasMaxLength(System.Int32,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.IsUnicode(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.HasValueGenerator(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.HasValueGenerator(System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.HasField(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.HasFieldInfo(System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.HasConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.HasConversion(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.IsConcurrencyToken(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.BeforeSave(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.AfterSave(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.ValueGenerated(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ValueGenerated},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder.Attach(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.DependentToPrincipal(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.DependentToPrincipal(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.PrincipalToDependent(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.PrincipalToDependent(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.Navigations(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.Navigations(System.Reflection.MemberInfo,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.Navigations(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.Navigations(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.Navigations(System.Reflection.MemberInfo,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.CanSetNavigation(System.String,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.CanSetNavigation(System.Reflection.PropertyInfo,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.IsRequired(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.CanSetRequired(System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.IsOwnership(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.IsWeakTypeDefinition(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.DeleteBehavior(Microsoft.EntityFrameworkCore.DeleteBehavior,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.CanSetDeleteBehavior(Microsoft.EntityFrameworkCore.DeleteBehavior,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.IsUnique(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.DependentEntityType(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.DependentEntityType(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.DependentEntityType(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.DependentEntityType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.PrincipalEntityType(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.PrincipalEntityType(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.PrincipalEntityType(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.PrincipalEntityType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.RelatedEntityTypes(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.CanInvert(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.HasForeignKey(System.Collections.Generic.IReadOnlyList{System.Reflection.MemberInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.HasForeignKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.HasForeignKey(System.Collections.Generic.IReadOnlyList{System.Reflection.MemberInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.HasForeignKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.HasForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.HasForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.HasPrincipalKey(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.HasPrincipalKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.HasPrincipalKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.FindCurrentRelationshipBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.Attach(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.HasField(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.HasFieldInfo(System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.SetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories.FindFactory(System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactory.CanBind(System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactory.Bind(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IPropertyParameterBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IPropertyParameterBindingFactory.TryBindParameter(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Key">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.Properties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.DeclaringEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.Builder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.GetConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.GetReferencingForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.IdentityMapFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.WeakReferenceIdentityMapFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.GetPrincipalKeyValueFactory``1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.ReferencingForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Key.DebugView">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetIdentityMapFactory(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetWeakReferenceIdentityMapFactory(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetPrincipalKeyValueFactory``1(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.IsPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.IndexOf(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Boolean,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.AsKey(Microsoft.EntityFrameworkCore.Metadata.IKey,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.LazyLoaderParameterBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.LazyLoaderParameterBindingFactory.#ctor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.LazyLoaderParameterBindingFactory.CanBind(System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.LazyLoaderParameterBindingFactory.Bind(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.MemberClassifier">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MemberClassifier.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource,Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MemberClassifier.FindCandidateNavigationPropertyType(System.Reflection.PropertyInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Model">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.#ctor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.ChangeTrackingStrategy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.ConventionDispatcher">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Builder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetEntityTypes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddQueryType(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetOrAddEntityType(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetOrAddEntityType(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetDisplayName(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.HasEntityTypeWithDefiningNavigation(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.HasEntityTypeWithDefiningNavigation(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.String,System.String,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetEntityTypes(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetEntityTypes(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Ignore(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Ignore(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindIgnoredTypeConfigurationSource(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindIgnoredTypeConfigurationSource(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Unignore(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Unignore(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.OnAnnotationSet(System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                Runs the conventions when an annotation was set or removed.
            </summary>
            <param name="name"> The key of the set annotation. </param>
            <param name="annotation"> The annotation set. </param>
            <param name="oldAnnotation"> The old annotation. </param>
            <returns> The annotation that was set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Validate">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.DebugView">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.GetProductVersion(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.SetProductVersion(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ShouldBeOwnedType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ShouldBeOwnedType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.MarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.MarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.UnmarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.UnmarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.GetRootEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.AsModel(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelNavigationsGraphAdapter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelNavigationsGraphAdapter.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.Model)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelNavigationsGraphAdapter.Vertices">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelNavigationsGraphAdapter.GetOutgoingNeighbours(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelNavigationsGraphAdapter.GetIncomingNeighbours(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.AddData(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions.SetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions.AsServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.#ctor(System.String,System.Reflection.PropertyInfo,System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.ClrType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.ForeignKey">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Builder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsEagerLoaded">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DeclaringEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DeclaringType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.PropertyMetadataChanged">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetClrMember(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible(System.String,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible(System.Reflection.MemberInfo,System.Type,System.Type,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.FindInverse">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetTargetType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.CollectionAccessor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DebugView">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.GetCollectionAccessor(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.AsNavigation(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.NullableEnumClrPropertySetter`3">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NullableEnumClrPropertySetter`3.#ctor(System.Action{`0,`1})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NullableEnumClrPropertySetter`3.SetClrValue(System.Object,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ObjectArrayParameterBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ObjectArrayParameterBinding.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ObjectArrayParameterBinding.BindToParameter(Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding.ParameterType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding.ConsumedProperties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBinding.BindToParameter(Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingFactories">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingFactories.#ctor(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactory},Microsoft.EntityFrameworkCore.Internal.IRegisteredServices)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingFactories.FindFactory(System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Linq.Expressions.Expression,System.Int32[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo.EntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo.MaterializationContextExpression">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo.GetValueBufferIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot.#ctor(System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder},System.Collections.Generic.List{System.ValueTuple{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource}}},System.Collections.Generic.List{System.ValueTuple{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Snapshot}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot.Add(System.Collections.Generic.List{System.ValueTuple{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Snapshot}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot.Add(System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot.Add(System.Collections.Generic.List{System.ValueTuple{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource}}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot.Attach(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Property">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.#ctor(System.String,System.Type,System.Reflection.PropertyInfo,System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.DeclaringEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.PropertyMetadataChanged">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.DeclaringType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.ClrType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.Builder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.SetConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetTypeConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.UpdateTypeConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.IsNullable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.SetIsNullable(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetIsNullableConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.OnFieldInfoSet(System.Reflection.FieldInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.ValueGenerated">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.SetValueGenerated(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ValueGenerated},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetValueGeneratedConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.BeforeSaveBehavior">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.SetBeforeSaveBehavior(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetBeforeSaveBehaviorConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.AfterSaveBehavior">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.SetAfterSaveBehavior(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetAfterSaveBehaviorConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.IsReadOnlyBeforeSave">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.IsReadOnlyAfterSave">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.IsConcurrencyToken">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.SetIsConcurrencyToken(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetIsConcurrencyTokenConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.IsStoreGeneratedAlways">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetContainingForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetContainingKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.GetContainingIndexes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.OnAnnotationSet(System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)">
            <summary>
                Runs the conventions when an annotation was set or removed.
            </summary>
            <param name="name"> The key of the set annotation. </param>
            <param name="annotation"> The annotation set. </param>
            <param name="oldAnnotation"> The old annotation. </param>
            <returns> The annotation that was set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.Format(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.Format(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.AreCompatible(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.PrimaryKey">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.Keys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.ForeignKeys">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.Indexes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Property.DebugView">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.#ctor(System.Delegate,System.Delegate,System.Delegate,System.Delegate,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.CurrentValueGetter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.PreStoreGeneratedCurrentValueGetter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.OriginalValueGetter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.RelationshipSnapshotGetter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.ValueBufferGetter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessorsFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessorsFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.#ctor(System.String,System.Reflection.PropertyInfo,System.Reflection.FieldInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.Name">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.DeclaringType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.IsShadowProperty">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.PropertyInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.FieldInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.SetField(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.GetFieldInfo(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase,System.String,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.SetFieldInfo(System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.IsCompatible(System.Reflection.FieldInfo,System.Type,System.Type,System.String,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.PropertyIndexes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.PropertyMetadataChanged">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.OnFieldInfoSet(System.Reflection.FieldInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.GetFieldInfoConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.ClrType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.Getter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.Setter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase.Accessors">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetStoreGeneratedIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetRelationshipIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyIndexes(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.SetIndexes(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyAccessors(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetGetter(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetSetter(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetIdentifyingMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.TryGetMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean,System.Boolean,System.Reflection.MemberInfo@,System.String@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.AsPropertyBase(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts.PropertyCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts.NavigationCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts.OriginalValueCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts.ShadowCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts.RelationshipCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts.StoreGeneratedCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ForAdd(Microsoft.EntityFrameworkCore.Metadata.ValueGenerated)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ForUpdate(Microsoft.EntityFrameworkCore.Metadata.ValueGenerated)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetContainingEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetGenerationProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresValueGenerator(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets a value indicating whether this property requires a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> to generate
                values when new entities are added to the context.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.MayBeStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.IsKeyOrForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipal(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipals(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.AsProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity.#ctor(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity.#ctor(System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity.IsNone">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity.None">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity.Create(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity.Create(System.Reflection.MemberInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity.Create(Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity.Name">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIdentity.Property">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.Index">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.OriginalValueIndex">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.ShadowIndex">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.RelationshipIndex">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.StoreGenerationIndex">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyListComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyListComparer.Instance">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyListComparer.Compare(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyListComparer.Equals(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyListComparer.GetHashCode(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyParameterBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyParameterBinding.#ctor(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyParameterBinding.BindToParameter(Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyParameterBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyParameterBindingFactory.TryBindParameter(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceMethodParameterBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceMethodParameterBinding.#ctor(System.Type,System.Type,System.Reflection.MethodInfo,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceMethodParameterBinding.Method">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceMethodParameterBinding.BindToParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding.#ctor(System.Type,System.Type,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding.ServiceType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding.BindToParameter(Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding.BindToParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding.ServiceDelegate">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBindingFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBindingFactory.#ctor(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBindingFactory.CanBind(System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBindingFactory.Bind(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Type,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.#ctor(System.String,System.Reflection.PropertyInfo,System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.DeclaringEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.DeclaringType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.PropertyMetadataChanged">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.ClrType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.Builder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.GetConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.ParameterBinding">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.SetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.GetParameterBindingConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty.DebugView">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.GetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.IServiceProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IServiceProperty,System.Boolean,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.AsServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IServiceProperty,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.#ctor(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.Model,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.Model,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.ClrType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.Model">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.Name">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.GetConfigurationSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.PropertyMetadataChanged">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.GetRuntimeProperties">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.GetRuntimeFields">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.ClearCaches">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.Ignore(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.OnTypeMemberIgnored(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.GetIgnoredMembers">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.FindDeclaredIgnoredMemberConfigurationSource(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.FindIgnoredMemberConfigurationSource(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase.Unignore(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.DisplayName(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.HasClrType(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.IsAbstract(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity.#ctor(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.Model)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity.Name">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity.Type">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IProperty">
            <summary>
                Represents a scalar property of an entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType">
            <summary>
                Gets the entity type that this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsNullable">
            <summary>
                Gets a value indicating whether this property can contain null.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior">
            <summary>
                <para>
                    Gets a value indicating whether or not this property can be modified before the entity is
                    saved to the database.
                </para>
                <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a value is assigned to this property when it is in
                    the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
                <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any value
                    set will be ignored when it is in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.AfterSaveBehavior">
            <summary>
                <para>
                    Gets a value indicating whether or not this property can be modified after the entity is
                    saved to the database.
                </para>
                <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a new value is assigned to this property after the entity exists in the database.
                </para>
                <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any modification to the
                    property value of an entity that already exists in the database will be ignored.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsReadOnlyBeforeSave">
            <summary>
                This property is obsolete. Use <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior" /> instead.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsReadOnlyAfterSave">
            <summary>
                This property is obsolete. Use <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior" /> instead.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsStoreGeneratedAlways">
            <summary>
                This property is obsolete. Use <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior" /> or <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.AfterSaveBehavior" /> instead.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.ValueGenerated">
            <summary>
                Gets a value indicating when a value for this property will be generated by the database. Even when the
                property is set to be generated by the database, EF may still attempt to save a specific value (rather than
                having one generated by the database) when the entity is added and a value is assigned, or the property is
                marked as modified for an existing entity. See <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior" /> and <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.AfterSaveBehavior" />
                for more information.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsConcurrencyToken">
            <summary>
                Gets a value indicating whether this property is used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.ClrType">
            <summary>
                Gets the type of value that this property holds.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsShadowProperty">
            <summary>
                Gets a value indicating whether this is a shadow property. A shadow property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase">
            <summary>
                Base type for navigation and scalar properties.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.Name">
            <summary>
                Gets the name of the property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringType">
            <summary>
                Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.ClrType">
            <summary>
                Gets the type of value that this property holds.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.PropertyInfo">
            <summary>
                Gets the <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.PropertyInfo" /> for the underlying CLR property that this
                object represents. This may be null for shadow properties or properties mapped directly to fields.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.FieldInfo">
            <summary>
                Gets the <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.FieldInfo" /> for the underlying CLR field that this
                object represents. This may be null for shadow properties or if the backing field for the
                property is not known.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.IsShadowProperty">
            <summary>
                Gets a value indicating whether this is a shadow property. A shadow property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IServiceProperty">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase"/> in the Entity Framework model that represents an
                injected service from the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IServiceProperty.DeclaringEntityType">
            <summary>
                Gets the entity type that this property belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ITypeBase">
            <summary>
                Represents a type in an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITypeBase.Model">
            <summary>
                Gets the model that this type belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITypeBase.Name">
            <summary>
                Gets the name of this type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITypeBase.ClrType">
            <summary>
                <para>
                    Gets the CLR class that is used to represent instances of this type. Returns null if the type does not have a
                    corresponding CLR class (known as a shadow type).
                </para>
                <para>
                    Shadow types are not currently supported in a model that is used at runtime with a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                    Therefore, shadow types will only exist in migration model snapshots, etc.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior">
            <summary>
                Indicates how changes to the value of a property will be handled by Entity Framework change tracking
                which in turn will determine whether the value set is sent to the database or not.
                Used with <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.BeforeSaveBehavior" /> and
                <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.AfterSaveBehavior" />
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Save">
            <summary>
                The value set or changed will be sent to the database in the normal way.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore">
            <summary>
                Any value set or changed will be ignored.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw">
            <summary>
                If an explicit value is set or the value is changed, then an exception will be thrown.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.SimpleModelFactory">
            <summary>
                <para>
                    Creates instances of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" /> that have no conventions. This is useful when
                    Exhaustively configuring a model based on some existing metadata.
                </para>
                <para>
                    This is typically not used in application code since building a model by overriding
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" /> or using <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
                    directly is much easier.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.SimpleModelFactory.Create">
            <summary>
                Creates an empty model with no conventions. All aspects of the model must be exhaustively configured.
            </summary>
            <returns> The newly created model. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated">
            <summary>
                <para>
                    Indicates when a value for a property will be generated by the database.
                </para>
                <para>
                    Even when a property is set to be generated by the database, EF may still attempt to save
                    a specific value (rather than having one generated by the database) when an entity is added
                    and a value is assigned, or the property is marked as modified for an existing entity.
                    See <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" /> for more details.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.Never">
            <summary>
                A value is never generated by the database.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd">
            <summary>
                A value is generated by the database when an entity is first added to the database. The most common
                scenario for this is generated primary key values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnUpdate">
            <summary>
                No value is generated when the entity is first added to the database, but a value will be read
                from the database whenever the entity is subsequently updated.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate">
            <summary>
                A value is read from the database when the entity is first added and whenever the entity
                is subsequently updated. This is typically used for computed columns and scenarios such as
                rowversions, timestamps, etc.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ModelBuilder">
            <summary>
                <para>
                    Provides a simple API surface for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" /> that defines the shape of your
                    entities, the relationships between them, and how they map to the database.
                </para>
                <para>
                    You can use <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> to construct a model for a context by overriding
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" /> on your derived context. Alternatively you can create the
                    model externally and set it on a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> instance that is passed to the context constructor.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> class that will
                apply a set of conventions.
            </summary>
            <param name="conventions"> The conventions to be applied to the model. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ModelBuilder.Model">
            <summary>
                The model being configured.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the model. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ModelBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalModelBuilder}#Instance">
            <summary>
                <para>
                    The internal <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> being used to configure this model.
                </para>
                <para>
                    This property is intended for use by extension methods to configure the model. It is not intended to be used in
                    application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1">
            <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.Type)">
            <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
            <param name="type"> The entity type to be configured. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.String)">
            <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If an entity type with the provided name is not already part of the model,
                a new entity type that does not have a corresponding CLR type will be added to the model.
            </summary>
            <param name="name"> The name of the entity type to be configured. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0}})">
            <summary>
                <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <param name="buildAction"> An action that performs configuration of the entity type. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.Type,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})">
            <summary>
                <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
            </summary>
            <param name="type"> The entity type to be configured. </param>
            <param name="buildAction"> An action that performs configuration of the entity type. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})">
            <summary>
                <para>
                    Performs configuration of a given entity type in the model.
                    If an entity type with the provided name is not already part of the model,
                    a new entity type that does not have a corresponding CLR type will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.String)" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
            </summary>
            <param name="name"> The name of the entity type to be configured. </param>
            <param name="buildAction"> An action that performs configuration of the entity type. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query``1">
            <summary>
                Returns an object that can be used to configure a given query type in the model.
                If the query type is not already part of the model, it will be added to the model.
            </summary>
            <typeparam name="TQuery"> The query type to be configured. </typeparam>
            <returns> An object that can be used to configure the query type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query(System.Type)">
            <summary>
                Returns an object that can be used to configure a given query type in the model.
                If the query type is not already part of the model, it will be added to the model.
            </summary>
            <param name="type"> The query type to be configured. </param>
            <returns> An object that can be used to configure the query type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query``1(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0}})">
            <summary>
                <para>
                    Performs configuration of a given query type in the model. If the query type is not already part
                    of the model, it will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the query type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the query type.
                </para>
            </summary>
            <typeparam name="TQuery"> The query type to be configured. </typeparam>
            <param name="buildAction"> An action that performs configuration of the query type. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query(System.Type,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder})">
            <summary>
                <para>
                    Performs configuration of a given query type in the model. If the query type is not already part
                    of the model, it will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the query type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the query type.
                </para>
            </summary>
            <param name="type"> The query type to be configured. </param>
            <param name="buildAction"> An action that performs configuration of the query type. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Ignore``1">
            <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
            <typeparam name="TEntity"> The  entity type to be removed from the model. </typeparam>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Ignore(System.Type)">
            <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
            <param name="type"> The entity type to be removed from the model. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.ApplyConfiguration``1(Microsoft.EntityFrameworkCore.IEntityTypeConfiguration{``0})">
            <summary>
                Applies configuration that is defined in an <see cref="T:Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1" /> instance.
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <param name="configuration"> The configuration to be applied. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.ApplyConfiguration``1(Microsoft.EntityFrameworkCore.IQueryTypeConfiguration{``0})">
            <summary>
                Applies configuration that is defined in an <see cref="T:Microsoft.EntityFrameworkCore.IQueryTypeConfiguration`1" /> instance.
            </summary>
            <typeparam name="TQuery"> The query type to be configured. </typeparam>
            <param name="configuration"> The configuration to be applied. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Owned``1">
            <summary>
                Marks an entity type as owned. All references to this type will be configured as
                separate owned type instances.
            </summary>
            <typeparam name="T"> The entity type to be configured. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Owned(System.Type)">
            <summary>
                Marks an entity type as owned. All references to this type will be configured as
                separate owned type instances.
            </summary>
            <param name="type"> The entity type to be configured. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)">
            <summary>
                Configures the default <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this model.
                This strategy indicates how the context detects changes to properties for an instance of an entity type.
            </summary>
            <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)">
            <summary>
                <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
                <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties in the model as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
            </summary>
            <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this model. </param>
            <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ModelBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.PropertyAccessMode">
            <summary>
                <para>
                    Pass a value from this enum to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />,
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />, or
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" /> to change whether the property
                    or backing field will be used when reading and writing to a property or field.
                </para>
                <para>
                    If no access mode is set, then the backing field for a property will be used if possible
                    when constructing new instances of the entity. The property getter or setter will be used,
                    if possible, for all other accesses of the property. Note that when it is not possible
                    to use the field because it could not be found by convention and was not specified using
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder.HasField(System.String)" />, then the property will be used instead. Likewise,
                    when it is not possible to use the property getter or setter, for example when the
                    property is read-only, then the field will be used instead.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.PropertyAccessMode.Field">
            <summary>
                <para>
                    Enforces that all accesses to the property must go through the field.
                </para>
                <para>
                    An exception will be thrown if this mode is set and it is not possible to read
                    from or write to the field.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.PropertyAccessMode.FieldDuringConstruction">
            <summary>
                <para>
                    Enforces that all accesses to the property must go through the field when
                    new instances are being constructed. New instances are typically constructed when
                    entities are queried from the database.
                    An exception will be thrown if this mode is set and it is not possible to
                    write to the field.
                </para>
                <para>
                    All other uses of the property will go through the property getters and setters,
                    unless this is not possible because, for example, the property is read-only, in which
                    case these accesses will also use the field.
                </para>
                <para>
                    This access mode is similar to the default mode used if none has been set except
                    that it will throw an exception if it is not possible to write to the field for
                    entity construction. The default access mode will fall back to using the property
                    instead.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.PropertyAccessMode.Property">
            <summary>
                <para>
                    Enforces that all accesses to the property must go through the property
                    getters and setters, even when new objects are being constructed.
                </para>
                <para>
                    An exception will be thrown if this mode is set and it is not possible to read
                    from or write to the property, for example because it is read-only.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.QueryTrackingBehavior">
            <summary>
                Indicates how the results of a query are tracked by the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" />.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.QueryTrackingBehavior.TrackAll">
            <summary>
                The change tracker will keep track of changes for all entities that are returned from a LINQ query.
                Any modification to the entity instances will be detected and persisted to the database during
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.QueryTrackingBehavior.NoTracking">
            <summary>
                <para>
                    The change tracker will not track any of the entities that are returned from a LINQ query. If the
                    entity instances are modified, this will not be detected by the change tracker and
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> will not persist those changes to the database.
                </para>
                <para>
                    Disabling change tracking is useful for read-only scenarios because it avoids the overhead of setting
                    up change tracking for each entity instance. You should not disable change tracking if you want to
                    manipulate entity instances and persist those changes to the database using
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
                </para>
                <para>
                    Identity resolution will still be performed to ensure that all occurrences of an entity with a given key
                    in the result set are represented by the same entity instance.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1">
            <summary>
                Represents an asynchronous sequence produced by executing a compiled query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.#ctor(System.Collections.Generic.IAsyncEnumerable{`0})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
            </summary>
            <param name="asyncEnumerable">The underlying <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> instance.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates a <see cref="T:System.Collections.Generic.List`1" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToArrayAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates an array from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains an array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.LoadAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it asynchronously according to a specified key selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it
                asynchronously
                according to a specified key selector function and a comparer.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it asynchronously according to a specified key selector and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it asynchronously according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="action"> The action to perform on each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator">
            <summary>
                <para>
                    Creates keys that uniquely identifies a query. This is used to store and lookup
                    compiled versions of a query in a cache.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.Dependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.GenerateCacheKey(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                Generates the cache key for the given query.
            </summary>
            <param name="query"> The query to get the cache key for. </param>
            <param name="async"> A value indicating whether the query will be executed asynchronously. </param>
            <returns> The cache key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.GenerateCacheKeyCore(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                Generates the cache key for the given query.
            </summary>
            <param name="query"> The query to get the cache key for. </param>
            <param name="async"> A value indicating whether the query will be executed asynchronously. </param>
            <returns> The cache key. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.CompiledQueryCacheKey">
            <summary>
                <para>
                    A key that uniquely identifies a query. This is used to store and lookup
                    compiled versions of a query in a cache.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.CompiledQueryCacheKey.#ctor(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.QueryTrackingBehavior,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.CompiledQueryCacheKey" /> class.
            </summary>
            <param name="query"> The query to generate the key for. </param>
            <param name="model"> The model that queries is written against. </param>
            <param name="queryTrackingBehavior"> The tracking behavior for results of the query. </param>
            <param name="async"> A value indicating whether the query will be executed asynchronously. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.CompiledQueryCacheKey.Equals(System.Object)">
            <summary>
                Determines if this key is equivalent to a given object (i.e. if they are keys for the same query).
            </summary>
            <param name="obj">
                The object to compare this key to.
            </param>
            <returns>
                True if the object is a <see cref="T:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.CompiledQueryCacheKey" /> and is for the same query, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.CompiledQueryCacheKey.GetHashCode">
            <summary>
                Gets the hash code for the key.
            </summary>
            <returns>
                The hash code for the key.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
            <param name="model"> The model that queries will be written against. </param>
            <param name="currentContext"> The context that queries will be executed for. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies.Model">
            <summary>
                The model that queries will be written against.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies.Context">
            <summary>
                The context that queries will be executed for.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="model"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="currentContext"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo">
            <summary>
                <para>
                    Information required to create an instance of an entity based on a row of data returned from a query.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object},System.Collections.Generic.Dictionary{System.Type,System.Int32[]})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo" /> struct.
            </summary>
            <param name="valueBuffer"> The row of data that represents this entity. </param>
            <param name="materializer"> The method to materialize the data into an entity instance. </param>
            <param name="typeIndexMap"> Dictionary containing mapping from property indexes to values in ValueBuffer. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.#ctor(Microsoft.EntityFrameworkCore.Storage.MaterializationContext@,System.Func{Microsoft.EntityFrameworkCore.Storage.MaterializationContext,System.Object},System.Collections.Generic.Dictionary{System.Type,System.Int32[]})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo" /> struct.
            </summary>
            <param name="materializationContext"> The current <see cref="T:Microsoft.EntityFrameworkCore.Storage.MaterializationContext" /> for creating the entity. </param>
            <param name="materializer"> The method to materialize the data into an entity instance. </param>
            <param name="typeIndexMap"> Dictionary containing mapping from property indexes to values in ValueBuffer. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.ValueBuffer">
            <summary>
                Gets the row of data that represents this entity.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.Materialize">
            <summary>
                Materializes the data into an entity instance.
            </summary>
            <returns> The entity instance. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.ForType(System.Type)">
            <summary>
                Creates a new ValueBuffer containing only the values needed for entities of a given type.
            </summary>
            <param name="clrType"> The type of this entity. </param>
            <returns> Updated value buffer. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor">
            <summary>
                <para>
                    The core visitor that processes a query to be executed.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryContextParameter">
            <summary>
                Expression to reference the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryContext" /> parameter for a query.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
            <param name="queryCompilationContext"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext" /> to be used when processing the query. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression">
            <summary>
                Gets the expression that represents this query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter">
            <summary>
                Gets the expression for the current parameter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" /> being used for this query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider" /> being used for this query.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor``1(Remotion.Linq.QueryModel)">
            <summary>
                Creates an action to execute this query.
            </summary>
            <typeparam name="TResult"> The type of results that the query returns. </typeparam>
            <param name="queryModel"> The query. </param>
            <returns> An action that returns the results of the query. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor``1(Remotion.Linq.QueryModel)">
            <summary>
                Creates an action to asynchronously execute this query.
            </summary>
            <typeparam name="TResult"> The type of results that the query returns. </typeparam>
            <param name="queryModel"> The query. </param>
            <returns> An action that asynchronously returns the results of the query. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions">
            <summary>
                Executes the query and logs any exceptions that occur.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.RewriteProjectedCollectionNavigationsToIncludes(Remotion.Linq.QueryModel)">
            <summary>
                Rewrites collection navigation projections so that they can be handled by the Include pipeline.
            </summary>
            <param name="queryModel"> The query. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations(Remotion.Linq.QueryModel)">
            <summary>
                Populates <see cref="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations" /> based on annotations found in the query.
            </summary>
            <param name="queryModel"> The query. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OnBeforeNavigationRewrite(Remotion.Linq.QueryModel)">
            <summary>
                Pre-processes query model before we rewrite its navigations.
            </summary>
            <param name="queryModel">Query model to process. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(Remotion.Linq.QueryModel,System.Boolean)">
            <summary>
                Applies optimizations to the query.
            </summary>
            <param name="queryModel"> The query. </param>
            <param name="asyncQuery">True if we are compiling an async query; otherwise false.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ShouldApplyDefiningQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                Determine whether a defining query should be applied when querying the target entity type.
            </summary>
            <param name="entityType">The target entity type.</param>
            <param name="querySource">The target query source.</param>
            <returns>true if the target type should have a defining query applied.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence(Remotion.Linq.QueryModel,System.Type)">
            <summary>
                Converts the results of the query from a single result to a series of results.
            </summary>
            <param name="queryModel"> The query. </param>
            <param name="type"> The type of results returned by the query. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults``1(Remotion.Linq.QueryModel)">
            <summary>
                Applies tracking behavior to the query.
            </summary>
            <typeparam name="TResult"> The type of results returned by the query. </typeparam>
            <param name="queryModel"> The query. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda``1">
            <summary>
                Creates an action to execute this query.
            </summary>
            <typeparam name="TResults"> The type of results that the query returns. </typeparam>
            <returns> An action that returns the results of the query. </returns>
            >
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(Remotion.Linq.QueryModel)">
            <summary>
                Visits the root <see cref="T:Remotion.Linq.QueryModel" /> node.
            </summary>
            <param name="queryModel"> The query. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)">
            <summary>
                Visits the <see cref="T:Remotion.Linq.Clauses.MainFromClause" /> node.
            </summary>
            <param name="fromClause"> The node being visited. </param>
            <param name="queryModel"> The query. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)">
            <summary>
                Compiles the <see cref="T:Remotion.Linq.Clauses.MainFromClause" /> node.
            </summary>
            <param name="mainFromClause"> The node being compiled. </param>
            <param name="queryModel"> The query. </param>
            <returns> The compiled result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.AdditionalFromClause" /> nodes.
            </summary>
            <param name="fromClause"> The node being visited. </param>
            <param name="queryModel"> The query. </param>
            <param name="index"> Index of the node being visited. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel)">
            <summary>
                Compiles <see cref="T:Remotion.Linq.Clauses.AdditionalFromClause" /> nodes.
            </summary>
            <param name="additionalFromClause"> The node being compiled. </param>
            <param name="queryModel"> The query. </param>
            <returns> The compiled result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.JoinClause" /> nodes.
            </summary>
            <param name="joinClause"> The node being visited. </param>
            <param name="queryModel"> The query. </param>
            <param name="index"> Index of the node being visited. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel)">
            <summary>
                Compiles <see cref="T:Remotion.Linq.Clauses.JoinClause" /> nodes.
            </summary>
            <param name="joinClause"> The node being compiled. </param>
            <param name="queryModel"> The query. </param>
            <returns> The compiled result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause(Remotion.Linq.Clauses.GroupJoinClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.GroupJoinClause" /> nodes
            </summary>
            <param name="groupJoinClause"> The node being visited. </param>
            <param name="queryModel"> The query. </param>
            <param name="index"> Index of the node being visited. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression(Remotion.Linq.Clauses.GroupJoinClause,Remotion.Linq.QueryModel)">
            <summary>
                Compiles <see cref="T:Remotion.Linq.Clauses.GroupJoinClause" /> nodes.
            </summary>
            <param name="groupJoinClause"> The node being compiled. </param>
            <param name="queryModel"> The query. </param>
            <returns> The compiled result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause(Remotion.Linq.Clauses.WhereClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.WhereClause" /> nodes.
            </summary>
            <param name="whereClause"> The node being visited. </param>
            <param name="queryModel"> The query. </param>
            <param name="index"> Index of the node being visited. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering(Remotion.Linq.Clauses.Ordering,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.OrderByClause,System.Int32)">
            <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.Ordering" /> nodes.
            </summary>
            <param name="ordering"> The node being visited. </param>
            <param name="queryModel"> The query. </param>
            <param name="orderByClause"> The <see cref="T:Remotion.Linq.Clauses.OrderByClause" /> for the ordering. </param>
            <param name="index"> Index of the node being visited. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.RemoveOrderings(Remotion.Linq.QueryModel)">
            <summary>
            Removes orderings for a given query model.
            </summary>
            <param name="queryModel">Query model to remove orderings on.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CanOptimizeCorrelatedCollections">
            <summary>
                Determines whether correlated collections (if any) can be optimized.
            </summary>
            <returns>True if optimization is allowed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(Remotion.Linq.Clauses.SelectClause,Remotion.Linq.QueryModel)">
            <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.SelectClause" /> nodes.
            </summary>
            <param name="selectClause"> The node being visited. </param>
            <param name="queryModel"> The query. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SelectAsyncMethod">
            <summary>
                The _SelectAsync method info.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator(Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase" /> nodes.
            </summary>
            <param name="resultOperator"> The node being visited. </param>
            <param name="queryModel"> The query. </param>
            <param name="index"> Index of the node being visited. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateTransparentIdentifierType(System.Type,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CallCreateTransparentIdentifier(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IntroduceTransparentScope(Remotion.Linq.Clauses.IQuerySource,Remotion.Linq.QueryModel,System.Int32,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(System.Linq.Expressions.Expression,Remotion.Linq.Clauses.IQuerySource,System.Boolean)">
            <summary>
                Translates a re-linq query model expression into a compiled query expression.
            </summary>
            <param name="expression"> The re-linq query model expression. </param>
            <param name="querySource"> The query source. </param>
            <param name="inProjection"> True when the expression is a projector. </param>
            <returns>
                A compiled query expression fragment.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression)">
            <summary>
                Binds a method call to a value buffer access.
            </summary>
            <param name="methodCallExpression"> The method call expression. </param>
            <param name="expression"> The target expression. </param>
            <returns>
                A value buffer access expression.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
                Binds a member access to a value buffer access.
            </summary>
            <param name="memberExpression"> The member access expression. </param>
            <param name="expression"> The target expression. </param>
            <returns>
                A value buffer access expression.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod(System.Type,System.Linq.Expressions.Expression,System.Int32,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Binds a value buffer read.
            </summary>
            <param name="memberType"> Type of the member. </param>
            <param name="expression"> The target expression. </param>
            <param name="index"> A value buffer index. </param>
            <param name="property">The property being bound.</param>
            <returns>
                A value buffer read expression.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression``1(System.Linq.Expressions.Expression,System.Func{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},Remotion.Linq.Clauses.IQuerySource,``0})">
            <summary>
                Binds a navigation path property expression.
            </summary>
            <typeparam name="TResult"> Type of the result. </typeparam>
            <param name="propertyExpression"> The property expression. </param>
            <param name="propertyBinder"> The property binder. </param>
            <returns>
                A TResult.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression(System.Linq.Expressions.MemberExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource})">
            <summary>
                Binds a member expression.
            </summary>
            <param name="memberExpression"> The member access expression. </param>
            <param name="memberBinder"> The member binder. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression``1(System.Linq.Expressions.MemberExpression,Remotion.Linq.Clauses.IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,``0})">
            <summary>
                Binds a member expression.
            </summary>
            <typeparam name="TResult"> Type of the result. </typeparam>
            <param name="memberExpression"> The member access expression. </param>
            <param name="querySource"> The query source. </param>
            <param name="memberBinder"> The member binder. </param>
            <returns>
                A TResult.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,Remotion.Linq.Clauses.IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,``0})">
            <summary>
                Binds a method call expression.
            </summary>
            <typeparam name="TResult"> Type of the result. </typeparam>
            <param name="methodCallExpression"> The method call expression. </param>
            <param name="querySource"> The query source. </param>
            <param name="methodCallBinder"> The method call binder. </param>
            <returns>
                A TResult.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,``0})">
            <summary>
                Binds a method call expression.
            </summary>
            <typeparam name="TResult"> Type of the result. </typeparam>
            <param name="methodCallExpression"> The method call expression. </param>
            <param name="methodCallBinder"> The method call binder. </param>
            <returns>
                A TResult.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(System.Linq.Expressions.MethodCallExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource})">
            <summary>
                Binds a method call expression.
            </summary>
            <param name="methodCallExpression"> The method call expression. </param>
            <param name="methodCallBinder"> The method call binder. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor,Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler,Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource,Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter,Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorFactory" />.
                </para>
                <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
            <param name="queryOptimizer"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer" /> to be used when processing the query. </param>
            <param name="navigationRewritingExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
            <param name="querySourceTracingExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
            <param name="entityResultFindingExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
            <param name="taskBlockingExpressionVisitor"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor" /> to be used when processing the query. </param>
            <param name="memberAccessBindingExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
            <param name="projectionExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory" /> to be used when processing the
                query.
            </param>
            <param name="entityQueryableExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
            <param name="queryAnnotationExtractor"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor" /> to be used when processing the query. </param>
            <param name="resultOperatorHandler"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler" /> to be used when processing the query. </param>
            <param name="entityMaterializerSource"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource" /> to be used when processing the query. </param>
            <param name="expressionPrinter"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter" /> to be used when processing the query. </param>
            <param name="queryModelGenerator"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator" /> to be used when processing the query. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.QueryOptimizer">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.NavigationRewritingExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.QuerySourceTracingExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.EntityResultFindingExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.TaskBlockingExpressionVisitor">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.MemberAccessBindingExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.ProjectionExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.EntityQueryableExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.ExpressionPrinter">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.EntityMaterializerSource">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.ResultOperatorHandler">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.QueryAnnotationExtractor">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor" /> to be used when processing a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.QueryModelGenerator">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator" /> to be used when processing a query.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="resultOperatorHandler"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="queryOptimizer"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="navigationRewritingExpressionVisitorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="querySourceTracingExpressionVisitorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="entityResultFindingExpressionVisitorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="taskBlockingExpressionVisitor"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="memberAccessBindingExpressionVisitorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="projectionExpressionVisitorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="entityQueryableExpressionVisitorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="queryAnnotationExtractor"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="entityMaterializerSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="expressionPrinter"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="queryModelGenerator"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorFactory">
            <summary>
                <para>
                    Creates instances of <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorFactory.Dependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorFactory" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" />.
            </summary>
            <param name="queryCompilationContext">
                Compilation context for the query.
            </param>
            <param name="parentEntityQueryModelVisitor">
                The visitor for the outer query.
            </param>
            <returns> The new created visitor. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable.Print(Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression">
            <summary>
                Expression representing null-conditional access.
                Logic in this file is based on https://github.com/bartdesmet/ExpressionFutures
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Creates a new instance of NullConditionalExpression.
            </summary>
            <param name="caller"> Expression representing potentially nullable caller that needs to be tested for it's nullability. </param>
            <param name="accessOperation"> Expression representing access operation. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Caller">
            <summary>
                Expression representing potentially nullable caller that needs to be tested for it's nullability.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.AccessOperation">
            <summary>
                Expression representing access operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.CanReduce">
            <summary>
                Indicates that the node can be reduced to a simpler node. If this returns true,
                Reduce() can be called to produce the reduced form.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Type">
            <summary>
                Gets the static type of the expression that this expression represents.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.NodeType">
            <summary>
                Gets the node type of this expression.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Reduce">
            <summary>
                Reduces this node to a simpler expression. If CanReduce returns true, this should
                return a valid expression. This method can return another node which itself must
                be reduced.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                Reduces the node and then calls the visitor delegate on the reduced expression.
                The method throws an exception if the node is not
                reducible.
            </summary>
            <returns>
                The expression being visited, or an expression which should replace it in the tree.
            </returns>
            <param name="visitor">An instance of <see cref="T:System.Func`2" />.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Print(Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.ToString">
            <summary>
                Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
            <returns>
                A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.OuterKeyNullCheck">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.EqualExpression">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.Type">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.CanReduce">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.NodeType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.Reduce">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.Print(Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullSafeEqualExpression.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.EntityQueryableExpressionVisitor">
            <summary>
                Visitor for processing entity types roots.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.EntityQueryableExpressionVisitor" /> class.
            </summary>
            <param name="entityQueryModelVisitor"> The visitor for the query. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
                Visits <see cref="T:System.Linq.Expressions.ConstantExpression" /> nodes.
            </summary>
            <param name="constantExpression"> The node being visited. </param>
            <returns> An expression to use in place of the node. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitEntityQueryable(System.Type)">
            <summary>
                Visits entity type roots.
            </summary>
            <param name="elementType"> The entity type of the root. </param>
            <returns> An expression to use in place of the node. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase">
            <summary>
                A base expression visitor that ignores Block expressions.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                Visits the children of the extension expression.
            </summary>
            <returns>
                The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
            <param name="extensionExpression">The expression to visit.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                Visits the children of the subquery expression.
            </summary>
            <returns>
                The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
            <param name="subQueryExpression">The expression to visit.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
            <returns>
                The modified expression, if it or any subexpression was modified; otherwise, returns the original
                expression.
            </returns>
            <param name="node">The expression to visit.</param>
            <typeparam name="T">The type of the delegate.</typeparam>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory">
            <summary>
                A factory for creating entity queryable expression visitors.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                Creates a new entity queryable ExpressionVisitor.
            </summary>
            <param name="entityQueryModelVisitor"> The query model visitor. </param>
            <param name="querySource"> The query source. </param>
            <returns>
                An ExpressionVisitor.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.AdditionalFromClauseOptimizingQueryModelVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.AdditionalFromClauseOptimizingQueryModelVisitor.VisitQueryModel(Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.AdditionalFromClauseOptimizingQueryModelVisitor.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.AllAnyToContainsRewritingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.AllAnyToContainsRewritingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationIncludeExpressionRewriter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationIncludeExpressionRewriter.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationIncludeExpressionRewriter.CollectionNavigationIncludeResultOperators">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationIncludeExpressionRewriter.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationIncludeExpressionRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationIncludeExpressionRewriter.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationIncludeExpressionRewriter.ProjectCollectionNavigationMethodInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationSetOperatorSubqueryInjector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationSetOperatorSubqueryInjector.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationSetOperatorSubqueryInjector.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationSubqueryInjector">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationSubqueryInjector.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationSubqueryInjector.ShouldInject">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationSubqueryInjector.MaterializeCollectionNavigationMethodInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationSubqueryInjector.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CollectionNavigationSubqueryInjector.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ConditionalOptimizingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ConditionalOptimizingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionFindingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionFindingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionFindingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionFindingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionOptimizingVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionOptimizingVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionOptimizingVisitor.ParentOrderings">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionOptimizingVisitor.IsCorrelatedCollectionMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionOptimizingVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CorrelatedCollectionOptimizingVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.QueryModelVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.CreateQueryModelVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.GetParameterValueMethodInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityEqualityRewritingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityEqualityRewritingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityEqualityRewritingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityEqualityRewritingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.Internal.IEntityTrackingInfoFactory,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.FindEntitiesInResult(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.Internal.IEntityTrackingInfoFactory)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityResultFindingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExistsToAnyRewritingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExistsToAnyRewritingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.TransformingVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.#ctor(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitMainFromClause(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.GroupJoinClause)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitWhereClause(Remotion.Linq.Clauses.WhereClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitOrderByClause(Remotion.Linq.Clauses.OrderByClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitOrdering(Remotion.Linq.Clauses.Ordering,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.OrderByClause,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitSelectClause(Remotion.Linq.Clauses.SelectClause,Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitResultOperator(Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory.Create(Remotion.Linq.Clauses.QuerySourceMapping,Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory.Create">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.#ctor(Remotion.Linq.Clauses.QuerySourceMapping,Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.GetPropertyPath(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.GetEntityType(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitorFactory.Create(Remotion.Linq.Clauses.QuerySourceMapping,Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ModelExpressionApplyingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ModelExpressionApplyingExpressionVisitor.ContextParameters">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ModelExpressionApplyingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator,Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ModelExpressionApplyingExpressionVisitor.IsViewTypeQuery">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ModelExpressionApplyingExpressionVisitor.ApplyModelExpressions(Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ModelExpressionApplyingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ModelExpressionApplyingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.InjectSubqueryToCollectionsInProjection(Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.Rewrite(Remotion.Linq.QueryModel,Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.CreateVisitorForSubQuery(System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.#ctor(Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter,Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.DbContext,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.ExtractParameters(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.Evaluate(System.Linq.Expressions.Expression,System.String@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ProjectionExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ProjectionExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceReferenceFindingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceReferenceFindingExpressionVisitor.QuerySourceReferenceExpression">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceReferenceFindingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.FindResultQuerySourceReferenceExpression(System.Linq.Expressions.Expression,Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.OriginGroupByQueryModel">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QuerySourceTracingExpressionVisitorFactory.Create">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ReducingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ReducingExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ReducingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.FindQuerySourcesRequiringMaterialization(Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.HandleUnderlyingQuerySources(Remotion.Linq.Clauses.IQuerySource,System.Action{Remotion.Linq.Clauses.IQuerySource})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitor.GetSetResultOperatorSourceExpressions(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.ResultOperatorBase})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RequiresMaterializationExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.SubQueryMemberPushDownExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.SubQueryMemberPushDownExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.SubQueryMemberPushDownExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.SubQueryMemberPushDownExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.SubQueryMemberPushDownExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskBlockingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskBlockingExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.CancellationTokenParameter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.LiftTasks(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TransformingQueryModelExpressionVisitor`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TransformingQueryModelExpressionVisitor`1.TransformingQueryModelVisitor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TransformingQueryModelExpressionVisitor`1.#ctor(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TransformingQueryModelExpressionVisitor`1.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory">
            <summary>
                A factory for creating projection expression visitors.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                Creates a new ExpressionVisitor.
            </summary>
            <param name="entityQueryModelVisitor"> The entity query model visitor. </param>
            <param name="querySource"> The query source. </param>
            <returns>
                An ExpressionVisitor.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ProjectionExpressionVisitor">
            <summary>
                A projection expression visitor.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ProjectionExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                Initializes a new instance of the Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ProjectionExpressionVisitor class.
            </summary>
            <param name="entityQueryModelVisitor"> The entity query model visitor. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ProjectionExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression"></see>.
            </summary>
            <param name="methodCallExpression">The expression to visit.</param>
            <returns>
                The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ProjectionExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>
                Visit a subquery.
            </summary>
            <param name="expression"> The subquery expression. </param>
            <returns>
                A compiled query expression fragment representing the input subquery expression.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator">
            <summary>
                A cache key generator for the compiled query cache.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator.GenerateCacheKey(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                Generates a cache key.
            </summary>
            <param name="query"> The query to generate a cache key for. </param>
            <param name="async"> True if the query will be executed asynchronously. </param>
            <returns> An object representing a query cache key. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory">
            <summary>
                A factory for creating EntityQueryModelVisitors.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                Creates a new EntityQueryModelVisitor.
            </summary>
            <param name="queryCompilationContext"> Context for the query compilation. </param>
            <param name="parentEntityQueryModelVisitor"> The parent entity query model visitor. </param>
            <returns>
                An EntityQueryModelVisitor instance.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2">
            <summary>
                Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"> The entity type. </typeparam>
            <typeparam name="TProperty"> The property type. </typeparam>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IncludeSpecification">
            <summary>
                Represents a single query include operation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.#ctor(Remotion.Linq.Clauses.IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})">
            <summary>
                Initializes a new instance of the Microsoft.EntityFrameworkCore.Query.IncludeResultOperator class.
            </summary>
            <param name="querySource"> The query source. </param>
            <param name="navigationPath"> The set of navigation properties to be included. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.QuerySource">
            <summary>
                Gets the query source.
            </summary>
            <value>
                The query source.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.NavigationPath">
            <summary>
                Gets the set of navigation properties to be included.
            </summary>
            <value>
                The set of navigation properties to be included.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IsEnumerableTarget">
            <summary>
                Gets or sets a value indicating whether this object is an enumerable target.
            </summary>
            <value>
                True if this object is an enumerable target, false if not.
            </value>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.ToString">
            <summary>
                Convert this object into a string representation.
            </summary>
            <returns>
                A string that represents this object.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject.IsGetValueExpression(System.Linq.Expressions.MethodCallExpression,Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject.AnonymousObjectCtor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject.GetValueMethodInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject.op_Equality(Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject.op_Inequality(Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject.#ctor(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject.Equals(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject.GetHashCode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject.GetValue(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ToEnumerable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ToOrdered">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.InterceptExceptions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TrackEntities">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TrackGroupedEntities">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ToSequence">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.GetEnumerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ToQueryable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.SelectMany">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Join">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.GroupJoin">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.GroupBy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Select">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider._Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.OrderBy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ThenBy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Where">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ToAsyncEnumerable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.All">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Any">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Cast">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Contains">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Count">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.DefaultIfEmpty">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.DefaultIfEmptyArg">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Distinct">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.First">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.FirstOrDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Last">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.LastOrDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.LongCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.OfType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Single">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.SingleOrDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Skip">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Take">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Concat">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Except">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Intersect">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.Union">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.GetAggregateMethod(System.String,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.MakeSequenceType(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``1(`0,``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``2(`0,``0,``1)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``3(`0,``0,``1,``2)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``4(`0,``0,``1,``2,``3)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``5(`0,``0,``1,``2,``3,``4)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.CreateCompiledQuery(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync(`0,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``1(`0,``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``1(`0,``0,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``2(`0,``0,``1)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``2(`0,``0,``1,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``3(`0,``0,``1,``2)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``3(`0,``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``4(`0,``0,``1,``2,``3)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``4(`0,``0,``1,``2,``3,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``5(`0,``0,``1,``2,``3,``4)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.ExecuteAsync``5(`0,``0,``1,``2,``3,``4,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2.CreateCompiledQuery(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.Execute(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.Execute``1(`0,``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.ExecuteAsync``1(`0,System.Threading.CancellationToken,``0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.Execute``2(`0,``0,``1)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.Execute``3(`0,``0,``1,``2)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.Execute``4(`0,``0,``1,``2,``3)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.Execute``5(`0,``0,``1,``2,``3,``4)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.CreateCompiledQuery(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.ExecuteCore(`0,System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.ExecuteCore(`0,System.Threading.CancellationToken,System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.CreateCompiledQuery(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.CompiledQueryParameterPrefix">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddAsyncQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable{``0}}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.CorrelatedSubqueryMetadata">
            <summary>
                Structure to store metadata needed for correlated collection optimizations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CorrelatedSubqueryMetadata.#ctor(System.Int32,System.Boolean,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation,Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.CorrelatedSubqueryMetadata" />.
            </summary>
            <param name="index"> Id associated with the collection that is being optimized. </param>
            <param name="trackingQuery"> Flag indicating whether query should be tracked or not. </param>
            <param name="firstNavigation"> First navigation in the chain leading to collection navigation that is being optimized. </param>
            <param name="collectionNavigation"> Collection navigation that is being optimized. </param>
            <param name="parentQuerySource"> Query source that is origin of the collection navigation. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.CorrelatedSubqueryMetadata.Index">
            <summary>
                Id associated with the collection that is being optimized.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.CorrelatedSubqueryMetadata.TrackingQuery">
            <summary>
                Flag indicating whether query should be tracked or not.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.CorrelatedSubqueryMetadata.FirstNavigation">
            <summary>
                First navigation in the chain leading to collection navigation that is being optimized.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.CorrelatedSubqueryMetadata.CollectionNavigation">
            <summary>
                Collection navigation that is being optimized.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.CorrelatedSubqueryMetadata.ParentQuerySource">
            <summary>
                Query source that is origin of the collection navigation.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.DefaultMethodInfoBasedNodeTypeRegistryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.DefaultMethodInfoBasedNodeTypeRegistryFactory.#ctor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.DependentToPrincipalIncludeComparer`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.DependentToPrincipalIncludeComparer`1.#ctor(`0,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.DependentToPrincipalIncludeComparer`1.ShouldInclude(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.DependentToPrincipalIncludeComparer`1.ShouldInclude(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.System#Collections#Generic#IAsyncEnumerable{TResult}#GetEnumerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.Microsoft#EntityFrameworkCore#Query#Internal#IDetachableContext#DetachContext">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.System#ComponentModel#IListSource#GetList">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IsEnumerableTarget">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySourceReferenceExpression">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfoFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfoFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.EvaluatableExpressionFilter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EvaluatableExpressionFilter.IsEvaluatableMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EvaluatableExpressionFilter.IsEvaluatableMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.#ctor">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.Instance">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.Equals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.#ctor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.#ctor(System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.ConstantPrinterBase})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.StringBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.RemoveFormatting">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.CharacterLimit">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.Append(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.AppendLine(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.Print(System.Linq.Expressions.Expression,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.PrintDebug(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.Visit(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.PostProcess(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.ConstantPrinterBase">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.ConstantPrinterBase.TryPrintConstant(System.Linq.Expressions.ConstantExpression,Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.ConstantPrinterBase.Append">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.ConstantPrinterBase.AppendLine">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.Grouping`2">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.Grouping`2.#ctor(`0)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.Grouping`2.Key">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.Grouping`2.Add(`1)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.Grouping`2.GetEnumerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor`1.AsyncEnumerable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader.Load(Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable{``0}}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IDetachableContext">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IDetachableContext.DetachContext">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IEntityTrackingInfoFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IEntityTrackingInfoFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter.Print(System.Linq.Expressions.Expression,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter.PrintDebug(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer.ShouldInclude(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer.ShouldInclude(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SelectMany">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Join">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupJoin">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Select">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OrderBy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ThenBy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Where">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Any">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.All">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Cast">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Concat">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Count">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Contains">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmpty">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmptyArg">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Distinct">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Except">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.First">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.FirstOrDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupBy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Intersect">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Last">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LastOrDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LongCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Single">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SingleOrDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Skip">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Take">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.InterceptExceptions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OfType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToSequence">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToOrdered">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToEnumerable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToQueryable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackEntities">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackGroupedEntities">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Union">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GetAggregateMethod(System.String,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.MakeSequenceType(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.CompileIncludes(Remotion.Linq.QueryModel,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.RewriteCollectionQueries">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.RewriteCollectionQueries(Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.LogIgnoredIncludes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.IsIncludeMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory">
            <summary>
                Creates <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider" /> instances for use by the query compiler.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory.Create">
            <summary>
                Creates a <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider" />.
            </summary>
            <returns>The <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory.RegisterMethods(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type)">
            <summary>
                Registers methods to be used with the <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider" />.
            </summary>
            <param name="methods">The methods to register.</param>
            <param name="nodeType">The node type for these methods.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues.ParameterValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues.AddParameter(System.String,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues.RemoveParameter(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues.SetParameter(System.String,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor.ExtractQueryAnnotations(Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer.GetEntity(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Query.EntityLoadInfo,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer.GetPropertyValue(System.Object,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer.StartTracking(System.Object,Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer.StartTracking(System.Object,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer.IncludeCollection``3(System.Int32,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor,Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter,System.Boolean,``0,System.Func{System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer.IncludeCollectionAsync``3(System.Int32,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor,Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter,System.Boolean,``0,System.Func{System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,System.Boolean},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer.CorrelateSubquery``3(System.Int32,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Func{Microsoft.EntityFrameworkCore.Metadata.INavigation,``2},Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject@,System.Boolean,System.Func{System.Collections.Generic.IEnumerable{System.Tuple{``0,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject}}},System.Func{Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer.CorrelateSubqueryAsync``3(System.Int32,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Func{Microsoft.EntityFrameworkCore.Metadata.INavigation,``2},Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,System.Boolean,System.Func{System.Collections.Generic.IAsyncEnumerable{System.Tuple{``0,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject}}},System.Func{Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,System.Boolean},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.CreateCompiledQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.CreateCompiledAsyncEnumerableQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.CreateCompiledAsyncTaskQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator.ParseQuery(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator.ExtractParameters(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelPrinter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelPrinter.Print(Remotion.Linq.QueryModel,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IRelatedEntitiesLoader">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IRelatedEntitiesLoader.Load(Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap.Key">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap.TryGetEntity(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Boolean,System.Boolean@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap.CollectGarbage">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap.Add(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap.CreateIncludeKeyComparer(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap.CreateIncludeKeyComparer(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToEnumerable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToOrdered">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.InterceptExceptions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackEntities">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackGroupedEntities">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToSequence">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ResultEnumerable`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ResultEnumerable`1.#ctor(System.Func{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ResultEnumerable`1.GetEnumerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToQueryable">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SelectMany">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Join">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupJoin">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupBy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Select">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OrderBy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ThenBy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Where">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.All">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Any">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Cast">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Contains">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Count">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmpty">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmptyArg">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Distinct">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.First">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.FirstOrDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Last">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LastOrDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LongCount">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OfType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Single">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SingleOrDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Skip">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Take">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Concat">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Except">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Intersect">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Union">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GetAggregateMethod(System.String,System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.MakeSequenceType(System.Type)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.IsGetValueExpression(System.Linq.Expressions.MethodCallExpression,Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.AnonymousObjectCtor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.GetValueMethodInfo">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.op_Equality(Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.op_Inequality(Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.#ctor(System.Object[])">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.IsDefault">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.Equals(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.GetHashCode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject.GetValue(System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.MethodInfoBasedNodeTypeRegistryFactory">
            <summary>
                Creates <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider" /> instances for use by the query compiler
                based on a <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MethodInfoBasedNodeTypeRegistryFactory.#ctor(Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.MethodInfoBasedNodeTypeRegistryFactory" /> that will use the given
                <see cref="T:Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" />
            </summary>
            <param name="methodInfoBasedNodeTypeRegistry">The registry to use./></param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MethodInfoBasedNodeTypeRegistryFactory.RegisterMethods(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type)">
            <summary>
                Registers methods to be used with the <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider" />.
            </summary>
            <param name="methods">The methods to register.</param>
            <param name="nodeType">The node type for these methods.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.MethodInfoBasedNodeTypeRegistryFactory.Create">
            <summary>
                Creates a <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider" />.
            </summary>
            <returns>The <see cref="T:Remotion.Linq.Parsing.Structure.INodeTypeProvider" />.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.Instance">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.NullIncludeComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.NullIncludeComparer.ShouldInclude(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.NullIncludeComparer.ShouldInclude(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.PrincipalToDependentIncludeComparer`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.PrincipalToDependentIncludeComparer`1.#ctor(`0,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory{`0},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.PrincipalToDependentIncludeComparer`1.ShouldInclude(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.PrincipalToDependentIncludeComparer`1.ShouldInclude(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryAnnotationExtractor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryAnnotationExtractor.ExtractQueryAnnotations(Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.GetEntity(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Query.EntityLoadInfo,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.GetPropertyValue(System.Object,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.StartTracking(System.Object,Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.StartTracking(System.Object,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.IncludeCollection``3(System.Int32,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor,Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter,System.Boolean,``0,System.Func{System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.IncludeCollectionAsync``3(System.Int32,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor,Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter,System.Boolean,``0,System.Func{System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,System.Boolean},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.CorrelateSubquery``3(System.Int32,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Func{Microsoft.EntityFrameworkCore.Metadata.INavigation,``2},Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject@,System.Boolean,System.Func{System.Collections.Generic.IEnumerable{System.Tuple{``0,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject}}},System.Func{Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,System.Boolean})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.CorrelateSubqueryAsync``3(System.Int32,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Func{Microsoft.EntityFrameworkCore.Metadata.INavigation,``2},Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,System.Boolean,System.Func{System.Collections.Generic.IAsyncEnumerable{System.Tuple{``0,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject}}},System.Func{Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,Microsoft.EntityFrameworkCore.Query.Internal.MaterializedAnonymousObject,System.Boolean},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.Model">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.Logger">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.EntityQueryModelVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.RequiresMaterializationExpressionVisitorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.CurrentContext">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.With(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.With(Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.With(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies.With(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextFactory.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextFactory.Dependencies">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextFactory.TrackQueryResults">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextFactory.Create(System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Database">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledAsyncEnumerableQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledAsyncTaskQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.GetOutputExpression(Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.Print(Remotion.Linq.QueryModel,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.PopulateQueryModelMapping(Remotion.Linq.QueryModel,System.Collections.Generic.Dictionary{Remotion.Linq.QueryModel,Remotion.Linq.QueryModel})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.RecreateQueryModelFromMapping(Remotion.Linq.QueryModel,System.Collections.Generic.Dictionary{Remotion.Linq.QueryModel,Remotion.Linq.QueryModel})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.CountQuerySourceReferences(Remotion.Linq.QueryModel,Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory,Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator.ExtractParameters(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator.ParseQuery(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelPrinter">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelPrinter.#ctor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelPrinter.Print(Remotion.Linq.QueryModel,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.#ctor">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.Optimize(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Remotion.Linq.QueryModel)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.GroupJoinClause)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitGroupJoinClause(Remotion.Linq.Clauses.GroupJoinClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.FlattenSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression,Remotion.Linq.Clauses.IFromClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitResultOperator(Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions.HasGeneratedItemName(Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions.TryGetFlattenedGroupJoinClause(Remotion.Linq.Clauses.AdditionalFromClause)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMap`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMap`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory{`0})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMap`1.PrincipalKeyValueFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMap`1.Key">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMap`1.TryGetEntity(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Boolean,System.Boolean@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMap`1.CollectGarbage">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMap`1.Add(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMap`1.CreateIncludeKeyComparer(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMap`1.CreateIncludeKeyComparer(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMapFactoryFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.WeakReferenceIdentityMapFactoryFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory">
            <summary>
                Factory for <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory.Create(System.Boolean)">
            <summary>
                Creates a new QueryCompilationContext.
            </summary>
            <param name="async"> true if the query will be executed asynchronously. </param>
            <returns>
                A <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" /> instance.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IQueryContextFactory">
            <summary>
                Factory for <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryContext" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create">
            <summary>
                Creates a new QueryContext.
            </summary>
            <returns>
                A QueryContext instance.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler">
            <summary>
                A handler for <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler.HandleResultOperator(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel)">
            <summary>
                Handles a result operator.
            </summary>
            <param name="entityQueryModelVisitor"> The entity query model visitor. </param>
            <param name="resultOperator"> The result operator. </param>
            <param name="queryModel"> The query model. </param>
            <returns>
                A compiled query expression fragment representing the result operator.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.NotParameterizedAttribute">
            <summary>
                Signals that custom LINQ operator parameter should not be parameterized during query compilation.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext">
            <summary>
                A query compilation context. The primary data structure representing the state/components
                used during query compilation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextDependencies,Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.RegisterCorrelatedSubqueryMetadata(Remotion.Linq.Clauses.MainFromClause,System.Boolean,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation,Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                Registers a mapping between correlated collection query models and metadata needed to process them.
            </summary>
            <param name="mainFromClause"> The main from clause.</param>
            <param name="trackingQuery"> Flag indicating whether query should be tracked or not. </param>
            <param name="firstNavigation"> First navigation in the chain leading to collection navigation that is being optimized. </param>
            <param name="collectionNavigation"> Collection navigation that is being optimized. </param>
            <param name="parentQuerySource"> Query source that is origin of the collection navigation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.TryGetCorrelatedSubqueryMetadata(Remotion.Linq.Clauses.MainFromClause,Microsoft.EntityFrameworkCore.Query.Internal.CorrelatedSubqueryMetadata@)">
            <summary>
                Looks up a mapping between correlated collection query models and metadata needed to process them.
            </summary>
            <param name="mainFromClause"> The main from clause.</param>
            <param name="correlatedSubqueryMetadata"> The correlated sub-query metadata. </param>
            <returns> <c>True</c> if correlated sub-query metadata was registered; <c>false</c> otherwise. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Model">
            <summary>
                Gets the model.
            </summary>
            <value>
                The model.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Logger">
            <summary>
                Gets the logger.
            </summary>
            <value>
                The logger.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.LinqOperatorProvider">
            <summary>
                Gets the LINQ operator provider.
            </summary>
            <value>
                The LINQ operator provider.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.ContextType">
            <summary>
                Gets the type of the context./
            </summary>
            <value>
                The type of the context.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.TrackQueryResults">
            <summary>
                Gets a value indicating the default configured tracking behavior.
            </summary>
            <value>
                true if the default is to track query results, false if not.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceMapping">
            <summary>
                Gets the query source mapping.
            </summary>
            <value>
                The query source mapping.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsAsyncQuery">
            <summary>
                Get a value indicating whether query that is being processed is asynchronous.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.FindEntityType(Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                Gets the entity type mapped to the given query source
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddOrUpdateMapping(Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the entity type mapped to the given query source
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.UpdateMapping(Remotion.Linq.Clauses.QuerySourceMapping)">
            <summary>
                Updates the query source mappings to the new query sources
            </summary>
            <param name="querySourceMapping"> The new query source mapping </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddOrUpdateMapping(Remotion.Linq.Clauses.IQuerySource,System.Linq.Expressions.Expression)">
            <summary>
                Adds or updates the expression mapped to a query source.
            </summary>
            <param name="querySource"> The query source. </param>
            <param name="expression"> The expression mapped to the query source. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations">
            <summary>
                Gets the query annotations.
            </summary>
            <value>
                The query annotations.
            </value>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddAnnotations(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation})">
            <summary>
                Adds query annotations to the existing list.
            </summary>
            <param name="annotations">The query annotations.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CloneAnnotations(Remotion.Linq.Clauses.QuerySourceMapping,Remotion.Linq.QueryModel)">
            <summary>
                Creates cloned annotations targeting a new QueryModel.
            </summary>
            <param name="querySourceMapping">A query source mapping.</param>
            <param name="queryModel">A query model.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsTrackingQuery">
            <summary>
                Gets a value indicating whether this is a tracking query.
            </summary>
            <value>
                true if this object is a tracking query, false if not.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IgnoreQueryFilters">
            <summary>
                Gets a value indicating whether this query should have model-level query filters applied.
            </summary>
            <value>
                true if query filters should be applied, false if not.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsIncludeQuery">
            <summary>
                The query has at least one Include operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsQueryBufferRequired">
            <summary>
                Gets a value indicating whether this query requires a query buffer.
            </summary>
            <value>
                true if this query requires a query buffer, false if not.
            </value>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.DetermineQueryBufferRequirement(Remotion.Linq.QueryModel)">
            <summary>
                Determine if the query requires a query buffer.
            </summary>
            <param name="queryModel"> The query model. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor">
            <summary>
                Creates query model visitor.
            </summary>
            <returns>
                The new query model visitor.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)">
            <summary>
                Creates query model visitor.
            </summary>
            <param name="parentEntityQueryModelVisitor"> The parent entity query model visitor. </param>
            <returns>
                The new query model visitor.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddTrackableInclude(Remotion.Linq.Clauses.IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})">
            <summary>
                Adds a trackable include.
            </summary>
            <param name="querySource"> The query source. </param>
            <param name="navigationPath"> The included navigation path. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.GetTrackableIncludes(Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                Gets all trackable includes for a given query source.
            </summary>
            <param name="querySource"> The query source. </param>
            <returns>
                The trackable includes.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.FindQuerySourcesRequiringMaterialization(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.QueryModel)">
            <summary>
                Determines all query sources that require materialization.
            </summary>
            <param name="queryModelVisitor"> The query model visitor. </param>
            <param name="queryModel"> The query model. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceRequiresMaterialization(Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                Determine whether or not a query source requires materialization.
            </summary>
            <param name="querySource"> The query source. </param>
            <returns>
                true if it requires materialization, false if not.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddQuerySourceRequiringMaterialization(Remotion.Linq.Clauses.IQuerySource)">
            <summary>
                Add a query source to the set of query sources requiring materialization.
            </summary>
            <param name="querySource"> The query source. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.QueryContext">
            <summary>
                The principal data structure used by a compiled query during execution.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContext.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies,System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContext.Context">
            <summary>
                Gets the current DbContext.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContext.Dependencies">
            <summary>
                Parameter object containing dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContext.QueryBuffer">
            <summary>
                The query buffer.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContext.StateManager">
            <summary>
                The state manager.
            </summary>
            <value>
                The state manager.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContext.QueryProvider">
            <summary>
                The query provider.
            </summary>
            <value>
                The query provider.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContext.ConcurrencyDetector">
            <summary>
                Gets the concurrency detector.
            </summary>
            <value>
                The concurrency detector.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContext.CancellationToken">
            <summary>
                Gets or sets the cancellation token.
            </summary>
            <value>
                The cancellation token.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContext.ParameterValues">
            <summary>
                The parameter values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContext.AddParameter(System.String,System.Object)">
            <summary>
                Adds a parameter.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContext.SetParameter(System.String,System.Object)">
            <summary>
                Sets a parameter value.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContext.RemoveParameter(System.String)">
            <summary>
                Removes a parameter by name.
            </summary>
            <param name="name"> The name. </param>
            <returns>
                The parameter value.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContext.BeginTrackingQuery">
            <summary>
                Notify the state manager that a tracking query is starting.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContext.StartTracking(System.Object,Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo)">
            <summary>
                Start tracking an entity.
            </summary>
            <param name="entity"> The entity. </param>
            <param name="entityTrackingInfo"> Information describing how to track the entity. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContext.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.QueryContextDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryContext" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContextDependencies.#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryContext" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContextDependencies.CurrentDbContext">
            <summary>
                The cache being used to store value generator instances.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContextDependencies.ChangeDetector">
            <summary>
                Gets the change detector.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContextDependencies.StateManager">
            <summary>
                Gets the state manager.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContextDependencies.QueryProvider">
            <summary>
                Gets the query provider.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContextDependencies.ConcurrencyDetector">
            <summary>
                Gets the concurrency detector.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContextDependencies.With(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="currentDbContext"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContextDependencies.With(Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="concurrencyDetector"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.QueryContextFactory">
            <summary>
                A factory for <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryContext" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Dependencies">
            <summary>
                Parameter object containing dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.CreateQueryBuffer">
            <summary>
                Creates a query buffer.
            </summary>
            <returns>
                The new query buffer.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Create">
            <summary>
                Creates a new QueryContext.
            </summary>
            <returns>
                A QueryContext.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperatorHandler">
            <summary>
                The default client-eval result operator handler.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperatorHandler.#ctor(Microsoft.EntityFrameworkCore.Query.ResultOperatorHandlerDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.ResultOperatorHandler" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperatorHandler.HandleResultOperator(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel)">
            <summary>
                Handles the result operator.
            </summary>
            <param name="entityQueryModelVisitor"> The entity query model visitor. </param>
            <param name="resultOperator"> The result operator. </param>
            <param name="queryModel"> The query model. </param>
            <returns>
                An compiled query expression fragment representing the result operator.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperatorHandler.CallWithPossibleCancellationToken(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
                Call a client operator that may have a cancellation token.
            </summary>
            <param name="methodInfo"> The method to call. </param>
            <param name="arguments"> A variable-length parameters list containing arguments. </param>
            <returns>
                A method call expression.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperatorHandlerDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.ResultOperatorHandler" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperatorHandlerDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.ResultOperatorHandler" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.ICloneableQueryAnnotation">
            <summary>
                A query annotation that can be cloned.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.ICloneableQueryAnnotation.Clone(Remotion.Linq.Clauses.IQuerySource,Remotion.Linq.QueryModel)">
            <summary>
                Clones this annotation.
            </summary>
            <param name="querySource">The new query source.</param>
            <param name="queryModel">The new query model.</param>
            <returns>The cloned annotation.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersExpressionNode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersExpressionNode.SupportedMethods">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersExpressionNode.#ctor(Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersExpressionNode.CreateResultOperator(Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersResultOperator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersResultOperator.QuerySource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersResultOperator.QueryModel">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersResultOperator.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersResultOperator.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IgnoreQueryFiltersResultOperator.ExecuteInMemory``1(Remotion.Linq.Clauses.StreamedData.StreamedSequence)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeExpressionNode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeExpressionNode.SupportedMethods">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeExpressionNode.#ctor(Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo,System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeExpressionNode.CreateResultOperator(Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeExpressionNodeBase">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeExpressionNodeBase.SourceEntityType">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeExpressionNodeBase.NavigationPropertyPathLambda">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeExpressionNodeBase.#ctor(Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo,System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeExpressionNodeBase.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.#ctor(Microsoft.EntityFrameworkCore.Metadata.INavigation[],System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.QuerySource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.IsImplicitLoad">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.QueryModel">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.NavigationPropertyPaths">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.NavigationPaths">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.PathFromQuerySource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.AppendToNavigationPath(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.DisplayString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator.ExecuteInMemory``1(Remotion.Linq.Clauses.StreamedData.StreamedSequence)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.StringIncludeExpressionNode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.StringIncludeExpressionNode.SupportedMethods">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.StringIncludeExpressionNode.#ctor(Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo,System.Linq.Expressions.ConstantExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.StringIncludeExpressionNode.CreateResultOperator(Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.StringIncludeExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.SupportedMethods">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.#ctor(Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo,System.Linq.Expressions.LambdaExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.ApplyNodeSpecificSemantics(Remotion.Linq.QueryModel,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.CreateResultOperator(Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingExpressionNode">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingExpressionNode.SupportedMethods">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingExpressionNode.#ctor(Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingExpressionNode.CreateResultOperator(Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingResultOperator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingResultOperator.#ctor(System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingResultOperator.QuerySource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingResultOperator.QueryModel">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingResultOperator.IsTracking">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingResultOperator.ToString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingResultOperator.Clone(Remotion.Linq.Clauses.CloneContext)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingResultOperator.ExecuteInMemory``1(Remotion.Linq.Clauses.StreamedData.StreamedSequence)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation">
            <summary>
                Represents an annotation on a query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation.QuerySource">
            <summary>
                Gets the query source.
            </summary>
            <value>
                The query source.
            </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation.QueryModel">
            <summary>
                Gets the query model.
            </summary>
            <value>
                The query model.
            </value>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper">
            <summary>
                A simple default implementation of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMapper" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper.#ctor(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper.Dependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper.IsTypeMapped(System.Type)">
            <summary>
                Gets a value indicating whether the given .NET type is mapped.
            </summary>
            <param name="type"> The .NET type. </param>
            <returns> True if the type can be mapped; otherwise false. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
            <param name="valueConverterSelector"> The registry of known <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />s. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies.ValueConverterSelector">
            <summary>
                The registry of known <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />s.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies.With(Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="valueConverterSelector"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters">
            <summary>
                Parameter object for use in the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters.#ctor(System.Type,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters" /> parameter object.
            </summary>
            <param name="clrType"> The .NET type used in the EF model. </param>
            <param name="converter"> Converts types to and from the store whenever this mapping is used. </param>
            <param name="comparer"> Supports custom value snapshotting and comparisons. </param>
            <param name="keyComparer"> Supports custom comparisons between keys--e.g. PK to FK comparison. </param>
            <param name="valueGeneratorFactory"> An optional factory for creating a specific <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator"/>. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters.ClrType">
            <summary>
                The mapping CLR type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters.Converter">
            <summary>
                The mapping converter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters.Comparer">
            <summary>
                The mapping comparer.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters.KeyComparer">
            <summary>
                The mapping key comparer.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters.ValueGeneratorFactory">
            <summary>
                An optional factory for creating a specific <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator"/> to use with
                this mapping.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters.WithComposedConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters" /> parameter object with the given
                converter composed with any existing converter and set on the new parameter object.
            </summary>
            <param name="converter"> The converter. </param>
            <returns> The new parameter object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> class.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Parameters">
            <summary>
                Returns the parameters used to create this type mapping.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.ClrType">
            <summary>
                Gets the .NET type used in the EF model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Converter">
            <summary>
                Converts types to and from the store whenever this mapping is used.
                May be null if no conversion is needed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.ValueGeneratorFactory">
            <summary>
                An optional factory for creating a specific <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator"/> to use with
                this mapping.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Comparer">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> adds custom value snapshotting and comparison for
                CLR types that cannot be compared with <see cref="M:System.Object.Equals(System.Object,System.Object)" />
                and/or need a deep copy when taking a snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.KeyComparer">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> adds custom value comparison for use when
                comparing key values to each other. For example, when comparing a PK to and FK.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
                Returns a new copy of this type mapping with the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
                added.
            </summary>
            <param name="converter"> The converter to use. </param>
            <returns> A new type mapping </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Database">
            <summary>
                <para>
                    The main interaction point between a context and the database provider.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Database.#ctor(Microsoft.EntityFrameworkCore.Storage.DatabaseDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.Database" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Database.Dependencies">
            <summary>
                Parameter object containing dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})">
            <summary>
                Persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <returns> The number of state entries persisted to the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)">
            <summary>
                Asynchronously persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of entries persisted to the database.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery``1(Remotion.Linq.QueryModel)">
            <summary>
                Translates a query model into a function that can be executed to get query results from the database.
            </summary>
            <typeparam name="TResult"> The type of results returned by the query. </typeparam>
            <param name="queryModel"> An object model representing the query to be executed. </param>
            <returns> A function that will execute the query. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery``1(Remotion.Linq.QueryModel)">
            <summary>
                Translates a query model into a function that can be executed to asynchronously get query results from the database.
            </summary>
            <typeparam name="TResult"> The type of results returned by the query. </typeparam>
            <param name="queryModel"> An object model representing the query to be executed. </param>
            <returns> A function that will asynchronously execute the query. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.DatabaseDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.Database" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DatabaseDependencies.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.Database" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
            <param name="queryCompilationContextFactory"> Factory for compilation contexts to process LINQ queries. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.DatabaseDependencies.QueryCompilationContextFactory">
            <summary>
                Factory for compilation contexts to process LINQ queries.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DatabaseDependencies.With(Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="queryCompilationContextFactory">
                A replacement for the current dependency of this type.
            </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.DatabaseProvider`1">
            <summary>
                <para>
                    The primary point where a database provider can tell EF that it has been selected for the current context.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <typeparam name="TOptionsExtension">
                The type of options that the database provider will add to <see cref="P:Microsoft.EntityFrameworkCore.DbContextOptions.Extensions" />
                to identify that is has been selected (and to store its database specific settings).
            </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DatabaseProvider`1.#ctor(Microsoft.EntityFrameworkCore.Storage.DatabaseProviderDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.DatabaseProvider`1" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.DatabaseProvider`1.Name">
            <summary>
                The unique name used to identify the database provider. This should be the same as the NuGet package name
                for the providers runtime.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DatabaseProvider`1.IsConfigured(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Gets a value indicating whether this database provider has been selected for a given context.
            </summary>
            <param name="options"> The options for the context. </param>
            <returns> True if the database provider has been selected, otherwise false. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.DatabaseProviderDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.DatabaseProvider`1" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DatabaseProviderDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.DatabaseProvider`1" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1">
            <summary>
                Represents the execution state of an operation.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1.#ctor(System.Boolean,`0)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1" />.
            </summary>
            <param name="successful"><c>true</c> if the operation succeeded.</param>
            <param name="result">The result of the operation if successful.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1.IsSuccessful">
            <summary>
                Indicates whether the operation succeeded.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1.Result">
            <summary>
                The result of the operation if successful.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy">
            <summary>
                The base class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> implementations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount">
            <summary>
                The default number of retry attempts.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay">
            <summary>
                The default maximum time delay between retries, must be nonnegative.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultRandomFactor">
            <summary>
                The default maximum random factor, must not be lesser than 1.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultExponentialBase">
            <summary>
                The default base for the exponential function used to compute the delay between retries, must be positive.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy._defaultCoefficient">
            <summary>
                The default coefficient for the exponential function used to compute the delay between retries, must be nonnegative.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.TimeSpan)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />.
            </summary>
            <param name="context"> The context on which the operations will be invoked. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxRetryDelay"> The maximum delay between retries. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,System.Int32,System.TimeSpan)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />.
            </summary>
            <param name="dependencies"> Parameter object containing service dependencies. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxRetryDelay"> The maximum delay between retries. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered">
            <summary>
                The list of exceptions that caused the operation to be retried so far.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random">
            <summary>
                A pseudo-random number generator that can be used to vary the delay between retries.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount">
            <summary>
                The maximum number of retry attempts.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay">
            <summary>
                The maximum delay between retries.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended">
            <summary>
                Indicates whether the strategy is suspended. The strategy is typically suspending while executing to avoid
                recursive execution from nested operations.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure">
            <summary>
                Indicates whether this <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> might retry the execution after a failure.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,``1},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}})">
            <summary>
                Executes the specified operation and returns the result.
            </summary>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
            <returns> The result from the operation. </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution">
            <summary>
                Method called before the first operation execution
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry">
            <summary>
                Method called before retrying the operation execution
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)">
            <summary>
                Determines whether the operation should be retried and the delay before the next attempt.
            </summary>
            <param name="lastException"> The exception thrown during the last execution attempt. </param>
            <returns>
                Returns the delay indicating how long to wait for before the next execution attempt if the operation should be retried;
                <c>null</c> otherwise
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldVerifySuccessOn(System.Exception)">
            <summary>
                Determines whether the specified exception could be thrown after a successful execution.
            </summary>
            <param name="exception"> The exception object to be verified. </param>
            <returns>
                <c>true</c> if the specified exception could be thrown after a successful execution, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)">
            <summary>
                Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="exception"> The exception object to be verified. </param>
            <returns>
                <c>true</c> if the specified exception is considered as transient, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.CallOnWrappedException``1(System.Exception,System.Func{System.Exception,``0})">
            <summary>
                Recursively gets InnerException from <paramref name="exception" /> as long as it is an
                exception created by Entity Framework and calls <paramref name="exceptionHandler" /> on the innermost one.
            </summary>
            <param name="exception"> The exception to be unwrapped. </param>
            <param name="exceptionHandler"> A delegate that will be called with the unwrapped exception. </param>
            <typeparam name="TResult"> The return type of <paramref name="exceptionHandler" />. </typeparam>
            <returns>
                The result from <paramref name="exceptionHandler" />.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies.#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
            <param name="currentDbContext"> Indirection to the current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance. </param>
            <param name="options"> The options for the current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance. </param>
            <param name="logger"> A logger.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies.Options">
            <summary>
                The options for the current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies.CurrentDbContext">
            <summary>
                Indirection to the current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies.Logger">
            <summary>
                The logger.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies.With(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="currentDbContext"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="options"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="logger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IDatabase">
            <summary>
                <para>
                    The main interaction point between a context and the database provider.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})">
            <summary>
                Persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <returns> The number of state entries persisted to the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)">
            <summary>
                Asynchronously persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of entries persisted to the database.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileQuery``1(Remotion.Linq.QueryModel)">
            <summary>
                Translates a query model into a function that can be executed to get query results from the database.
            </summary>
            <typeparam name="TResult"> The type of results returned by the query. </typeparam>
            <param name="queryModel"> An object model representing the query to be executed. </param>
            <returns> A function that will execute the query. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileAsyncQuery``1(Remotion.Linq.QueryModel)">
            <summary>
                Translates a query model into a function that can be executed to asynchronously get query results from the database.
            </summary>
            <typeparam name="TResult"> The type of results returned by the query. </typeparam>
            <param name="queryModel"> An object model representing the query to be executed. </param>
            <returns> A function that will asynchronously execute the query. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator">
            <summary>
                <para>
                    Creates and deletes databases for a given database provider.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted">
            <summary>
                <para>
                    Ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
            </summary>
            <returns> True if the database is deleted, false if it did not exist. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Asynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains true if the database is deleted,
                false if it did not exist.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated">
            <summary>
                Ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
            <returns> True if the database is created, false if it already existed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains true if the database is created,
                false if it already existed.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider">
            <summary>
                <para>
                    The primary point where a database provider can tell EF that it has been selected for the current context
                    and provide the services required for it to function.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider.Name">
            <summary>
                The unique name used to identify the database provider. This should be the same as the NuGet package name
                for the providers runtime.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider.IsConfigured(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Gets a value indicating whether this database provider has been configured for a given context.
            </summary>
            <param name="options"> The options for the context. </param>
            <returns> True if the database provider has been configured, otherwise false. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction">
            <summary>
                <para>
                    A transaction against the database.
                </para>
                <para>
                    Instances of this class are typically obtained from <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransaction" /> and it is not designed
                    to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.TransactionId">
            <summary>
                Gets the transaction identifier.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.Commit">
            <summary>
                Commits all changes made to the database in the current transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.Rollback">
            <summary>
                Discards all changes made to the database in the current transaction.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager">
            <summary>
                <para>
                    Creates and manages the current transaction.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransaction">
            <summary>
                Begins a new transaction.
            </summary>
            <returns> The newly created transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously begins a new transaction.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the newly created transaction.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CommitTransaction">
            <summary>
                Commits all changes made to the database in the current transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.RollbackTransaction">
            <summary>
                Discards all changes made to the database in the current transaction.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CurrentTransaction">
            <summary>
                Gets the current transaction.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy">
            <summary>
                A strategy that is used to execute a command or query against the database, possibly with logic to retry when a failure occurs.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure">
            <summary>
                Indicates whether this <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> might retry the execution after a failure.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,``1},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}})">
            <summary>
                Executes the specified operation and returns the result.
            </summary>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
            <returns> The result from the operation. </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory">
            <summary>
                Factory for <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory.Create">
            <summary>
                Creates a new  <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.ExecutionStrategyFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.ExecutionStrategyFactory.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.ExecutionStrategyFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                Creates a new instance of this class with the given service dependencies.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.ExecutionStrategyFactory.Create">
            <summary>
                Creates a new  <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.FallbackTypeMappingSource">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.Internal.FallbackTypeMappingSource._typeMapper">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.FallbackTypeMappingSource.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies,Microsoft.EntityFrameworkCore.Storage.ITypeMapper)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.FallbackTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.NoopExecutionStrategy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.NoopExecutionStrategy.RetriesOnFailure">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.NoopExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.NoopExecutionStrategy.Execute``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,``1},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.NoopExecutionStrategy.ExecuteAsync``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ITransactionEnlistmentManager">
            <summary>
                <para>
                    Manages the current <see cref="T:System.Transactions.Transaction" />.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ITransactionEnlistmentManager.EnlistedTransaction">
            <summary>
                The currently enlisted transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ITransactionEnlistmentManager.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
                Specifies an existing <see cref="T:System.Transactions.Transaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ITypeMapper">
            <summary>
                <para>
                    Maps .NET types to their corresponding provider database types.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ITypeMapper.IsTypeMapped(System.Type)">
            <summary>
                Gets a value indicating whether the given .NET type is mapped.
            </summary>
            <param name="clrType"> The .NET type. </param>
            <returns> True if the type can be mapped; otherwise false. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource">
            <summary>
                <para>
                    The core type mapping interface for EF Core, starting with version 2.1. Type mappings describe how a
                    provider maps CLR types/values to database types/values.
                </para>
                <para>
                    Warning: do not implement this interface directly. Instead, derive from <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase" />
                    for non-relational providers, or 'RelationalTypeMappingSourceBase' for relational providers.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
            </summary>
            <param name="property"> The property. </param>
            <returns> The type mapping, or <c>null</c> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Reflection.MemberInfo)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Reflection.MemberInfo" /> representing
                    a field or a property of a CLR type.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                </para>
            </summary>
            <param name="member"> The field or property. </param>
            <returns> The type mapping, or <c>null</c> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Type)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Type" />.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                    or <see cref="T:System.Reflection.MemberInfo" /> available, otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Reflection.MemberInfo)" />
                </para>
            </summary>
            <param name="type"> The CLR type. </param>
            <returns> The type mapping, or <c>null</c> if none was found. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.MaterializationContext">
            <summary>
                <para>
                    Parameter object containing context needed for materialization of an entity.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.MaterializationContext.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.MaterializationContext" /> instance.
            </summary>
            <param name="valueBuffer"> The <see cref="P:Microsoft.EntityFrameworkCore.Storage.MaterializationContext.ValueBuffer" /> to use to materialize an entity. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.MaterializationContext.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.MaterializationContext" /> instance.
            </summary>
            <param name="valueBuffer"> The <see cref="P:Microsoft.EntityFrameworkCore.Storage.MaterializationContext.ValueBuffer" /> to use to materialize an entity. </param>
            <param name="context"> The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance being used. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.MaterializationContext.ValueBuffer">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Storage.MaterializationContext.ValueBuffer" /> to use to materialize an entity.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.MaterializationContext.Context">
            <summary>
                The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance being used.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
            <summary>
                The exception that is thrown when the action failed more times than the configured limit.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo">
            <summary>
                Describes metadata needed to decide on a type mapping for a property or type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.#ctor(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" />.
            </summary>
            <param name="property"> The property for which mapping is needed. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" />.
            </summary>
            <param name="principals"> The principal property chain for the property for which mapping is needed. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.#ctor(System.Type)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" />.
            </summary>
            <param name="type"> The CLR type in the model for which mapping is needed. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" />.
            </summary>
            <param name="member"> The property or field for which mapping is needed. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.#ctor(System.Type,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" />.
            </summary>
            <param name="type"> The CLR type in the model for which mapping is needed. </param>
            <param name="keyOrIndex"> If <c>true</c>, then a special mapping for a key or index may be returned. </param>
            <param name="unicode"> Specifies Unicode or ANSI mapping, or <c>null</c> for default. </param>
            <param name="size"> Specifies a size for the mapping, or <c>null</c> for default. </param>
            <param name="rowVersion"> Specifies a row-version, or <c>null</c> for default. </param>
            <param name="precision"> Specifies a precision for the mapping, or <c>null</c> for default. </param>
            <param name="scale"> Specifies a scale for the mapping, or <c>null</c> for default. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" /> with the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" />.
            </summary>
            <param name="source"> The source info. </param>
            <param name="converter"> The converter to apply. </param>
            <param name="unicode"> Specifies Unicode or ANSI mapping, or <c>null</c> for default. </param>
            <param name="size"> Specifies a size for the mapping, or <c>null</c> for default. </param>
            <param name="precision"> Specifies a precision for the mapping, or <c>null</c> for default. </param>
            <param name="scale"> Specifies a scale for the mapping, or <c>null</c> for default. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.WithConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo@)">
            <summary>
                Returns a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" /> with the given converter applied.
            </summary>
            <param name="converterInfo"> The converter to apply. </param>
            <returns> The new mapping info. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.IsKeyOrIndex">
            <summary>
                Indicates whether or not the mapping is part of a key or index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.Size">
            <summary>
                Indicates the store-size to use for the mapping, or null if none.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.IsUnicode">
            <summary>
                Indicates whether or not the mapping supports Unicode, or null if not defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.IsRowVersion">
            <summary>
                Indicates whether or not the mapping will be used for a row version, or null if not defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.Precision">
            <summary>
                The suggested precision of the mapped data type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.Scale">
            <summary>
                The suggested scale of the mapped data type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.ClrType">
            <summary>
                The CLR type in the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.Equals(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo)">
            <summary>
                Compares this <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" /> to another to check if they represent the same mapping.
            </summary>
            <param name="other"> The other object. </param>
            <returns> <c>True</c> if they represent the same mapping; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.Equals(System.Object)">
            <summary>
                Compares this <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" /> to another to check if they represent the same mapping.
            </summary>
            <param name="obj"> The other object. </param>
            <returns> <c>True</c> if they represent the same mapping; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo.GetHashCode">
            <summary>
                Returns a hash code for this object.
            </summary>
            <returns> The hash code. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSource">
            <summary>
                <para>
                    The base class for non-relational type mapping starting with version 2.1. Non-relational providers
                    should derive from this class and override <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo@)" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSource.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies)">
            <summary>
                Initializes a new instance of the this class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="property"> The property. </param>
            <returns> The type mapping, or <c>null</c> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSource.FindMapping(System.Type)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Type" />.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                    or <see cref="T:System.Reflection.MemberInfo" /> available, otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSource.FindMapping(System.Reflection.MemberInfo)" />
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="type"> The CLR type. </param>
            <returns> The type mapping, or <c>null</c> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSource.FindMapping(System.Reflection.MemberInfo)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Reflection.MemberInfo" /> representing
                    a field or a property of a CLR type.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="member"> The field or property. </param>
            <returns> The type mapping, or <c>null</c> if none was found. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase">
            <summary>
                <para>
                    The base class for non-relational type mapping starting with version 2.1. Non-relational providers
                    should derive from this class and override <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo@)" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies)">
            <summary>
                Initializes a new instance of the this class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.Dependencies">
            <summary>
                Dependencies used to create this <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo@)">
            <summary>
                <para>
                    Overridden by database providers to find a type mapping for the given info.
                </para>
                <para>
                    The mapping info is populated with as much information about the required type mapping as
                    is available. Use all the information necessary to create the best mapping. Return <c>null</c>
                    if no mapping is available.
                </para>
            </summary>
            <param name="mappingInfo"> The mapping info to use to create the mapping. </param>
            <returns> The type mapping, or <c>null</c> if none could be found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.ValidateMapping(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Called after a mapping has been found so that it can be validated for the given property.
            </summary>
            <param name="mapping"> The mapping, if any. </param>
            <param name="property"> The property, if any. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="property"> The property. </param>
            <returns> The type mapping, or <c>null</c> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Type)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Type" />.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                    or <see cref="T:System.Reflection.MemberInfo" /> available, otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Reflection.MemberInfo)" />
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="type"> The CLR type. </param>
            <returns> The type mapping, or <c>null</c> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Reflection.MemberInfo)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Reflection.MemberInfo" /> representing
                    a field or a property of a CLR type.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="member"> The field or property. </param>
            <returns> The type mapping, or <c>null</c> if none was found. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
            <param name="valueConverterSelector"> The registry of known <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />s. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies.ValueConverterSelector">
            <summary>
                The registry of known <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />s.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies.With(Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="valueConverterSelector"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer">
            <summary>
                <para>
                    Represents a set of indexed values. Typically used to represent a row of data returned from a database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Empty">
            <summary>
                A buffer with no values in it.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.#ctor(System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" /> class.
            </summary>
            <param name="values"> The list of values for this buffer. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.#ctor(System.Object[],System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" /> class.
            </summary>
            <param name="values"> The list of values for this buffer. </param>
            <param name="offset">
                The starting slot in <paramref name="values" /> for this buffer.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Item(System.Int32)">
            <summary>
                Gets the value at a requested index.
            </summary>
            <param name="index"> The index of the value to get. </param>
            <returns> The value at the requested index. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Count">
            <summary>
                Gets the number of values in this buffer.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.WithOffset(System.Int32)">
            <summary>
                Creates a new buffer with data starting at the given index in the current buffer.
            </summary>
            <param name="offset">
                The slot in the current buffer that will be the starting slot in the new buffer.
            </param>
            <returns> The newly created buffer. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.IsEmpty">
            <summary>
                Gets a value indicating whether the value buffer is empty.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Equals(System.Object)">
            <summary>
                Determines if this value buffer is equivalent to a given object (i.e. if they are both value buffers and contain the same values).
            </summary>
            <param name="obj">
                The object to compare this value buffer to.
            </param>
            <returns>
                True if the object is a <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" /> and contains the same values, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.GetHashCode">
            <summary>
                Gets the hash code for the value buffer.
            </summary>
            <returns>
                The hash code for the value buffer.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToStringConverter">
            <summary>
                Converts <see cref="T:System.Boolean" /> values to and from two string values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToStringConverter.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter. A case-insensitive first character test is used
                when converting from the store.
            </summary>
            <param name="falseValue"> The string to use for <c>false</c>. </param>
            <param name="trueValue"> The string to use for <c>true</c>. </param>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToStringConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToTwoValuesConverter`1">
            <summary>
                Converts <see cref="T:System.Boolean" /> values to and from two different values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToTwoValuesConverter`1.#ctor(`0,`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                <para>
                    Creates a new instance of this converter that will convert a <c>false</c> false
                    to one value and a <c>true</c> to another.
                </para>
                <para>
                    Use <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToZeroOneConverter`1" /> for converting a <see cref="T:System.Boolean" /> to zero/one.
                </para>
            </summary>
            <param name="falseValue"> The value to convert to for <c>false</c>. </param>
            <param name="trueValue"> The value to convert to for <c>true</c>. </param>
            <param name="fromProvider"> Optional custom translator from store. </param>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToZeroOneConverter`1">
            <summary>
                Converts <see cref="T:System.Boolean" /> values to and from <c>0</c> and <c>1</c>.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToZeroOneConverter`1.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter. This converter preserves order.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToZeroOneConverter`1.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BytesToStringConverter">
            <summary>
                Converts arrays of bytes to and from strings.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BytesToStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.BytesToStringConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.CastingConverter`2">
            <summary>
                Converts <c>TModel</c> to and from <c>TProvider</c> using simple casts from one type
                to the other.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.CastingConverter`2.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.CastingConverter`2.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.CharToStringConverter">
            <summary>
                Converts a <see cref="T:System.Char" /> to and from a single-character <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.CharToStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter. This converter preserves order.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.CharToStringConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints">
            <summary>
                Specifies hints used by the type mapper when mapping using a <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints" /> instance. Any hint contained in the instance
                can be <c>null</c> to indicate it has not been specified.
            </summary>
            <param name="size"> The suggested size of the mapped data type.</param>
            <param name="precision"> The suggested precision of the mapped data type. </param>
            <param name="scale"> The suggested scale of the mapped data type. </param>
            <param name="unicode"> Whether or not the mapped data type should support Unicode. </param>
            <param name="valueGeneratorFactory"> An optional factory for creating a specific <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator"/>. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints.With(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Adds hints from the given object to this one. Hints that are already specified are
                not overridden.
            </summary>
            <param name="hints"> The hints to add. </param>
            <returns> The combined hints. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints.Size">
            <summary>
                The suggested size of the mapped data type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints.Precision">
            <summary>
                The suggested precision of the mapped data type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints.Scale">
            <summary>
                The suggested scale of the mapped data type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints.IsUnicode">
            <summary>
                Whether or not the mapped data type should support Unicode.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints.ValueGeneratorFactory">
            <summary>
                An optional factory for creating a specific <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator"/> to use for model
                values when this converter is being used.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBinaryConverter">
            <summary>
                Converts <see cref="T:System.DateTime" /> to and from binary representation in a long.
                The DateTime is truncated beyond 0.1 millisecond precision.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBinaryConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBinaryConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBytesConverter">
            <summary>
                Converts <see cref="T:System.DateTime" /> to and from arrays of bytes.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBytesConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBytesConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToStringConverter">
            <summary>
                Converts <see cref="T:System.DateTime" /> to and from strings.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToStringConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToBinaryConverter">
            <summary>
                Converts <see cref="T:System.DateTime" /> using <see cref="M:System.DateTime.ToBinary" />. This
                will preserve the <see cref="T:System.DateTimeKind" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToBinaryConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToBinaryConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToStringConverter">
            <summary>
                Converts <see cref="T:System.DateTime" /> to and from strings.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToStringConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToTicksConverter">
            <summary>
                Converts <see cref="T:System.DateTime" /> to and <see cref="P:System.DateTime.Ticks" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToTicksConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelectorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelectorDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToNumberConverter`2">
            <summary>
                Converts enum values to and from their underlying numeric representation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToNumberConverter`2.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter. This converter preserves order.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToNumberConverter`2.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToStringConverter`1">
            <summary>
                Converts enum values to and from their string representation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToStringConverter`1.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter. This converter does not preserve order.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToStringConverter`1.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToBytesConverter">
            <summary>
                Converts a <see cref="T:System.Guid" /> to and from an array of <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToBytesConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                <para>
                    Creates a new instance of this converter.
                </para>
                <para>
                    This converter does not preserve order because the ordering of bits in
                    the standard binary representation of a GUID does not match the ordering
                    in the standard string representation.
                </para>
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToBytesConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToStringConverter">
            <summary>
                Converts a <see cref="T:System.Guid" /> to and from a <see cref="T:System.String" /> using the
                standard "8-4-4-4-12" format./>.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToStringConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.CompositeValueConverter`3">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.CompositeValueConverter`3.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector">
            <summary>
                A registry of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> that can be used to find
                the preferred converter to use to convert to and from a given model type
                to a type that the database provider supports.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector.Select(System.Type,System.Type)">
            <summary>
                Returns the list of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> instances that can be
                used to convert the given model type. Converters nearer the front of
                the list should be used in preference to converters nearer the end.
            </summary>
            <param name="modelClrType"> The type for which a converter is needed. </param>
            <param name="providerClrType"> The store type to target, or null for any. </param>
            <returns> The converters available. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToBytesConverter`1">
            <summary>
                Converts numeric values to and from arrays of bytes.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToBytesConverter`1.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                <para>
                    Creates a new instance of this converter.
                </para>
                <para>
                    This converter supports <see cref="T:System.Double" />, <see cref="T:System.Single" />, <see cref="T:System.Decimal" />,
                    <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Int16" />, <see cref="T:System.Byte" />,
                    <see cref="T:System.UInt32" />, <see cref="T:System.UInt64" />, <see cref="T:System.UInt16" />, <see cref="T:System.SByte" />,
                    and <see cref="T:System.Char" />.
                </para>
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToBytesConverter`1.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToStringConverter`1">
            <summary>
                Converts numeric values to and from their string representation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToStringConverter`1.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToStringConverter`1.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToBytesConverter">
            <summary>
                Converts strings to and from arrays of bytes.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToBytesConverter.#ctor(System.Text.Encoding,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="encoding"> The string encoding to use. </param>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToBytesConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToStringConverter">
            <summary>
                Converts <see cref="T:System.TimeSpan" /> to and from strings.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToStringConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToTicksConverter">
            <summary>
                Converts <see cref="T:System.TimeSpan" /> to and <see cref="P:System.TimeSpan.Ticks" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToTicksConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new instance of this converter.
            </summary>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToTicksConverter.DefaultInfo">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> for the default use of this converter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter">
            <summary>
                Defines conversions from an object of one type in a model to an object of the same or
                different type in the store.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.#ctor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> class.
            </summary>
            <param name="convertToProviderExpression">
                The expression to convert objects when writing data to the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </param>
            <param name="convertFromProviderExpression">
                The expression to convert objects when reading data from the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </param>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertToProvider">
            <summary>
                Gets the function to convert objects when writing data to the store,
                setup to handle nulls, boxing, and non-exact matches of simple types.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertFromProvider">
            <summary>
                Gets the function to convert objects when reading data from the store,
                setup to handle nulls, boxing, and non-exact matches of simple types.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertToProviderExpression">
            <summary>
                Gets the expression to convert objects when writing data to the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertFromProviderExpression">
            <summary>
                Gets the expression to convert objects when reading data from the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ModelClrType">
            <summary>
                The CLR type used in the EF model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ProviderClrType">
            <summary>
                The CLR type used when reading and writing from the store.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.MappingHints">
            <summary>
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.CheckTypeSupported(System.Type,System.Type,System.Type[])">
            <summary>
                Checks that the type used with a value converter is supported by that converter and throws if not.
            </summary>
            <param name="type"> The type to check. </param>
            <param name="converterType"> The value converter type. </param>
            <param name="supportedTypes"> The types that are supported. </param>
            <returns> The given type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ComposeWith(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
                Composes another <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> instance with this one such that
                the result of the first conversion is used as the input to the second conversion.
            </summary>
            <param name="secondConverter"> The second converter. </param>
            <returns> The composed converter. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo">
            <summary>
                Contains information on an available <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> including a factory to
                create an instance.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo.#ctor(System.Type,System.Type,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter},Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" /> instance.
            </summary>
            <param name="modelClrType"> The CLR type used in the EF model. </param>
            <param name="providerClrType"> The CLR type used when reading and writing from the database provider. </param>
            <param name="factory"> A factory to create the converter, if needed. </param>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo.ModelClrType">
            <summary>
                The CLR type used in the EF model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo.ProviderClrType">
            <summary>
                The CLR type used when reading and writing from the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo.MappingHints">
            <summary>
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource"/> to create data types with appropriate
                facets for the converted data.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo.Create">
            <summary>
                Creates an instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector">
            <summary>
                A registry of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> instances that can be used to find
                the preferred converter to use to convert to and from a given model type
                to a type that the database provider supports.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelectorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector.Dependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector.Select(System.Type,System.Type)">
            <summary>
                Returns the list of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> instances that can be
                used to convert the given model type. Converters nearer the front of
                the list should be used in preference to converters nearer the end.
            </summary>
            <param name="modelClrType"> The type for which a converter is needed. </param>
            <param name="providerClrType"> The database provider type to target, or null for any. </param>
            <returns> The converters available. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2">
            <summary>
                Defines conversions from an object of one type in a model to an object of the same or
                different type in the store.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Linq.Expressions.Expression{System.Func{`1,`0}},Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2" /> class.
            </summary>
            <param name="convertToProviderExpression"> An expression to convert objects when writing data to the store. </param>
            <param name="convertFromProviderExpression"> An expression to convert objects when reading data from the store. </param>
            <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" /> to create data types with appropriate
                facets for the converted data.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2.ConvertToProvider">
            <summary>
                Gets the function to convert objects when writing data to the store,
                setup to handle nulls, boxing, and non-exact matches of simple types.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2.ConvertFromProvider">
            <summary>
                Gets the function to convert objects when reading data from the store,
                setup to handle nulls, boxing, and non-exact matches of simple types.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2.ConvertToProviderExpression">
            <summary>
                Gets the expression to convert objects when writing data to the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2.ConvertFromProviderExpression">
            <summary>
                Gets the expression to convert objects when reading data from the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2.ModelClrType">
            <summary>
                The CLR type used in the EF model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2.ProviderClrType">
            <summary>
                The CLR type used when reading and writing from the store.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions.BuildCurrentValuesString(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions.BuildOriginalValuesString(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry">
            <summary>
                <para>
                    The information passed to a database provider to save changes to an entity to the database.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType">
            <summary>
                The type of entity to be saved to the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState">
            <summary>
                The state of the entity to be saved.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry">
            <summary>
                The other entry that has the same key values, if one exists.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets a value indicating if the specified property is modified. If true, the current value assigned
                to the property should be saved to the database.
            </summary>
            <param name="property"> The property to be checked. </param>
            <returns> True if the property is modified, otherwise false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets a value indicating if the specified property has a temporary value.
            </summary>
            <param name="property"> The property to be checked. </param>
            <returns> True if the property has a temporary value, otherwise false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets a value indicating if the specified property should have a value generated by the database.
            </summary>
            <param name="property"> The property to be checked. </param>
            <returns> True if the property should have a value generated by the database, otherwise false. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                Gets the value assigned to the property.
            </summary>
            <param name="propertyBase"> The property to get the value for. </param>
            <returns> The value for the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                Gets the value assigned to the property when it was retrieved from the database.
            </summary>
            <param name="propertyBase"> The property to get the value for. </param>
            <returns> The value for the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                Gets the value assigned to the property.
            </summary>
            <param name="propertyBase"> The property to get the value for. </param>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <returns> The value for the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the value assigned to the property when it was retrieved from the database.
            </summary>
            <param name="property"> The property to get the value for. </param>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <returns> The value for the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)">
            <summary>
                Gets the value assigned to the property.
            </summary>
            <param name="propertyBase"> The property to set the value for. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry">
            <summary>
                Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity being saved. <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> is an API optimized for
                application developers and <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" /> is optimized for database providers, but there may be instances
                where a database provider wants to access information from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" />.
            </summary>
            <returns> An <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for this entity. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.GuidValueGenerator">
            <summary>
                Generates <see cref="T:System.Guid" /> values using <see cref="M:System.Guid.NewGuid" />.
                The generated values are non-temporary, meaning they will be saved to the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.GuidValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.GuidValueGenerator.GeneratesTemporaryValues">
            <summary>
                Gets a value indicating whether the values generated are temporary or permanent. This implementation
                always returns false, meaning the generated values will be saved to the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1">
            <summary>
                <para>
                    Acts as a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />  by requesting a block of values from the
                    underlying database and returning them one by one. Will ask the underlying
                    database for another block when the current block is exhausted.
                </para>
                <para>
                    A block is represented by a low value fetched from the database, and then a block size
                    that indicates how many sequential values can be used, starting from the low value, before
                    a new low value must be fetched from the database.
                </para>
            </summary>
            <typeparam name="TValue"> The type of values that are generated. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1" /> class.
            </summary>
            <param name="generatorState"> The state used to keep track of which value to return next. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1.NextAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1.GetNewLowValue">
            <summary>
                Gets the low value for the next block of values to be used.
            </summary>
            <returns> The low value for the next block of values to be used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1.GetNewLowValueAsync(System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState">
            <summary>
                The thread safe state used by <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState" /> class.
            </summary>
            <param name="blockSize">
                The number of sequential values that can be used, starting from the low value, before
                a new low value must be fetched from the database.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next``1(System.Func{System.Int64})">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <typeparam name="TValue"> The type of values being generated. </typeparam>
            <param name="getNewLowValue">
                A function to get the next low value if needed.
            </param>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <typeparam name="TValue"> The type of values being generated. </typeparam>
            <param name="getNewLowValue">
                A function to get the next low value if needed.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.BinaryValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.BinaryValueGenerator.#ctor(System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.BinaryValueGenerator.GeneratesTemporaryValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.BinaryValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.StringValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.StringValueGenerator.#ctor(System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.StringValueGenerator.GeneratesTemporaryValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.StringValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryByteValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryByteValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryCharValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryCharValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeOffsetValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeOffsetValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeOffsetValueGenerator.GeneratesTemporaryValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeValueGenerator.GeneratesTemporaryValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDecimalValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDecimalValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDoubleValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDoubleValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryFloatValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryFloatValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryIntValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryIntValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryLongValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryLongValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryNumberValueGenerator`1">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryNumberValueGenerator`1.GeneratesTemporaryValues">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryNumberValueGeneratorFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryNumberValueGeneratorFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporarySByteValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporarySByteValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryShortValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryShortValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryUIntValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryUIntValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryULongValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryULongValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryUShortValueGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryUShortValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorCache">
            <summary>
                <para>
                    Keeps a cache of value generators for properties.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorCache.GetOrAdd(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})">
            <summary>
                Gets the existing value generator from the cache, or creates a new one if one is not present in
                the cache.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType">
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types,
                this entity type may be different from the declared entity type on <paramref name="property" />
            </param>
            <param name="factory"> Factory to create a new value generator if one is not present in the cache. </param>
            <returns> The existing or newly created value generator. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorSelector">
            <summary>
                <para>
                    Selects value generators to be used to generate values for properties of entities.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorSelector.Select(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Selects the appropriate value generator for a given property.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType">
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types,
                this entity type may be different from the declared entity type on <paramref name="property" />
            </param>
            <returns> The value generator to be used. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.SequentialGuidValueGenerator">
            <summary>
                Generates sequential <see cref="T:System.Guid" /> values using the same algorithm as NEWSEQUENTIALID()
                in Microsoft SQL Server. This is useful when entities are being saved to a database where sequential
                GUIDs will provide a performance benefit. The generated values are non-temporary, meaning they will
                be saved to the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.SequentialGuidValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.SequentialGuidValueGenerator.GeneratesTemporaryValues">
            <summary>
                Gets a value indicating whether the values generated are temporary or permanent. This implementation
                always returns false, meaning the generated values will be saved to the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.TemporaryGuidValueGenerator">
            <summary>
                Generates <see cref="T:System.Guid" /> values using <see cref="M:System.Guid.NewGuid" />.
                The generated values are temporary, meaning they will be replaced by database
                generated values when the entity is saved.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.TemporaryGuidValueGenerator.GeneratesTemporaryValues">
            <summary>
                Gets a value indicating whether the values generated are temporary or permanent. This implementation
                always returns true, meaning the generated values will be replaced by database generated values when
                the entity is saved
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator">
            <summary>
                Generates values for properties when an entity is added to a context.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValue(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Template method to be overridden by implementations to perform value generation.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The generated value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValueAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)">
            <summary>
                Template method to be overridden by implementations to perform value generation.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The generated value. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.GeneratesTemporaryValues">
            <summary>
                <para>
                    Gets a value indicating whether the values generated are temporary (i.e they should be replaced
                    by database generated values when the entity is saved) or are permanent (i.e. the generated values
                    should be saved to the database).
                </para>
                <para>
                    An example of temporary value generation is generating negative numbers for an integer primary key
                    that are then replaced by positive numbers generated by the database when the entity is saved. An
                    example of permanent value generation are client-generated values for a <see cref="T:System.Guid" /> primary
                    key which are saved to the database.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCache">
            <summary>
                <para>
                    Keeps a cache of value generators for properties.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCache.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCacheDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCache" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCache.GetOrAdd(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})">
            <summary>
                Gets the existing value generator from the cache, or creates a new one if one is not present in
                the cache.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType">
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types,
                this entity type may be different from the declared entity type on <paramref name="property" />
            </param>
            <param name="factory"> Factory to create a new value generator if one is not present in the cache. </param>
            <returns> The existing or newly created value generator. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCacheDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCache" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCacheDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCache" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory">
            <summary>
                Base class for factories that create value generators.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Creates a new value generator.
            </summary>
            <param name="property"> The property to create the value generator for. </param>
            <returns> The newly created value generator. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector">
            <summary>
                <para>
                    Selects value generators to be used to generate values for properties of entities.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector.Cache">
            <summary>
                The cache being used to store value generator instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelectorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector.Dependencies">
            <summary>
                Parameter object containing dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector.Select(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Selects the appropriate value generator for a given property.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType">
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types,
                this entity type may be different from the declared entity type on <paramref name="property" />
            </param>
            <returns> The value generator to be used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector.Create(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Creates a new value generator for the given property.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType">
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types,
                this entity type may be different from the declared entity type on <paramref name="property" />
            </param>
            <returns> The newly created value generator. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelectorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelectorDependencies.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorCache)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
            </summary>
            <param name="cache"> The cache to be used to store value generator instances. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelectorDependencies.Cache">
            <summary>
                The cache being used to store value generator instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelectorDependencies.With(Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorCache)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="cache"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator`1">
            <summary>
                Generates values for properties when an entity is added to a context.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator`1.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Template method to be overridden by implementations to perform value generation.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The generated value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator`1.NextAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)">
            <summary>
                Template method to be overridden by implementations to perform value generation.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The generated value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator`1.NextValue(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator`1.NextValueAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.WarningBehavior">
            <summary>
                The runtime behavior of warnings generated by Entity Framework
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.WarningBehavior.Log">
            <summary>
                A warning is logged.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.WarningBehavior.Ignore">
            <summary>
                No action is taken.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.WarningBehavior.Throw">
            <summary>
                An exception is thrown.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions">
            <summary>
                Extension methods for setting up Entity Framework related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
             <summary>
                 Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                 You use this method when using dependency injection in your application, such as with ASP.NET.
                 For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
             </summary>
             <example>
                 <code>
                      public void ConfigureServices(IServiceCollection services)
                      {
                          var connectionString = "connection string to database";
            
                          services.AddDbContext&lt;MyContext&gt;(options => options.UseSqlServer(connectionString));
                      }
                  </code>
             </example>
             <typeparam name="TContext"> The type of context to be registered. </typeparam>
             <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
             <param name="optionsAction">
                 <para>
                     An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                     alternative to performing configuration of the context by overriding the
                     <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                 </para>
                 <para>
                     If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                     been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                     in addition to configuration performed here.
                 </para>
                 <para>
                     In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                     <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                 </para>
             </param>
             <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
             <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
             <returns>
                 The same service collection so that multiple calls can be chained.
             </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
             <summary>
                 Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                 You use this method when using dependency injection in your application, such as with ASP.NET.
                 For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
             </summary>
             <example>
                 <code>
                      public void ConfigureServices(IServiceCollection services)
                      {
                          var connectionString = "connection string to database";
            
                          services.AddDbContext&lt;MyContext&gt;(options => options.UseSqlServer(connectionString));
                      }
                  </code>
             </example>
             <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
             <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
             <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
             <param name="optionsAction">
                 <para>
                     An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                     alternative to performing configuration of the context by overriding the
                     <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                 </para>
                 <para>
                     If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                     been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                     in addition to configuration performed here.
                 </para>
                 <para>
                     In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                     <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                 </para>
             </param>
             <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
             <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
             <returns>
                 The same service collection so that multiple calls can be chained.
             </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)">
            <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                DbContext instances, rather than creating new instances for each request.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
            <typeparam name="TContext"> The type of context to be registered. </typeparam>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
            <param name="optionsAction">
                <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
            </param>
            <param name="poolSize">
                ESets the maximum number of instances retained by the pool.
            </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)">
            <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                DbContext instances, rather than creating new instances for each request.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
            <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
            <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
            <param name="optionsAction">
                <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
            </param>
            <param name="poolSize">
                ESets the maximum number of instances retained by the pool.
            </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)">
            <summary>
                <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                    Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                    DbContext instances, rather than creating new instances for each request.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
                <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
            </summary>
            <typeparam name="TContext"> The type of context to be registered. </typeparam>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
            <param name="optionsAction">
                <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
            </param>
            <param name="poolSize">
                Sets the maximum number of instances retained by the pool.
            </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)">
            <summary>
                <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                    Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                    DbContext instances, rather than creating new instances for each request.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
                <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
            </summary>
            <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
            <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
            <param name="optionsAction">
                <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
            </param>
            <param name="poolSize">
                Sets the maximum number of instances retained by the pool.
            </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
             <summary>
                 Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                 You use this method when using dependency injection in your application, such as with ASP.NET.
                 For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
             </summary>
             <example>
                 <code>
                      public void ConfigureServices(IServiceCollection services)
                      {
                          var connectionString = "connection string to database";
            
                          services.AddDbContext&lt;MyContext&gt;(ServiceLifetime.Scoped);
                      }
                  </code>
             </example>
             <typeparam name="TContext"> The type of context to be registered. </typeparam>
             <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
             <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
             <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
             <returns>
                 The same service collection so that multiple calls can be chained.
             </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
             <summary>
                 Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                 You use this method when using dependency injection in your application, such as with ASP.NET.
                 For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
             </summary>
             <example>
                 <code>
                      public void ConfigureServices(IServiceCollection services)
                      {
                          var connectionString = "connection string to database";
            
                          services.AddDbContext&lt;MyContext&gt;(ServiceLifetime.Scoped);
                      }
                  </code>
             </example>
             <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
             <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
             <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
             <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
             <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
             <returns>
                 The same service collection so that multiple calls can be chained.
             </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
             <summary>
                 <para>
                     Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                     You use this method when using dependency injection in your application, such as with ASP.NET.
                     For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                 </para>
                 <para>
                     This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                     This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                     provider.
                     By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                     <see cref="T:System.IServiceProvider" />
                     for internal Entity Framework services.
                 </para>
             </summary>
             <example>
                 <code>
                      public void ConfigureServices(IServiceCollection services)
                      {
                          var connectionString = "connection string to database";
            
                          services
                              .AddEntityFrameworkSqlServer()
                              .AddDbContext&lt;MyContext&gt;((serviceProvider, options) =>
                                  options.UseSqlServer(connectionString)
                                         .UseInternalServiceProvider(serviceProvider));
                      }
                  </code>
             </example>
             <typeparam name="TContext"> The type of context to be registered. </typeparam>
             <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
             <param name="optionsAction">
                 <para>
                     An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                     alternative to performing configuration of the context by overriding the
                     <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                 </para>
                 <para>
                     If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                     been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                     in addition to configuration performed here.
                 </para>
                 <para>
                     In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                     <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                 </para>
             </param>
             <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
             <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
             <returns>
                 The same service collection so that multiple calls can be chained.
             </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
             <summary>
                 <para>
                     Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                     You use this method when using dependency injection in your application, such as with ASP.NET.
                     For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                 </para>
                 <para>
                     This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                     This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                     provider.
                     By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                     <see cref="T:System.IServiceProvider" />
                     for internal Entity Framework services.
                 </para>
             </summary>
             <example>
                 <code>
                      public void ConfigureServices(IServiceCollection services)
                      {
                          var connectionString = "connection string to database";
            
                          services
                              .AddEntityFrameworkSqlServer()
                              .AddDbContext&lt;MyContext&gt;((serviceProvider, options) =>
                                  options.UseSqlServer(connectionString)
                                         .UseInternalServiceProvider(serviceProvider));
                      }
                  </code>
             </example>
             <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
             <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
             <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
             <param name="optionsAction">
                 <para>
                     An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                     alternative to performing configuration of the context by overriding the
                     <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                 </para>
                 <para>
                     If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                     been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                     in addition to configuration performed here.
                 </para>
                 <para>
                     In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                     <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                 </para>
             </param>
             <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
             <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
             <returns>
                 The same service collection so that multiple calls can be chained.
             </returns>
        </member>
        <member name="T:System.Transactions.TransactionsDatabaseFacadeExtensions">
            <summary>
                Extension methods for the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> returned from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />
                for use with <see cref="T:System.Transactions.Transaction" />.
            </summary>
        </member>
        <member name="M:System.Transactions.TransactionsDatabaseFacadeExtensions.EnlistTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Transactions.Transaction)">
            <summary>
                Specifies an existing <see cref="T:System.Transactions.Transaction" /> to be used for database operations.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
            <param name="transaction"> The transaction to be used. </param>
        </member>
        <member name="M:System.Transactions.TransactionsDatabaseFacadeExtensions.GetEnlistedTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Returns the currently enlisted transaction.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
            <returns> The currently enlisted transaction. </returns>
        </member>
    </members>
</doc>
