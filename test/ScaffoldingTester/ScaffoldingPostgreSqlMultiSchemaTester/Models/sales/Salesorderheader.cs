// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace ScaffoldingPostgreSqlMultiSchemaTester.Models
{
    /// <summary>
    /// General sales order information.
    /// </summary>
    public partial class Salesorderheader
    {
        public Salesorderheader()
        {
            Salesorderdetail = new HashSet<Salesorderdetail>();
            Salesorderheadersalesreason = new HashSet<Salesorderheadersalesreason>();
        }

        /// <summary>
        /// Primary key.
        /// </summary>
        public int Salesorderid { get; set; }
        /// <summary>
        /// Incremental number to track changes to the sales order over time.
        /// </summary>
        public int Revisionnumber { get; set; }
        /// <summary>
        /// Dates the sales order was created.
        /// </summary>
        public DateTime Orderdate { get; set; }
        /// <summary>
        /// Date the order is due to the customer.
        /// </summary>
        public DateTime Duedate { get; set; }
        /// <summary>
        /// Date the order was shipped to the customer.
        /// </summary>
        public DateTime? Shipdate { get; set; }
        /// <summary>
        /// Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        /// </summary>
        public int Status { get; set; }
        /// <summary>
        /// 0 = Order placed by sales person. 1 = Order placed online by customer.
        /// </summary>
        public bool? Onlineorderflag { get; set; }
        /// <summary>
        /// Customer purchase order number reference.
        /// </summary>
        public string Purchaseordernumber { get; set; }
        /// <summary>
        /// Financial accounting number reference.
        /// </summary>
        public string Accountnumber { get; set; }
        /// <summary>
        /// Customer identification number. Foreign key to Customer.BusinessEntityID.
        /// </summary>
        public int Customerid { get; set; }
        /// <summary>
        /// Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
        /// </summary>
        public int? Salespersonid { get; set; }
        /// <summary>
        /// Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
        /// </summary>
        public int? Territoryid { get; set; }
        /// <summary>
        /// Customer billing address. Foreign key to Address.AddressID.
        /// </summary>
        public int Billtoaddressid { get; set; }
        /// <summary>
        /// Customer shipping address. Foreign key to Address.AddressID.
        /// </summary>
        public int Shiptoaddressid { get; set; }
        /// <summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        /// </summary>
        public int Shipmethodid { get; set; }
        /// <summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        /// </summary>
        public int? Creditcardid { get; set; }
        /// <summary>
        /// Approval code provided by the credit card company.
        /// </summary>
        public string Creditcardapprovalcode { get; set; }
        /// <summary>
        /// Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
        /// </summary>
        public int? Currencyrateid { get; set; }
        /// <summary>
        /// Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        /// </summary>
        public decimal Subtotal { get; set; }
        /// <summary>
        /// Tax amount.
        /// </summary>
        public decimal Taxamt { get; set; }
        /// <summary>
        /// Shipping cost.
        /// </summary>
        public decimal Freight { get; set; }
        /// <summary>
        /// Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        /// </summary>
        public decimal? Totaldue { get; set; }
        /// <summary>
        /// Sales representative comments.
        /// </summary>
        public string Comment { get; set; }
        public Guid Rowguid { get; set; }
        public DateTime Modifieddate { get; set; }

        public virtual Address Billtoaddress { get; set; }
        public virtual Creditcard Creditcard { get; set; }
        public virtual Currencyrate Currencyrate { get; set; }
        public virtual Customer Customer { get; set; }
        public virtual Salesperson Salesperson { get; set; }
        public virtual Shipmethod Shipmethod { get; set; }
        public virtual Address Shiptoaddress { get; set; }
        public virtual Salesterritory Territory { get; set; }
        public virtual ICollection<Salesorderdetail> Salesorderdetail { get; set; }
        public virtual ICollection<Salesorderheadersalesreason> Salesorderheadersalesreason { get; set; }
    }
}