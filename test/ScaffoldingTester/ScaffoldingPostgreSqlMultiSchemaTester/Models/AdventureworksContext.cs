// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ScaffoldingPostgreSqlMultiSchemaTester.Models
{
    public partial class AdventureworksContext : DbContext
    {
        public AdventureworksContext()
        {
        }

        public AdventureworksContext(DbContextOptions<AdventureworksContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<Addresstype> Addresstype { get; set; }
        public virtual DbSet<Billofmaterials> Billofmaterials { get; set; }
        public virtual DbSet<Businessentity> Businessentity { get; set; }
        public virtual DbSet<Businessentityaddress> Businessentityaddress { get; set; }
        public virtual DbSet<Businessentitycontact> Businessentitycontact { get; set; }
        public virtual DbSet<Contacttype> Contacttype { get; set; }
        public virtual DbSet<Countryregion> Countryregion { get; set; }
        public virtual DbSet<Countryregioncurrency> Countryregioncurrency { get; set; }
        public virtual DbSet<Creditcard> Creditcard { get; set; }
        public virtual DbSet<Culture> Culture { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<Currencyrate> Currencyrate { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<Emailaddress> Emailaddress { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Employeedepartmenthistory> Employeedepartmenthistory { get; set; }
        public virtual DbSet<Employeepayhistory> Employeepayhistory { get; set; }
        public virtual DbSet<Illustration> Illustration { get; set; }
        public virtual DbSet<Jobcandidate> Jobcandidate { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<Password> Password { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<Personcreditcard> Personcreditcard { get; set; }
        public virtual DbSet<Personphone> Personphone { get; set; }
        public virtual DbSet<Phonenumbertype> Phonenumbertype { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Productcategory> Productcategory { get; set; }
        public virtual DbSet<Productcosthistory> Productcosthistory { get; set; }
        public virtual DbSet<Productdescription> Productdescription { get; set; }
        public virtual DbSet<Productdocument> Productdocument { get; set; }
        public virtual DbSet<Productinventory> Productinventory { get; set; }
        public virtual DbSet<Productlistpricehistory> Productlistpricehistory { get; set; }
        public virtual DbSet<Productmodel> Productmodel { get; set; }
        public virtual DbSet<Productmodelillustration> Productmodelillustration { get; set; }
        public virtual DbSet<Productmodelproductdescriptionculture> Productmodelproductdescriptionculture { get; set; }
        public virtual DbSet<Productphoto> Productphoto { get; set; }
        public virtual DbSet<Productproductphoto> Productproductphoto { get; set; }
        public virtual DbSet<Productreview> Productreview { get; set; }
        public virtual DbSet<Productsubcategory> Productsubcategory { get; set; }
        public virtual DbSet<Productvendor> Productvendor { get; set; }
        public virtual DbSet<Purchaseorderdetail> Purchaseorderdetail { get; set; }
        public virtual DbSet<Purchaseorderheader> Purchaseorderheader { get; set; }
        public virtual DbSet<Salesorderdetail> Salesorderdetail { get; set; }
        public virtual DbSet<Salesorderheader> Salesorderheader { get; set; }
        public virtual DbSet<Salesorderheadersalesreason> Salesorderheadersalesreason { get; set; }
        public virtual DbSet<Salesperson> Salesperson { get; set; }
        public virtual DbSet<Salespersonquotahistory> Salespersonquotahistory { get; set; }
        public virtual DbSet<Salesreason> Salesreason { get; set; }
        public virtual DbSet<Salestaxrate> Salestaxrate { get; set; }
        public virtual DbSet<Salesterritory> Salesterritory { get; set; }
        public virtual DbSet<Salesterritoryhistory> Salesterritoryhistory { get; set; }
        public virtual DbSet<Scrapreason> Scrapreason { get; set; }
        public virtual DbSet<Shift> Shift { get; set; }
        public virtual DbSet<Shipmethod> Shipmethod { get; set; }
        public virtual DbSet<Shoppingcartitem> Shoppingcartitem { get; set; }
        public virtual DbSet<Specialoffer> Specialoffer { get; set; }
        public virtual DbSet<Specialofferproduct> Specialofferproduct { get; set; }
        public virtual DbSet<Stateprovince> Stateprovince { get; set; }
        public virtual DbSet<Store> Store { get; set; }
        public virtual DbSet<Transactionhistory> Transactionhistory { get; set; }
        public virtual DbSet<Transactionhistoryarchive> Transactionhistoryarchive { get; set; }
        public virtual DbSet<Unitmeasure> Unitmeasure { get; set; }
        public virtual DbSet<Vendor> Vendor { get; set; }
        public virtual DbSet<Workorder> Workorder { get; set; }
        public virtual DbSet<Workorderrouting> Workorderrouting { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("tablefunc")
                .HasPostgresExtension("uuid-ossp");

            modelBuilder.Entity<Address>(entity =>
            {
                entity.ToTable("address", "person");

                entity.HasComment("Street address information for customers, employees, and vendors.");

                entity.Property(e => e.Addressid)
                    .HasColumnName("addressid")
                    .HasComment("Primary key for Address records.");

                entity.Property(e => e.Addressline1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("addressline1")
                    .HasComment("First street address line.");

                entity.Property(e => e.Addressline2)
                    .HasMaxLength(60)
                    .HasColumnName("addressline2")
                    .HasComment("Second street address line.");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("city")
                    .HasComment("Name of the city.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Postalcode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("postalcode")
                    .HasComment("Postal code for the street address.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Spatiallocation)
                    .HasMaxLength(44)
                    .HasColumnName("spatiallocation")
                    .HasComment("Latitude and longitude of this address.");

                entity.Property(e => e.Stateprovinceid)
                    .HasColumnName("stateprovinceid")
                    .HasComment("Unique identification number for the state or province. Foreign key to StateProvince table.");

                entity.HasOne(d => d.Stateprovince)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.Stateprovinceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Address_StateProvince_StateProvinceID");
            });

            modelBuilder.Entity<Addresstype>(entity =>
            {
                entity.ToTable("addresstype", "person");

                entity.HasComment("Types of addresses stored in the Address table.");

                entity.Property(e => e.Addresstypeid)
                    .HasColumnName("addresstypeid")
                    .HasComment("Primary key for AddressType records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Address type description. For example, Billing, Home, or Shipping.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");
            });

            modelBuilder.Entity<Billofmaterials>(entity =>
            {
                entity.ToTable("billofmaterials", "production");

                entity.HasComment("Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.");

                entity.Property(e => e.Billofmaterialsid)
                    .HasColumnName("billofmaterialsid")
                    .HasComment("Primary key for BillOfMaterials records.");

                entity.Property(e => e.Bomlevel)
                    .HasColumnName("bomlevel")
                    .HasComment("Indicates the depth the component is from its parent (AssemblyID).");

                entity.Property(e => e.Componentid)
                    .HasColumnName("componentid")
                    .HasComment("Component identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Enddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("enddate")
                    .HasComment("Date the component stopped being used in the assembly item.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Perassemblyqty)
                    .HasPrecision(8, 2)
                    .HasColumnName("perassemblyqty")
                    .HasDefaultValueSql("1.00")
                    .HasComment("Quantity of the component needed to create the assembly.");

                entity.Property(e => e.Productassemblyid)
                    .HasColumnName("productassemblyid")
                    .HasComment("Parent product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Startdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("startdate")
                    .HasDefaultValueSql("now()")
                    .HasComment("Date the component started being used in the assembly item.");

                entity.Property(e => e.Unitmeasurecode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("unitmeasurecode")
                    .IsFixedLength()
                    .HasComment("Standard code identifying the unit of measure for the quantity.");

                entity.HasOne(d => d.Component)
                    .WithMany(p => p.BillofmaterialsComponent)
                    .HasForeignKey(d => d.Componentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BillOfMaterials_Product_ComponentID");

                entity.HasOne(d => d.Productassembly)
                    .WithMany(p => p.BillofmaterialsProductassembly)
                    .HasForeignKey(d => d.Productassemblyid)
                    .HasConstraintName("FK_BillOfMaterials_Product_ProductAssemblyID");

                entity.HasOne(d => d.UnitmeasurecodeNavigation)
                    .WithMany(p => p.Billofmaterials)
                    .HasForeignKey(d => d.Unitmeasurecode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BillOfMaterials_UnitMeasure_UnitMeasureCode");
            });

            modelBuilder.Entity<Businessentity>(entity =>
            {
                entity.ToTable("businessentity", "person");

                entity.HasComment("Source of the ID that connects vendors, customers, and employees with address and contact information.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key for all customers, vendors, and employees.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");
            });

            modelBuilder.Entity<Businessentityaddress>(entity =>
            {
                entity.HasKey(e => new { e.Businessentityid, e.Addressid, e.Addresstypeid })
                    .HasName("PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressType");

                entity.ToTable("businessentityaddress", "person");

                entity.HasComment("Cross-reference table mapping customers, vendors, and employees to their addresses.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key. Foreign key to BusinessEntity.BusinessEntityID.");

                entity.Property(e => e.Addressid)
                    .HasColumnName("addressid")
                    .HasComment("Primary key. Foreign key to Address.AddressID.");

                entity.Property(e => e.Addresstypeid)
                    .HasColumnName("addresstypeid")
                    .HasComment("Primary key. Foreign key to AddressType.AddressTypeID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.Businessentityaddress)
                    .HasForeignKey(d => d.Addressid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessEntityAddress_Address_AddressID");

                entity.HasOne(d => d.Addresstype)
                    .WithMany(p => p.Businessentityaddress)
                    .HasForeignKey(d => d.Addresstypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessEntityAddress_AddressType_AddressTypeID");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Businessentityaddress)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID");
            });

            modelBuilder.Entity<Businessentitycontact>(entity =>
            {
                entity.HasKey(e => new { e.Businessentityid, e.Personid, e.Contacttypeid })
                    .HasName("PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeI");

                entity.ToTable("businessentitycontact", "person");

                entity.HasComment("Cross-reference table mapping stores, vendors, and employees to people");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key. Foreign key to BusinessEntity.BusinessEntityID.");

                entity.Property(e => e.Personid)
                    .HasColumnName("personid")
                    .HasComment("Primary key. Foreign key to Person.BusinessEntityID.");

                entity.Property(e => e.Contacttypeid)
                    .HasColumnName("contacttypeid")
                    .HasComment("Primary key.  Foreign key to ContactType.ContactTypeID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Businessentitycontact)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessEntityContact_BusinessEntity_BusinessEntityID");

                entity.HasOne(d => d.Contacttype)
                    .WithMany(p => p.Businessentitycontact)
                    .HasForeignKey(d => d.Contacttypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessEntityContact_ContactType_ContactTypeID");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.Businessentitycontact)
                    .HasForeignKey(d => d.Personid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessEntityContact_Person_PersonID");
            });

            modelBuilder.Entity<Contacttype>(entity =>
            {
                entity.ToTable("contacttype", "person");

                entity.HasComment("Lookup table containing the types of business entity contacts.");

                entity.Property(e => e.Contacttypeid)
                    .HasColumnName("contacttypeid")
                    .HasComment("Primary key for ContactType records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Contact type description.");
            });

            modelBuilder.Entity<Countryregion>(entity =>
            {
                entity.HasKey(e => e.Countryregioncode)
                    .HasName("PK_CountryRegion_CountryRegionCode");

                entity.ToTable("countryregion", "person");

                entity.HasComment("Lookup table containing the ISO standard codes for countries and regions.");

                entity.Property(e => e.Countryregioncode)
                    .HasMaxLength(3)
                    .HasColumnName("countryregioncode")
                    .HasComment("ISO standard code for countries and regions.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Country or region name.");
            });

            modelBuilder.Entity<Countryregioncurrency>(entity =>
            {
                entity.HasKey(e => new { e.Countryregioncode, e.Currencycode })
                    .HasName("PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode");

                entity.ToTable("countryregioncurrency", "sales");

                entity.HasComment("Cross-reference table mapping ISO currency codes to a country or region.");

                entity.Property(e => e.Countryregioncode)
                    .HasMaxLength(3)
                    .HasColumnName("countryregioncode")
                    .HasComment("ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(3)
                    .HasColumnName("currencycode")
                    .IsFixedLength()
                    .HasComment("ISO standard currency code. Foreign key to Currency.CurrencyCode.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.CountryregioncodeNavigation)
                    .WithMany(p => p.Countryregioncurrency)
                    .HasForeignKey(d => d.Countryregioncode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CountryRegionCurrency_CountryRegion_CountryRegionCode");

                entity.HasOne(d => d.CurrencycodeNavigation)
                    .WithMany(p => p.Countryregioncurrency)
                    .HasForeignKey(d => d.Currencycode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CountryRegionCurrency_Currency_CurrencyCode");
            });

            modelBuilder.Entity<Creditcard>(entity =>
            {
                entity.ToTable("creditcard", "sales");

                entity.HasComment("Customer credit card information.");

                entity.Property(e => e.Creditcardid)
                    .HasColumnName("creditcardid")
                    .HasComment("Primary key for CreditCard records.");

                entity.Property(e => e.Cardnumber)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("cardnumber")
                    .HasComment("Credit card number.");

                entity.Property(e => e.Cardtype)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("cardtype")
                    .HasComment("Credit card name.");

                entity.Property(e => e.Expmonth)
                    .HasColumnName("expmonth")
                    .HasComment("Credit card expiration month.");

                entity.Property(e => e.Expyear)
                    .HasColumnName("expyear")
                    .HasComment("Credit card expiration year.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");
            });

            modelBuilder.Entity<Culture>(entity =>
            {
                entity.ToTable("culture", "production");

                entity.HasComment("Lookup table containing the languages in which some AdventureWorks data is stored.");

                entity.Property(e => e.Cultureid)
                    .HasMaxLength(6)
                    .HasColumnName("cultureid")
                    .IsFixedLength()
                    .HasComment("Primary key for Culture records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Culture description.");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasKey(e => e.Currencycode)
                    .HasName("PK_Currency_CurrencyCode");

                entity.ToTable("currency", "sales");

                entity.HasComment("Lookup table containing standard ISO currencies.");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(3)
                    .HasColumnName("currencycode")
                    .IsFixedLength()
                    .HasComment("The ISO code for the Currency.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Currency name.");
            });

            modelBuilder.Entity<Currencyrate>(entity =>
            {
                entity.ToTable("currencyrate", "sales");

                entity.HasComment("Currency exchange rates.");

                entity.Property(e => e.Currencyrateid)
                    .HasColumnName("currencyrateid")
                    .HasComment("Primary key for CurrencyRate records.");

                entity.Property(e => e.Averagerate)
                    .HasColumnName("averagerate")
                    .HasComment("Average exchange rate for the day.");

                entity.Property(e => e.Currencyratedate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("currencyratedate")
                    .HasComment("Date and time the exchange rate was obtained.");

                entity.Property(e => e.Endofdayrate)
                    .HasColumnName("endofdayrate")
                    .HasComment("Final exchange rate for the day.");

                entity.Property(e => e.Fromcurrencycode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("fromcurrencycode")
                    .IsFixedLength()
                    .HasComment("Exchange rate was converted from this currency code.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Tocurrencycode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("tocurrencycode")
                    .IsFixedLength()
                    .HasComment("Exchange rate was converted to this currency code.");

                entity.HasOne(d => d.FromcurrencycodeNavigation)
                    .WithMany(p => p.CurrencyrateFromcurrencycodeNavigation)
                    .HasForeignKey(d => d.Fromcurrencycode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CurrencyRate_Currency_FromCurrencyCode");

                entity.HasOne(d => d.TocurrencycodeNavigation)
                    .WithMany(p => p.CurrencyrateTocurrencycodeNavigation)
                    .HasForeignKey(d => d.Tocurrencycode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CurrencyRate_Currency_ToCurrencyCode");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("customer", "sales");

                entity.HasComment("Current customer information. Also see the Person and Store tables.");

                entity.Property(e => e.Customerid)
                    .HasColumnName("customerid")
                    .HasComment("Primary key.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Personid)
                    .HasColumnName("personid")
                    .HasComment("Foreign key to Person.BusinessEntityID");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Storeid)
                    .HasColumnName("storeid")
                    .HasComment("Foreign key to Store.BusinessEntityID");

                entity.Property(e => e.Territoryid)
                    .HasColumnName("territoryid")
                    .HasComment("ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.Personid)
                    .HasConstraintName("FK_Customer_Person_PersonID");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.Storeid)
                    .HasConstraintName("FK_Customer_Store_StoreID");

                entity.HasOne(d => d.Territory)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.Territoryid)
                    .HasConstraintName("FK_Customer_SalesTerritory_TerritoryID");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.ToTable("department", "humanresources");

                entity.HasComment("Lookup table containing the departments within the Adventure Works Cycles company.");

                entity.Property(e => e.Departmentid)
                    .HasColumnName("departmentid")
                    .HasComment("Primary key for Department records.");

                entity.Property(e => e.Groupname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("groupname")
                    .HasComment("Name of the group to which the department belongs.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Name of the department.");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.HasKey(e => e.Documentnode)
                    .HasName("PK_Document_DocumentNode");

                entity.ToTable("document", "production");

                entity.HasComment("Product maintenance documents.");

                entity.HasIndex(e => e.Rowguid, "document_rowguid_key")
                    .IsUnique();

                entity.Property(e => e.Documentnode)
                    .HasColumnType("character varying")
                    .HasColumnName("documentnode")
                    .HasDefaultValueSql("'/'::character varying")
                    .HasComment("Primary key for Document records.");

                entity.Property(e => e.Changenumber)
                    .HasColumnName("changenumber")
                    .HasComment("Engineering change approval number.");

                entity.Property(e => e.Document1)
                    .HasColumnName("document")
                    .HasComment("Complete document.");

                entity.Property(e => e.Documentsummary)
                    .HasColumnName("documentsummary")
                    .HasComment("Document abstract.");

                entity.Property(e => e.Fileextension)
                    .HasMaxLength(8)
                    .HasColumnName("fileextension")
                    .HasComment("File extension indicating the document type. For example, .doc or .txt.");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(400)
                    .HasColumnName("filename")
                    .HasComment("File name of the document");

                entity.Property(e => e.Folderflag)
                    .HasColumnName("folderflag")
                    .HasComment("0 = This is a folder, 1 = This is a document.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Owner)
                    .HasColumnName("owner")
                    .HasComment("Employee who controls the document.  Foreign key to Employee.BusinessEntityID");

                entity.Property(e => e.Revision)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("revision")
                    .IsFixedLength()
                    .HasComment("Revision number of the document.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()")
                    .HasComment("ROWGUIDCOL number uniquely identifying the record. Required for FileStream.");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("1 = Pending approval, 2 = Approved, 3 = Obsolete");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("title")
                    .HasComment("Title of the document.");

                entity.HasOne(d => d.OwnerNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.Owner)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Employee_Owner");
            });

            modelBuilder.Entity<Emailaddress>(entity =>
            {
                entity.HasKey(e => new { e.Businessentityid, e.Emailaddressid })
                    .HasName("PK_EmailAddress_BusinessEntityID_EmailAddressID");

                entity.ToTable("emailaddress", "person");

                entity.HasComment("Where to send a person email.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID");

                entity.Property(e => e.Emailaddressid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("emailaddressid")
                    .HasComment("Primary key. ID of this email address.");

                entity.Property(e => e.Emailaddress1)
                    .HasMaxLength(50)
                    .HasColumnName("emailaddress")
                    .HasComment("E-mail address for the person.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Emailaddress)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmailAddress_Person_BusinessEntityID");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => e.Businessentityid)
                    .HasName("PK_Employee_BusinessEntityID");

                entity.ToTable("employee", "humanresources");

                entity.HasComment("Employee information such as salary, department, and title.");

                entity.Property(e => e.Businessentityid)
                    .ValueGeneratedNever()
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.");

                entity.Property(e => e.Birthdate)
                    .HasColumnName("birthdate")
                    .HasComment("Date of birth.");

                entity.Property(e => e.Currentflag)
                    .IsRequired()
                    .HasColumnName("currentflag")
                    .HasDefaultValueSql("true")
                    .HasComment("0 = Inactive, 1 = Active");

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .HasColumnName("gender")
                    .HasComment("M = Male, F = Female");

                entity.Property(e => e.Hiredate)
                    .HasColumnName("hiredate")
                    .HasComment("Employee hired on this date.");

                entity.Property(e => e.Jobtitle)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("jobtitle")
                    .HasComment("Work title such as Buyer or Sales Representative.");

                entity.Property(e => e.Loginid)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("loginid")
                    .HasComment("Network login.");

                entity.Property(e => e.Maritalstatus)
                    .HasMaxLength(1)
                    .HasColumnName("maritalstatus")
                    .HasComment("M = Married, S = Single");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Nationalidnumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("nationalidnumber")
                    .HasComment("Unique national identification number such as a social security number.");

                entity.Property(e => e.Organizationnode)
                    .HasColumnType("character varying")
                    .HasColumnName("organizationnode")
                    .HasDefaultValueSql("'/'::character varying")
                    .HasComment("Where the employee is located in corporate hierarchy.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Salariedflag)
                    .IsRequired()
                    .HasColumnName("salariedflag")
                    .HasDefaultValueSql("true")
                    .HasComment("Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.");

                entity.Property(e => e.Sickleavehours)
                    .HasColumnName("sickleavehours")
                    .HasComment("Number of available sick leave hours.");

                entity.Property(e => e.Vacationhours)
                    .HasColumnName("vacationhours")
                    .HasComment("Number of available vacation hours.");

                entity.HasOne(d => d.Businessentity)
                    .WithOne(p => p.Employee)
                    .HasForeignKey<Employee>(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_Person_BusinessEntityID");
            });

            modelBuilder.Entity<Employeedepartmenthistory>(entity =>
            {
                entity.HasKey(e => new { e.Businessentityid, e.Startdate, e.Departmentid, e.Shiftid })
                    .HasName("PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_Departm");

                entity.ToTable("employeedepartmenthistory", "humanresources");

                entity.HasComment("Employee department transfers.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Employee identification number. Foreign key to Employee.BusinessEntityID.");

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasComment("Date the employee started work in the department.");

                entity.Property(e => e.Departmentid)
                    .HasColumnName("departmentid")
                    .HasComment("Department in which the employee worked including currently. Foreign key to Department.DepartmentID.");

                entity.Property(e => e.Shiftid)
                    .HasColumnName("shiftid")
                    .HasComment("Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.");

                entity.Property(e => e.Enddate)
                    .HasColumnName("enddate")
                    .HasComment("Date the employee left the department. NULL = Current department.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Employeedepartmenthistory)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeDepartmentHistory_Employee_BusinessEntityID");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Employeedepartmenthistory)
                    .HasForeignKey(d => d.Departmentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeDepartmentHistory_Department_DepartmentID");

                entity.HasOne(d => d.Shift)
                    .WithMany(p => p.Employeedepartmenthistory)
                    .HasForeignKey(d => d.Shiftid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeDepartmentHistory_Shift_ShiftID");
            });

            modelBuilder.Entity<Employeepayhistory>(entity =>
            {
                entity.HasKey(e => new { e.Businessentityid, e.Ratechangedate })
                    .HasName("PK_EmployeePayHistory_BusinessEntityID_RateChangeDate");

                entity.ToTable("employeepayhistory", "humanresources");

                entity.HasComment("Employee pay history.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Employee identification number. Foreign key to Employee.BusinessEntityID.");

                entity.Property(e => e.Ratechangedate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("ratechangedate")
                    .HasComment("Date the change in pay is effective");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Payfrequency)
                    .HasColumnName("payfrequency")
                    .HasComment("1 = Salary received monthly, 2 = Salary received biweekly");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasComment("Salary hourly rate.");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Employeepayhistory)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeePayHistory_Employee_BusinessEntityID");
            });

            modelBuilder.Entity<Illustration>(entity =>
            {
                entity.ToTable("illustration", "production");

                entity.HasComment("Bicycle assembly diagrams.");

                entity.Property(e => e.Illustrationid)
                    .HasColumnName("illustrationid")
                    .HasComment("Primary key for Illustration records.");

                entity.Property(e => e.Diagram)
                    .HasColumnType("xml")
                    .HasColumnName("diagram")
                    .HasComment("Illustrations used in manufacturing instructions. Stored as XML.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");
            });

            modelBuilder.Entity<Jobcandidate>(entity =>
            {
                entity.ToTable("jobcandidate", "humanresources");

                entity.HasComment("RÃ©sumÃ©s submitted to Human Resources by job applicants.");

                entity.Property(e => e.Jobcandidateid)
                    .HasColumnName("jobcandidateid")
                    .HasComment("Primary key for JobCandidate records.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Resume)
                    .HasColumnType("xml")
                    .HasColumnName("resume")
                    .HasComment("RÃ©sumÃ© in XML format.");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Jobcandidate)
                    .HasForeignKey(d => d.Businessentityid)
                    .HasConstraintName("FK_JobCandidate_Employee_BusinessEntityID");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.ToTable("location", "production");

                entity.HasComment("Product inventory and manufacturing locations.");

                entity.Property(e => e.Locationid)
                    .HasColumnName("locationid")
                    .HasComment("Primary key for Location records.");

                entity.Property(e => e.Availability)
                    .HasPrecision(8, 2)
                    .HasColumnName("availability")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Work capacity (in hours) of the manufacturing location.");

                entity.Property(e => e.Costrate)
                    .HasColumnName("costrate")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Standard hourly cost of the manufacturing location.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Location description.");
            });

            modelBuilder.Entity<Password>(entity =>
            {
                entity.HasKey(e => e.Businessentityid)
                    .HasName("PK_Password_BusinessEntityID");

                entity.ToTable("password", "person");

                entity.HasComment("One way hashed authentication information");

                entity.Property(e => e.Businessentityid)
                    .ValueGeneratedNever()
                    .HasColumnName("businessentityid");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Passwordhash)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("passwordhash")
                    .HasComment("Password for the e-mail account.");

                entity.Property(e => e.Passwordsalt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("passwordsalt")
                    .HasComment("Random value concatenated with the password string before the password is hashed.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.HasOne(d => d.Businessentity)
                    .WithOne(p => p.Password)
                    .HasForeignKey<Password>(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Password_Person_BusinessEntityID");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasKey(e => e.Businessentityid)
                    .HasName("PK_Person_BusinessEntityID");

                entity.ToTable("person", "person");

                entity.HasComment("Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.");

                entity.Property(e => e.Businessentityid)
                    .ValueGeneratedNever()
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key for Person records.");

                entity.Property(e => e.Additionalcontactinfo)
                    .HasColumnType("xml")
                    .HasColumnName("additionalcontactinfo")
                    .HasComment("Additional contact information about the person stored in xml format.");

                entity.Property(e => e.Demographics)
                    .HasColumnType("xml")
                    .HasColumnName("demographics")
                    .HasComment("Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.");

                entity.Property(e => e.Emailpromotion)
                    .HasColumnName("emailpromotion")
                    .HasComment("0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.");

                entity.Property(e => e.Firstname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("firstname")
                    .HasComment("First name of the person.");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("lastname")
                    .HasComment("Last name of the person.");

                entity.Property(e => e.Middlename)
                    .HasMaxLength(50)
                    .HasColumnName("middlename")
                    .HasComment("Middle name or middle initial of the person.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Namestyle)
                    .HasColumnName("namestyle")
                    .HasComment("0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.");

                entity.Property(e => e.Persontype)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("persontype")
                    .IsFixedLength()
                    .HasComment("Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(10)
                    .HasColumnName("suffix")
                    .HasComment("Surname suffix. For example, Sr. or Jr.");

                entity.Property(e => e.Title)
                    .HasMaxLength(8)
                    .HasColumnName("title")
                    .HasComment("A courtesy title. For example, Mr. or Ms.");

                entity.HasOne(d => d.Businessentity)
                    .WithOne(p => p.Person)
                    .HasForeignKey<Person>(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Person_BusinessEntity_BusinessEntityID");
            });

            modelBuilder.Entity<Personcreditcard>(entity =>
            {
                entity.HasKey(e => new { e.Businessentityid, e.Creditcardid })
                    .HasName("PK_PersonCreditCard_BusinessEntityID_CreditCardID");

                entity.ToTable("personcreditcard", "sales");

                entity.HasComment("Cross-reference table mapping people to their credit card information in the CreditCard table.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Business entity identification number. Foreign key to Person.BusinessEntityID.");

                entity.Property(e => e.Creditcardid)
                    .HasColumnName("creditcardid")
                    .HasComment("Credit card identification number. Foreign key to CreditCard.CreditCardID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Personcreditcard)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonCreditCard_Person_BusinessEntityID");

                entity.HasOne(d => d.Creditcard)
                    .WithMany(p => p.Personcreditcard)
                    .HasForeignKey(d => d.Creditcardid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonCreditCard_CreditCard_CreditCardID");
            });

            modelBuilder.Entity<Personphone>(entity =>
            {
                entity.HasKey(e => new { e.Businessentityid, e.Phonenumber, e.Phonenumbertypeid })
                    .HasName("PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID");

                entity.ToTable("personphone", "person");

                entity.HasComment("Telephone number and type of a person.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Business entity identification number. Foreign key to Person.BusinessEntityID.");

                entity.Property(e => e.Phonenumber)
                    .HasMaxLength(25)
                    .HasColumnName("phonenumber")
                    .HasComment("Telephone number identification number.");

                entity.Property(e => e.Phonenumbertypeid)
                    .HasColumnName("phonenumbertypeid")
                    .HasComment("Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Personphone)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonPhone_Person_BusinessEntityID");

                entity.HasOne(d => d.Phonenumbertype)
                    .WithMany(p => p.Personphone)
                    .HasForeignKey(d => d.Phonenumbertypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID");
            });

            modelBuilder.Entity<Phonenumbertype>(entity =>
            {
                entity.ToTable("phonenumbertype", "person");

                entity.HasComment("Type of phone number of a person.");

                entity.Property(e => e.Phonenumbertypeid)
                    .HasColumnName("phonenumbertypeid")
                    .HasComment("Primary key for telephone number type records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Name of the telephone number type");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("product", "production");

                entity.HasComment("Products sold or used in the manfacturing of sold products.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Primary key for Product records.");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .HasColumnName("class")
                    .IsFixedLength()
                    .HasComment("H = High, M = Medium, L = Low");

                entity.Property(e => e.Color)
                    .HasMaxLength(15)
                    .HasColumnName("color")
                    .HasComment("Product color.");

                entity.Property(e => e.Daystomanufacture)
                    .HasColumnName("daystomanufacture")
                    .HasComment("Number of days required to manufacture the product.");

                entity.Property(e => e.Discontinueddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("discontinueddate")
                    .HasComment("Date the product was discontinued.");

                entity.Property(e => e.Finishedgoodsflag)
                    .IsRequired()
                    .HasColumnName("finishedgoodsflag")
                    .HasDefaultValueSql("true")
                    .HasComment("0 = Product is not a salable item. 1 = Product is salable.");

                entity.Property(e => e.Listprice)
                    .HasColumnName("listprice")
                    .HasComment("Selling price.");

                entity.Property(e => e.Makeflag)
                    .IsRequired()
                    .HasColumnName("makeflag")
                    .HasDefaultValueSql("true")
                    .HasComment("0 = Product is purchased, 1 = Product is manufactured in-house.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Name of the product.");

                entity.Property(e => e.Productline)
                    .HasMaxLength(2)
                    .HasColumnName("productline")
                    .IsFixedLength()
                    .HasComment("R = Road, M = Mountain, T = Touring, S = Standard");

                entity.Property(e => e.Productmodelid)
                    .HasColumnName("productmodelid")
                    .HasComment("Product is a member of this product model. Foreign key to ProductModel.ProductModelID.");

                entity.Property(e => e.Productnumber)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("productnumber")
                    .HasComment("Unique product identification number.");

                entity.Property(e => e.Productsubcategoryid)
                    .HasColumnName("productsubcategoryid")
                    .HasComment("Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.");

                entity.Property(e => e.Reorderpoint)
                    .HasColumnName("reorderpoint")
                    .HasComment("Inventory level that triggers a purchase order or work order.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Safetystocklevel)
                    .HasColumnName("safetystocklevel")
                    .HasComment("Minimum inventory quantity.");

                entity.Property(e => e.Sellenddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("sellenddate")
                    .HasComment("Date the product was no longer available for sale.");

                entity.Property(e => e.Sellstartdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("sellstartdate")
                    .HasComment("Date the product was available for sale.");

                entity.Property(e => e.Size)
                    .HasMaxLength(5)
                    .HasColumnName("size")
                    .HasComment("Product size.");

                entity.Property(e => e.Sizeunitmeasurecode)
                    .HasMaxLength(3)
                    .HasColumnName("sizeunitmeasurecode")
                    .IsFixedLength()
                    .HasComment("Unit of measure for Size column.");

                entity.Property(e => e.Standardcost)
                    .HasColumnName("standardcost")
                    .HasComment("Standard cost of the product.");

                entity.Property(e => e.Style)
                    .HasMaxLength(2)
                    .HasColumnName("style")
                    .IsFixedLength()
                    .HasComment("W = Womens, M = Mens, U = Universal");

                entity.Property(e => e.Weight)
                    .HasPrecision(8, 2)
                    .HasColumnName("weight")
                    .HasComment("Product weight.");

                entity.Property(e => e.Weightunitmeasurecode)
                    .HasMaxLength(3)
                    .HasColumnName("weightunitmeasurecode")
                    .IsFixedLength()
                    .HasComment("Unit of measure for Weight column.");

                entity.HasOne(d => d.Productmodel)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.Productmodelid)
                    .HasConstraintName("FK_Product_ProductModel_ProductModelID");

                entity.HasOne(d => d.Productsubcategory)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.Productsubcategoryid)
                    .HasConstraintName("FK_Product_ProductSubcategory_ProductSubcategoryID");

                entity.HasOne(d => d.SizeunitmeasurecodeNavigation)
                    .WithMany(p => p.ProductSizeunitmeasurecodeNavigation)
                    .HasForeignKey(d => d.Sizeunitmeasurecode)
                    .HasConstraintName("FK_Product_UnitMeasure_SizeUnitMeasureCode");

                entity.HasOne(d => d.WeightunitmeasurecodeNavigation)
                    .WithMany(p => p.ProductWeightunitmeasurecodeNavigation)
                    .HasForeignKey(d => d.Weightunitmeasurecode)
                    .HasConstraintName("FK_Product_UnitMeasure_WeightUnitMeasureCode");
            });

            modelBuilder.Entity<Productcategory>(entity =>
            {
                entity.ToTable("productcategory", "production");

                entity.HasComment("High-level product categorization.");

                entity.Property(e => e.Productcategoryid)
                    .HasColumnName("productcategoryid")
                    .HasComment("Primary key for ProductCategory records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Category description.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");
            });

            modelBuilder.Entity<Productcosthistory>(entity =>
            {
                entity.HasKey(e => new { e.Productid, e.Startdate })
                    .HasName("PK_ProductCostHistory_ProductID_StartDate");

                entity.ToTable("productcosthistory", "production");

                entity.HasComment("Changes in the cost of a product over time.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID");

                entity.Property(e => e.Startdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("startdate")
                    .HasComment("Product cost start date.");

                entity.Property(e => e.Enddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("enddate")
                    .HasComment("Product cost end date.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Standardcost)
                    .HasColumnName("standardcost")
                    .HasComment("Standard cost of the product.");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Productcosthistory)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCostHistory_Product_ProductID");
            });

            modelBuilder.Entity<Productdescription>(entity =>
            {
                entity.ToTable("productdescription", "production");

                entity.HasComment("Product descriptions in several languages.");

                entity.Property(e => e.Productdescriptionid)
                    .HasColumnName("productdescriptionid")
                    .HasComment("Primary key for ProductDescription records.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(400)
                    .HasColumnName("description")
                    .HasComment("Description of the product.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");
            });

            modelBuilder.Entity<Productdocument>(entity =>
            {
                entity.HasKey(e => new { e.Productid, e.Documentnode })
                    .HasName("PK_ProductDocument_ProductID_DocumentNode");

                entity.ToTable("productdocument", "production");

                entity.HasComment("Cross-reference table mapping products to related product documents.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Documentnode)
                    .HasColumnType("character varying")
                    .HasColumnName("documentnode")
                    .HasDefaultValueSql("'/'::character varying")
                    .HasComment("Document identification number. Foreign key to Document.DocumentNode.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.DocumentnodeNavigation)
                    .WithMany(p => p.Productdocument)
                    .HasForeignKey(d => d.Documentnode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDocument_Document_DocumentNode");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Productdocument)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDocument_Product_ProductID");
            });

            modelBuilder.Entity<Productinventory>(entity =>
            {
                entity.HasKey(e => new { e.Productid, e.Locationid })
                    .HasName("PK_ProductInventory_ProductID_LocationID");

                entity.ToTable("productinventory", "production");

                entity.HasComment("Product inventory information.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Locationid)
                    .HasColumnName("locationid")
                    .HasComment("Inventory location identification number. Foreign key to Location.LocationID.");

                entity.Property(e => e.Bin)
                    .HasColumnName("bin")
                    .HasComment("Storage container on a shelf in an inventory location.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasComment("Quantity of products in the inventory location.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Shelf)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("shelf")
                    .HasComment("Storage compartment within an inventory location.");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Productinventory)
                    .HasForeignKey(d => d.Locationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductInventory_Location_LocationID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Productinventory)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductInventory_Product_ProductID");
            });

            modelBuilder.Entity<Productlistpricehistory>(entity =>
            {
                entity.HasKey(e => new { e.Productid, e.Startdate })
                    .HasName("PK_ProductListPriceHistory_ProductID_StartDate");

                entity.ToTable("productlistpricehistory", "production");

                entity.HasComment("Changes in the list price of a product over time.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID");

                entity.Property(e => e.Startdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("startdate")
                    .HasComment("List price start date.");

                entity.Property(e => e.Enddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("enddate")
                    .HasComment("List price end date");

                entity.Property(e => e.Listprice)
                    .HasColumnName("listprice")
                    .HasComment("Product list price.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Productlistpricehistory)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductListPriceHistory_Product_ProductID");
            });

            modelBuilder.Entity<Productmodel>(entity =>
            {
                entity.ToTable("productmodel", "production");

                entity.HasComment("Product model classification.");

                entity.Property(e => e.Productmodelid)
                    .HasColumnName("productmodelid")
                    .HasComment("Primary key for ProductModel records.");

                entity.Property(e => e.Catalogdescription)
                    .HasColumnType("xml")
                    .HasColumnName("catalogdescription")
                    .HasComment("Detailed product catalog information in xml format.");

                entity.Property(e => e.Instructions)
                    .HasColumnType("xml")
                    .HasColumnName("instructions")
                    .HasComment("Manufacturing instructions in xml format.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Product model description.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");
            });

            modelBuilder.Entity<Productmodelillustration>(entity =>
            {
                entity.HasKey(e => new { e.Productmodelid, e.Illustrationid })
                    .HasName("PK_ProductModelIllustration_ProductModelID_IllustrationID");

                entity.ToTable("productmodelillustration", "production");

                entity.HasComment("Cross-reference table mapping product models and illustrations.");

                entity.Property(e => e.Productmodelid)
                    .HasColumnName("productmodelid")
                    .HasComment("Primary key. Foreign key to ProductModel.ProductModelID.");

                entity.Property(e => e.Illustrationid)
                    .HasColumnName("illustrationid")
                    .HasComment("Primary key. Foreign key to Illustration.IllustrationID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.Illustration)
                    .WithMany(p => p.Productmodelillustration)
                    .HasForeignKey(d => d.Illustrationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductModelIllustration_Illustration_IllustrationID");

                entity.HasOne(d => d.Productmodel)
                    .WithMany(p => p.Productmodelillustration)
                    .HasForeignKey(d => d.Productmodelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductModelIllustration_ProductModel_ProductModelID");
            });

            modelBuilder.Entity<Productmodelproductdescriptionculture>(entity =>
            {
                entity.HasKey(e => new { e.Productmodelid, e.Productdescriptionid, e.Cultureid })
                    .HasName("PK_ProductModelProductDescriptionCulture_ProductModelID_Product");

                entity.ToTable("productmodelproductdescriptionculture", "production");

                entity.HasComment("Cross-reference table mapping product descriptions and the language the description is written in.");

                entity.Property(e => e.Productmodelid)
                    .HasColumnName("productmodelid")
                    .HasComment("Primary key. Foreign key to ProductModel.ProductModelID.");

                entity.Property(e => e.Productdescriptionid)
                    .HasColumnName("productdescriptionid")
                    .HasComment("Primary key. Foreign key to ProductDescription.ProductDescriptionID.");

                entity.Property(e => e.Cultureid)
                    .HasMaxLength(6)
                    .HasColumnName("cultureid")
                    .IsFixedLength()
                    .HasComment("Culture identification number. Foreign key to Culture.CultureID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.Culture)
                    .WithMany(p => p.Productmodelproductdescriptionculture)
                    .HasForeignKey(d => d.Cultureid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductModelProductDescriptionCulture_Culture_CultureID");

                entity.HasOne(d => d.Productdescription)
                    .WithMany(p => p.Productmodelproductdescriptionculture)
                    .HasForeignKey(d => d.Productdescriptionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductModelProductDescriptionCulture_ProductDescription_Pro");

                entity.HasOne(d => d.Productmodel)
                    .WithMany(p => p.Productmodelproductdescriptionculture)
                    .HasForeignKey(d => d.Productmodelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductModelProductDescriptionCulture_ProductModel_ProductMo");
            });

            modelBuilder.Entity<Productphoto>(entity =>
            {
                entity.ToTable("productphoto", "production");

                entity.HasComment("Product images.");

                entity.Property(e => e.Productphotoid)
                    .HasColumnName("productphotoid")
                    .HasComment("Primary key for ProductPhoto records.");

                entity.Property(e => e.Largephoto)
                    .HasColumnName("largephoto")
                    .HasComment("Large image of the product.");

                entity.Property(e => e.Largephotofilename)
                    .HasMaxLength(50)
                    .HasColumnName("largephotofilename")
                    .HasComment("Large image file name.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Thumbnailphoto)
                    .HasColumnName("thumbnailphoto")
                    .HasComment("Small image of the product.");

                entity.Property(e => e.Thumbnailphotofilename)
                    .HasMaxLength(50)
                    .HasColumnName("thumbnailphotofilename")
                    .HasComment("Small image file name.");
            });

            modelBuilder.Entity<Productproductphoto>(entity =>
            {
                entity.HasKey(e => new { e.Productid, e.Productphotoid })
                    .HasName("PK_ProductProductPhoto_ProductID_ProductPhotoID");

                entity.ToTable("productproductphoto", "production");

                entity.HasComment("Cross-reference table mapping products and product photos.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Productphotoid)
                    .HasColumnName("productphotoid")
                    .HasComment("Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Primary)
                    .HasColumnName("primary")
                    .HasComment("0 = Photo is not the principal image. 1 = Photo is the principal image.");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Productproductphoto)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductProductPhoto_Product_ProductID");

                entity.HasOne(d => d.Productphoto)
                    .WithMany(p => p.Productproductphoto)
                    .HasForeignKey(d => d.Productphotoid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductProductPhoto_ProductPhoto_ProductPhotoID");
            });

            modelBuilder.Entity<Productreview>(entity =>
            {
                entity.ToTable("productreview", "production");

                entity.HasComment("Customer reviews of products they have purchased.");

                entity.Property(e => e.Productreviewid)
                    .HasColumnName("productreviewid")
                    .HasComment("Primary key for ProductReview records.");

                entity.Property(e => e.Comments)
                    .HasMaxLength(3850)
                    .HasColumnName("comments")
                    .HasComment("Reviewer's comments");

                entity.Property(e => e.Emailaddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("emailaddress")
                    .HasComment("Reviewer's e-mail address.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Rating)
                    .HasColumnName("rating")
                    .HasComment("Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.");

                entity.Property(e => e.Reviewdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("reviewdate")
                    .HasDefaultValueSql("now()")
                    .HasComment("Date review was submitted.");

                entity.Property(e => e.Reviewername)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("reviewername")
                    .HasComment("Name of the reviewer.");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Productreview)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductReview_Product_ProductID");
            });

            modelBuilder.Entity<Productsubcategory>(entity =>
            {
                entity.ToTable("productsubcategory", "production");

                entity.HasComment("Product subcategories. See ProductCategory table.");

                entity.Property(e => e.Productsubcategoryid)
                    .HasColumnName("productsubcategoryid")
                    .HasComment("Primary key for ProductSubcategory records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Subcategory description.");

                entity.Property(e => e.Productcategoryid)
                    .HasColumnName("productcategoryid")
                    .HasComment("Product category identification number. Foreign key to ProductCategory.ProductCategoryID.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.HasOne(d => d.Productcategory)
                    .WithMany(p => p.Productsubcategory)
                    .HasForeignKey(d => d.Productcategoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductSubcategory_ProductCategory_ProductCategoryID");
            });

            modelBuilder.Entity<Productvendor>(entity =>
            {
                entity.HasKey(e => new { e.Productid, e.Businessentityid })
                    .HasName("PK_ProductVendor_ProductID_BusinessEntityID");

                entity.ToTable("productvendor", "purchasing");

                entity.HasComment("Cross-reference table mapping vendors with the products they supply.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Primary key. Foreign key to Product.ProductID.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key. Foreign key to Vendor.BusinessEntityID.");

                entity.Property(e => e.Averageleadtime)
                    .HasColumnName("averageleadtime")
                    .HasComment("The average span of time (in days) between placing an order with the vendor and receiving the purchased product.");

                entity.Property(e => e.Lastreceiptcost)
                    .HasColumnName("lastreceiptcost")
                    .HasComment("The selling price when last purchased.");

                entity.Property(e => e.Lastreceiptdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("lastreceiptdate")
                    .HasComment("Date the product was last received by the vendor.");

                entity.Property(e => e.Maxorderqty)
                    .HasColumnName("maxorderqty")
                    .HasComment("The minimum quantity that should be ordered.");

                entity.Property(e => e.Minorderqty)
                    .HasColumnName("minorderqty")
                    .HasComment("The maximum quantity that should be ordered.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Onorderqty)
                    .HasColumnName("onorderqty")
                    .HasComment("The quantity currently on order.");

                entity.Property(e => e.Standardprice)
                    .HasColumnName("standardprice")
                    .HasComment("The vendor's usual selling price.");

                entity.Property(e => e.Unitmeasurecode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("unitmeasurecode")
                    .IsFixedLength()
                    .HasComment("The product's unit of measure.");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Productvendor)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductVendor_Vendor_BusinessEntityID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Productvendor)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductVendor_Product_ProductID");

                entity.HasOne(d => d.UnitmeasurecodeNavigation)
                    .WithMany(p => p.Productvendor)
                    .HasForeignKey(d => d.Unitmeasurecode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductVendor_UnitMeasure_UnitMeasureCode");
            });

            modelBuilder.Entity<Purchaseorderdetail>(entity =>
            {
                entity.HasKey(e => new { e.Purchaseorderid, e.Purchaseorderdetailid })
                    .HasName("PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID");

                entity.ToTable("purchaseorderdetail", "purchasing");

                entity.HasComment("Individual products associated with a specific purchase order. See PurchaseOrderHeader.");

                entity.Property(e => e.Purchaseorderid)
                    .HasColumnName("purchaseorderid")
                    .HasComment("Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.");

                entity.Property(e => e.Purchaseorderdetailid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("purchaseorderdetailid")
                    .HasComment("Primary key. One line number per purchased product.");

                entity.Property(e => e.Duedate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("duedate")
                    .HasComment("Date the product is expected to be received.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Orderqty)
                    .HasColumnName("orderqty")
                    .HasComment("Quantity ordered.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Receivedqty)
                    .HasPrecision(8, 2)
                    .HasColumnName("receivedqty")
                    .HasComment("Quantity actually received from the vendor.");

                entity.Property(e => e.Rejectedqty)
                    .HasPrecision(8, 2)
                    .HasColumnName("rejectedqty")
                    .HasComment("Quantity rejected during inspection.");

                entity.Property(e => e.Unitprice)
                    .HasColumnName("unitprice")
                    .HasComment("Vendor's selling price of a single product.");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Purchaseorderdetail)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderDetail_Product_ProductID");

                entity.HasOne(d => d.Purchaseorder)
                    .WithMany(p => p.Purchaseorderdetail)
                    .HasForeignKey(d => d.Purchaseorderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID");
            });

            modelBuilder.Entity<Purchaseorderheader>(entity =>
            {
                entity.HasKey(e => e.Purchaseorderid)
                    .HasName("PK_PurchaseOrderHeader_PurchaseOrderID");

                entity.ToTable("purchaseorderheader", "purchasing");

                entity.HasComment("General purchase order information. See PurchaseOrderDetail.");

                entity.Property(e => e.Purchaseorderid)
                    .HasColumnName("purchaseorderid")
                    .HasComment("Primary key.");

                entity.Property(e => e.Employeeid)
                    .HasColumnName("employeeid")
                    .HasComment("Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.");

                entity.Property(e => e.Freight)
                    .HasColumnName("freight")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Shipping cost.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Orderdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("orderdate")
                    .HasDefaultValueSql("now()")
                    .HasComment("Purchase order creation date.");

                entity.Property(e => e.Revisionnumber)
                    .HasColumnName("revisionnumber")
                    .HasComment("Incremental number to track changes to the purchase order over time.");

                entity.Property(e => e.Shipdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("shipdate")
                    .HasComment("Estimated shipment date from the vendor.");

                entity.Property(e => e.Shipmethodid)
                    .HasColumnName("shipmethodid")
                    .HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("1")
                    .HasComment("Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete");

                entity.Property(e => e.Subtotal)
                    .HasColumnName("subtotal")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.");

                entity.Property(e => e.Taxamt)
                    .HasColumnName("taxamt")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Tax amount.");

                entity.Property(e => e.Vendorid)
                    .HasColumnName("vendorid")
                    .HasComment("Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Purchaseorderheader)
                    .HasForeignKey(d => d.Employeeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderHeader_Employee_EmployeeID");

                entity.HasOne(d => d.Shipmethod)
                    .WithMany(p => p.Purchaseorderheader)
                    .HasForeignKey(d => d.Shipmethodid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderHeader_ShipMethod_ShipMethodID");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Purchaseorderheader)
                    .HasForeignKey(d => d.Vendorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderHeader_Vendor_VendorID");
            });

            modelBuilder.Entity<Salesorderdetail>(entity =>
            {
                entity.HasKey(e => new { e.Salesorderid, e.Salesorderdetailid })
                    .HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

                entity.ToTable("salesorderdetail", "sales");

                entity.HasComment("Individual products associated with a specific sales order. See SalesOrderHeader.");

                entity.Property(e => e.Salesorderid)
                    .HasColumnName("salesorderid")
                    .HasComment("Primary key. Foreign key to SalesOrderHeader.SalesOrderID.");

                entity.Property(e => e.Salesorderdetailid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("salesorderdetailid")
                    .HasComment("Primary key. One incremental unique number per product sold.");

                entity.Property(e => e.Carriertrackingnumber)
                    .HasMaxLength(25)
                    .HasColumnName("carriertrackingnumber")
                    .HasComment("Shipment tracking number supplied by the shipper.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Orderqty)
                    .HasColumnName("orderqty")
                    .HasComment("Quantity ordered per product.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product sold to customer. Foreign key to Product.ProductID.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Specialofferid)
                    .HasColumnName("specialofferid")
                    .HasComment("Promotional code. Foreign key to SpecialOffer.SpecialOfferID.");

                entity.Property(e => e.Unitprice)
                    .HasColumnName("unitprice")
                    .HasComment("Selling price of a single product.");

                entity.Property(e => e.Unitpricediscount)
                    .HasColumnName("unitpricediscount")
                    .HasComment("Discount amount.");

                entity.HasOne(d => d.Salesorder)
                    .WithMany(p => p.Salesorderdetail)
                    .HasForeignKey(d => d.Salesorderid)
                    .HasConstraintName("FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID");
            });

            modelBuilder.Entity<Salesorderheader>(entity =>
            {
                entity.HasKey(e => e.Salesorderid)
                    .HasName("PK_SalesOrderHeader_SalesOrderID");

                entity.ToTable("salesorderheader", "sales");

                entity.HasComment("General sales order information.");

                entity.Property(e => e.Salesorderid)
                    .HasColumnName("salesorderid")
                    .HasComment("Primary key.");

                entity.Property(e => e.Accountnumber)
                    .HasMaxLength(15)
                    .HasColumnName("accountnumber")
                    .HasComment("Financial accounting number reference.");

                entity.Property(e => e.Billtoaddressid)
                    .HasColumnName("billtoaddressid")
                    .HasComment("Customer billing address. Foreign key to Address.AddressID.");

                entity.Property(e => e.Comment)
                    .HasMaxLength(128)
                    .HasColumnName("comment")
                    .HasComment("Sales representative comments.");

                entity.Property(e => e.Creditcardapprovalcode)
                    .HasMaxLength(15)
                    .HasColumnName("creditcardapprovalcode")
                    .HasComment("Approval code provided by the credit card company.");

                entity.Property(e => e.Creditcardid)
                    .HasColumnName("creditcardid")
                    .HasComment("Credit card identification number. Foreign key to CreditCard.CreditCardID.");

                entity.Property(e => e.Currencyrateid)
                    .HasColumnName("currencyrateid")
                    .HasComment("Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.");

                entity.Property(e => e.Customerid)
                    .HasColumnName("customerid")
                    .HasComment("Customer identification number. Foreign key to Customer.BusinessEntityID.");

                entity.Property(e => e.Duedate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("duedate")
                    .HasComment("Date the order is due to the customer.");

                entity.Property(e => e.Freight)
                    .HasColumnName("freight")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Shipping cost.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Onlineorderflag)
                    .IsRequired()
                    .HasColumnName("onlineorderflag")
                    .HasDefaultValueSql("true")
                    .HasComment("0 = Order placed by sales person. 1 = Order placed online by customer.");

                entity.Property(e => e.Orderdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("orderdate")
                    .HasDefaultValueSql("now()")
                    .HasComment("Dates the sales order was created.");

                entity.Property(e => e.Purchaseordernumber)
                    .HasMaxLength(25)
                    .HasColumnName("purchaseordernumber")
                    .HasComment("Customer purchase order number reference.");

                entity.Property(e => e.Revisionnumber)
                    .HasColumnName("revisionnumber")
                    .HasComment("Incremental number to track changes to the sales order over time.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Salespersonid)
                    .HasColumnName("salespersonid")
                    .HasComment("Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.");

                entity.Property(e => e.Shipdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("shipdate")
                    .HasComment("Date the order was shipped to the customer.");

                entity.Property(e => e.Shipmethodid)
                    .HasColumnName("shipmethodid")
                    .HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.");

                entity.Property(e => e.Shiptoaddressid)
                    .HasColumnName("shiptoaddressid")
                    .HasComment("Customer shipping address. Foreign key to Address.AddressID.");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("1")
                    .HasComment("Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled");

                entity.Property(e => e.Subtotal)
                    .HasColumnName("subtotal")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.");

                entity.Property(e => e.Taxamt)
                    .HasColumnName("taxamt")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Tax amount.");

                entity.Property(e => e.Territoryid)
                    .HasColumnName("territoryid")
                    .HasComment("Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.");

                entity.Property(e => e.Totaldue)
                    .HasColumnName("totaldue")
                    .HasComment("Total due from customer. Computed as Subtotal + TaxAmt + Freight.");

                entity.HasOne(d => d.Billtoaddress)
                    .WithMany(p => p.SalesorderheaderBilltoaddress)
                    .HasForeignKey(d => d.Billtoaddressid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderHeader_Address_BillToAddressID");

                entity.HasOne(d => d.Creditcard)
                    .WithMany(p => p.Salesorderheader)
                    .HasForeignKey(d => d.Creditcardid)
                    .HasConstraintName("FK_SalesOrderHeader_CreditCard_CreditCardID");

                entity.HasOne(d => d.Currencyrate)
                    .WithMany(p => p.Salesorderheader)
                    .HasForeignKey(d => d.Currencyrateid)
                    .HasConstraintName("FK_SalesOrderHeader_CurrencyRate_CurrencyRateID");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Salesorderheader)
                    .HasForeignKey(d => d.Customerid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderHeader_Customer_CustomerID");

                entity.HasOne(d => d.Salesperson)
                    .WithMany(p => p.Salesorderheader)
                    .HasForeignKey(d => d.Salespersonid)
                    .HasConstraintName("FK_SalesOrderHeader_SalesPerson_SalesPersonID");

                entity.HasOne(d => d.Shipmethod)
                    .WithMany(p => p.Salesorderheader)
                    .HasForeignKey(d => d.Shipmethodid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderHeader_ShipMethod_ShipMethodID");

                entity.HasOne(d => d.Shiptoaddress)
                    .WithMany(p => p.SalesorderheaderShiptoaddress)
                    .HasForeignKey(d => d.Shiptoaddressid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderHeader_Address_ShipToAddressID");

                entity.HasOne(d => d.Territory)
                    .WithMany(p => p.Salesorderheader)
                    .HasForeignKey(d => d.Territoryid)
                    .HasConstraintName("FK_SalesOrderHeader_SalesTerritory_TerritoryID");
            });

            modelBuilder.Entity<Salesorderheadersalesreason>(entity =>
            {
                entity.HasKey(e => new { e.Salesorderid, e.Salesreasonid })
                    .HasName("PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID");

                entity.ToTable("salesorderheadersalesreason", "sales");

                entity.HasComment("Cross-reference table mapping sales orders to sales reason codes.");

                entity.Property(e => e.Salesorderid)
                    .HasColumnName("salesorderid")
                    .HasComment("Primary key. Foreign key to SalesOrderHeader.SalesOrderID.");

                entity.Property(e => e.Salesreasonid)
                    .HasColumnName("salesreasonid")
                    .HasComment("Primary key. Foreign key to SalesReason.SalesReasonID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.Salesorder)
                    .WithMany(p => p.Salesorderheadersalesreason)
                    .HasForeignKey(d => d.Salesorderid)
                    .HasConstraintName("FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID");

                entity.HasOne(d => d.Salesreason)
                    .WithMany(p => p.Salesorderheadersalesreason)
                    .HasForeignKey(d => d.Salesreasonid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID");
            });

            modelBuilder.Entity<Salesperson>(entity =>
            {
                entity.HasKey(e => e.Businessentityid)
                    .HasName("PK_SalesPerson_BusinessEntityID");

                entity.ToTable("salesperson", "sales");

                entity.HasComment("Sales representative current information.");

                entity.Property(e => e.Businessentityid)
                    .ValueGeneratedNever()
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Bonus due if quota is met.");

                entity.Property(e => e.Commissionpct)
                    .HasColumnName("commissionpct")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Commision percent received per sale.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Saleslastyear)
                    .HasColumnName("saleslastyear")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Sales total of previous year.");

                entity.Property(e => e.Salesquota)
                    .HasColumnName("salesquota")
                    .HasComment("Projected yearly sales.");

                entity.Property(e => e.Salesytd)
                    .HasColumnName("salesytd")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Sales total year to date.");

                entity.Property(e => e.Territoryid)
                    .HasColumnName("territoryid")
                    .HasComment("Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.");

                entity.HasOne(d => d.Businessentity)
                    .WithOne(p => p.Salesperson)
                    .HasForeignKey<Salesperson>(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesPerson_Employee_BusinessEntityID");

                entity.HasOne(d => d.Territory)
                    .WithMany(p => p.Salesperson)
                    .HasForeignKey(d => d.Territoryid)
                    .HasConstraintName("FK_SalesPerson_SalesTerritory_TerritoryID");
            });

            modelBuilder.Entity<Salespersonquotahistory>(entity =>
            {
                entity.HasKey(e => new { e.Businessentityid, e.Quotadate })
                    .HasName("PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate");

                entity.ToTable("salespersonquotahistory", "sales");

                entity.HasComment("Sales performance tracking.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.");

                entity.Property(e => e.Quotadate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("quotadate")
                    .HasComment("Sales quota date.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Salesquota)
                    .HasColumnName("salesquota")
                    .HasComment("Sales quota amount.");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Salespersonquotahistory)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID");
            });

            modelBuilder.Entity<Salesreason>(entity =>
            {
                entity.ToTable("salesreason", "sales");

                entity.HasComment("Lookup table of customer purchase reasons.");

                entity.Property(e => e.Salesreasonid)
                    .HasColumnName("salesreasonid")
                    .HasComment("Primary key for SalesReason records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Sales reason description.");

                entity.Property(e => e.Reasontype)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("reasontype")
                    .HasComment("Category the sales reason belongs to.");
            });

            modelBuilder.Entity<Salestaxrate>(entity =>
            {
                entity.ToTable("salestaxrate", "sales");

                entity.HasComment("Tax rate lookup table.");

                entity.Property(e => e.Salestaxrateid)
                    .HasColumnName("salestaxrateid")
                    .HasComment("Primary key for SalesTaxRate records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Tax rate description.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Stateprovinceid)
                    .HasColumnName("stateprovinceid")
                    .HasComment("State, province, or country/region the sales tax applies to.");

                entity.Property(e => e.Taxrate)
                    .HasColumnName("taxrate")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Tax rate amount.");

                entity.Property(e => e.Taxtype)
                    .HasColumnName("taxtype")
                    .HasComment("1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.");

                entity.HasOne(d => d.Stateprovince)
                    .WithMany(p => p.Salestaxrate)
                    .HasForeignKey(d => d.Stateprovinceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesTaxRate_StateProvince_StateProvinceID");
            });

            modelBuilder.Entity<Salesterritory>(entity =>
            {
                entity.HasKey(e => e.Territoryid)
                    .HasName("PK_SalesTerritory_TerritoryID");

                entity.ToTable("salesterritory", "sales");

                entity.HasComment("Sales territory lookup table.");

                entity.Property(e => e.Territoryid)
                    .HasColumnName("territoryid")
                    .HasComment("Primary key for SalesTerritory records.");

                entity.Property(e => e.Costlastyear)
                    .HasColumnName("costlastyear")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Business costs in the territory the previous year.");

                entity.Property(e => e.Costytd)
                    .HasColumnName("costytd")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Business costs in the territory year to date.");

                entity.Property(e => e.Countryregioncode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("countryregioncode")
                    .HasComment("ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.");

                entity.Property(e => e.Group)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("group")
                    .HasComment("Geographic area to which the sales territory belong.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Sales territory description");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Saleslastyear)
                    .HasColumnName("saleslastyear")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Sales in the territory the previous year.");

                entity.Property(e => e.Salesytd)
                    .HasColumnName("salesytd")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Sales in the territory year to date.");

                entity.HasOne(d => d.CountryregioncodeNavigation)
                    .WithMany(p => p.Salesterritory)
                    .HasForeignKey(d => d.Countryregioncode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesTerritory_CountryRegion_CountryRegionCode");
            });

            modelBuilder.Entity<Salesterritoryhistory>(entity =>
            {
                entity.HasKey(e => new { e.Businessentityid, e.Startdate, e.Territoryid })
                    .HasName("PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID");

                entity.ToTable("salesterritoryhistory", "sales");

                entity.HasComment("Sales representative transfers to other sales territories.");

                entity.Property(e => e.Businessentityid)
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.");

                entity.Property(e => e.Startdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("startdate")
                    .HasComment("Primary key. Date the sales representive started work in the territory.");

                entity.Property(e => e.Territoryid)
                    .HasColumnName("territoryid")
                    .HasComment("Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.");

                entity.Property(e => e.Enddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("enddate")
                    .HasComment("Date the sales representative left work in the territory.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.HasOne(d => d.Businessentity)
                    .WithMany(p => p.Salesterritoryhistory)
                    .HasForeignKey(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID");

                entity.HasOne(d => d.Territory)
                    .WithMany(p => p.Salesterritoryhistory)
                    .HasForeignKey(d => d.Territoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesTerritoryHistory_SalesTerritory_TerritoryID");
            });

            modelBuilder.Entity<Scrapreason>(entity =>
            {
                entity.ToTable("scrapreason", "production");

                entity.HasComment("Manufacturing failure reasons lookup table.");

                entity.Property(e => e.Scrapreasonid)
                    .HasColumnName("scrapreasonid")
                    .HasComment("Primary key for ScrapReason records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Failure description.");
            });

            modelBuilder.Entity<Shift>(entity =>
            {
                entity.ToTable("shift", "humanresources");

                entity.HasComment("Work shift lookup table.");

                entity.Property(e => e.Shiftid)
                    .HasColumnName("shiftid")
                    .HasComment("Primary key for Shift records.");

                entity.Property(e => e.Endtime)
                    .HasColumnName("endtime")
                    .HasComment("Shift end time.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Shift description.");

                entity.Property(e => e.Starttime)
                    .HasColumnName("starttime")
                    .HasComment("Shift start time.");
            });

            modelBuilder.Entity<Shipmethod>(entity =>
            {
                entity.ToTable("shipmethod", "purchasing");

                entity.HasComment("Shipping company lookup table.");

                entity.Property(e => e.Shipmethodid)
                    .HasColumnName("shipmethodid")
                    .HasComment("Primary key for ShipMethod records.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Shipping company name.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Shipbase)
                    .HasColumnName("shipbase")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Minimum shipping charge.");

                entity.Property(e => e.Shiprate)
                    .HasColumnName("shiprate")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Shipping charge per pound.");
            });

            modelBuilder.Entity<Shoppingcartitem>(entity =>
            {
                entity.ToTable("shoppingcartitem", "sales");

                entity.HasComment("Contains online customer orders until the order is submitted or cancelled.");

                entity.Property(e => e.Shoppingcartitemid)
                    .HasColumnName("shoppingcartitemid")
                    .HasComment("Primary key for ShoppingCartItem records.");

                entity.Property(e => e.Datecreated)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("datecreated")
                    .HasDefaultValueSql("now()")
                    .HasComment("Date the time the record was created.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product ordered. Foreign key to Product.ProductID.");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasDefaultValueSql("1")
                    .HasComment("Product quantity ordered.");

                entity.Property(e => e.Shoppingcartid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("shoppingcartid")
                    .HasComment("Shopping cart identification number.");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Shoppingcartitem)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoppingCartItem_Product_ProductID");
            });

            modelBuilder.Entity<Specialoffer>(entity =>
            {
                entity.ToTable("specialoffer", "sales");

                entity.HasComment("Sale discounts lookup table.");

                entity.Property(e => e.Specialofferid)
                    .HasColumnName("specialofferid")
                    .HasComment("Primary key for SpecialOffer records.");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("category")
                    .HasComment("Group the discount applies to such as Reseller or Customer.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("description")
                    .HasComment("Discount description.");

                entity.Property(e => e.Discountpct)
                    .HasColumnName("discountpct")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Discount precentage.");

                entity.Property(e => e.Enddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("enddate")
                    .HasComment("Discount end date.");

                entity.Property(e => e.Maxqty)
                    .HasColumnName("maxqty")
                    .HasComment("Maximum discount percent allowed.");

                entity.Property(e => e.Minqty)
                    .HasColumnName("minqty")
                    .HasComment("Minimum discount percent allowed.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Startdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("startdate")
                    .HasComment("Discount start date.");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("type")
                    .HasComment("Discount type category.");
            });

            modelBuilder.Entity<Specialofferproduct>(entity =>
            {
                entity.HasKey(e => new { e.Specialofferid, e.Productid })
                    .HasName("PK_SpecialOfferProduct_SpecialOfferID_ProductID");

                entity.ToTable("specialofferproduct", "sales");

                entity.HasComment("Cross-reference table mapping products to special offer discounts.");

                entity.Property(e => e.Specialofferid)
                    .HasColumnName("specialofferid")
                    .HasComment("Primary key for SpecialOfferProduct records.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Specialofferproduct)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SpecialOfferProduct_Product_ProductID");

                entity.HasOne(d => d.Specialoffer)
                    .WithMany(p => p.Specialofferproduct)
                    .HasForeignKey(d => d.Specialofferid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID");
            });

            modelBuilder.Entity<Stateprovince>(entity =>
            {
                entity.ToTable("stateprovince", "person");

                entity.HasComment("State and province lookup table.");

                entity.Property(e => e.Stateprovinceid)
                    .HasColumnName("stateprovinceid")
                    .HasComment("Primary key for StateProvince records.");

                entity.Property(e => e.Countryregioncode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("countryregioncode")
                    .HasComment("ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.");

                entity.Property(e => e.Isonlystateprovinceflag)
                    .IsRequired()
                    .HasColumnName("isonlystateprovinceflag")
                    .HasDefaultValueSql("true")
                    .HasComment("0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("State or province description.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Stateprovincecode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("stateprovincecode")
                    .IsFixedLength()
                    .HasComment("ISO standard state or province code.");

                entity.Property(e => e.Territoryid)
                    .HasColumnName("territoryid")
                    .HasComment("ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.");

                entity.HasOne(d => d.CountryregioncodeNavigation)
                    .WithMany(p => p.Stateprovince)
                    .HasForeignKey(d => d.Countryregioncode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StateProvince_CountryRegion_CountryRegionCode");

                entity.HasOne(d => d.Territory)
                    .WithMany(p => p.Stateprovince)
                    .HasForeignKey(d => d.Territoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StateProvince_SalesTerritory_TerritoryID");
            });

            modelBuilder.Entity<Store>(entity =>
            {
                entity.HasKey(e => e.Businessentityid)
                    .HasName("PK_Store_BusinessEntityID");

                entity.ToTable("store", "sales");

                entity.HasComment("Customers (resellers) of Adventure Works products.");

                entity.Property(e => e.Businessentityid)
                    .ValueGeneratedNever()
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key. Foreign key to Customer.BusinessEntityID.");

                entity.Property(e => e.Demographics)
                    .HasColumnType("xml")
                    .HasColumnName("demographics")
                    .HasComment("Demographic informationg about the store such as the number of employees, annual sales and store type.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Name of the store.");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("uuid_generate_v1()");

                entity.Property(e => e.Salespersonid)
                    .HasColumnName("salespersonid")
                    .HasComment("ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.");

                entity.HasOne(d => d.Businessentity)
                    .WithOne(p => p.Store)
                    .HasForeignKey<Store>(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Store_BusinessEntity_BusinessEntityID");

                entity.HasOne(d => d.Salesperson)
                    .WithMany(p => p.Store)
                    .HasForeignKey(d => d.Salespersonid)
                    .HasConstraintName("FK_Store_SalesPerson_SalesPersonID");
            });

            modelBuilder.Entity<Transactionhistory>(entity =>
            {
                entity.HasKey(e => e.Transactionid)
                    .HasName("PK_TransactionHistory_TransactionID");

                entity.ToTable("transactionhistory", "production");

                entity.HasComment("Record of each purchase order, sales order, or work order transaction year to date.");

                entity.Property(e => e.Transactionid)
                    .HasColumnName("transactionid")
                    .HasComment("Primary key for TransactionHistory records.");

                entity.Property(e => e.Actualcost)
                    .HasColumnName("actualcost")
                    .HasComment("Product cost.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasComment("Product quantity.");

                entity.Property(e => e.Referenceorderid)
                    .HasColumnName("referenceorderid")
                    .HasComment("Purchase order, sales order, or work order identification number.");

                entity.Property(e => e.Referenceorderlineid)
                    .HasColumnName("referenceorderlineid")
                    .HasComment("Line number associated with the purchase order, sales order, or work order.");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("transactiondate")
                    .HasDefaultValueSql("now()")
                    .HasComment("Date and time of the transaction.");

                entity.Property(e => e.Transactiontype)
                    .HasMaxLength(1)
                    .HasColumnName("transactiontype")
                    .HasComment("W = WorkOrder, S = SalesOrder, P = PurchaseOrder");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Transactionhistory)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionHistory_Product_ProductID");
            });

            modelBuilder.Entity<Transactionhistoryarchive>(entity =>
            {
                entity.HasKey(e => e.Transactionid)
                    .HasName("PK_TransactionHistoryArchive_TransactionID");

                entity.ToTable("transactionhistoryarchive", "production");

                entity.HasComment("Transactions for previous years.");

                entity.Property(e => e.Transactionid)
                    .ValueGeneratedNever()
                    .HasColumnName("transactionid")
                    .HasComment("Primary key for TransactionHistoryArchive records.");

                entity.Property(e => e.Actualcost)
                    .HasColumnName("actualcost")
                    .HasComment("Product cost.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasComment("Product quantity.");

                entity.Property(e => e.Referenceorderid)
                    .HasColumnName("referenceorderid")
                    .HasComment("Purchase order, sales order, or work order identification number.");

                entity.Property(e => e.Referenceorderlineid)
                    .HasColumnName("referenceorderlineid")
                    .HasComment("Line number associated with the purchase order, sales order, or work order.");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("transactiondate")
                    .HasDefaultValueSql("now()")
                    .HasComment("Date and time of the transaction.");

                entity.Property(e => e.Transactiontype)
                    .HasMaxLength(1)
                    .HasColumnName("transactiontype")
                    .HasComment("W = Work Order, S = Sales Order, P = Purchase Order");
            });

            modelBuilder.Entity<Unitmeasure>(entity =>
            {
                entity.HasKey(e => e.Unitmeasurecode)
                    .HasName("PK_UnitMeasure_UnitMeasureCode");

                entity.ToTable("unitmeasure", "production");

                entity.HasComment("Unit of measure lookup table.");

                entity.Property(e => e.Unitmeasurecode)
                    .HasMaxLength(3)
                    .HasColumnName("unitmeasurecode")
                    .IsFixedLength()
                    .HasComment("Primary key.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Unit of measure description.");
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.HasKey(e => e.Businessentityid)
                    .HasName("PK_Vendor_BusinessEntityID");

                entity.ToTable("vendor", "purchasing");

                entity.HasComment("Companies from whom Adventure Works Cycles purchases parts or other goods.");

                entity.Property(e => e.Businessentityid)
                    .ValueGeneratedNever()
                    .HasColumnName("businessentityid")
                    .HasComment("Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID");

                entity.Property(e => e.Accountnumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("accountnumber")
                    .HasComment("Vendor account (identification) number.");

                entity.Property(e => e.Activeflag)
                    .IsRequired()
                    .HasColumnName("activeflag")
                    .HasDefaultValueSql("true")
                    .HasComment("0 = Vendor no longer used. 1 = Vendor is actively used.");

                entity.Property(e => e.Creditrating)
                    .HasColumnName("creditrating")
                    .HasComment("1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Company name.");

                entity.Property(e => e.Preferredvendorstatus)
                    .IsRequired()
                    .HasColumnName("preferredvendorstatus")
                    .HasDefaultValueSql("true")
                    .HasComment("0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.");

                entity.Property(e => e.Purchasingwebserviceurl)
                    .HasMaxLength(1024)
                    .HasColumnName("purchasingwebserviceurl")
                    .HasComment("Vendor URL.");

                entity.HasOne(d => d.Businessentity)
                    .WithOne(p => p.Vendor)
                    .HasForeignKey<Vendor>(d => d.Businessentityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vendor_BusinessEntity_BusinessEntityID");
            });

            modelBuilder.Entity<Workorder>(entity =>
            {
                entity.ToTable("workorder", "production");

                entity.HasComment("Manufacturing work orders.");

                entity.Property(e => e.Workorderid)
                    .HasColumnName("workorderid")
                    .HasComment("Primary key for WorkOrder records.");

                entity.Property(e => e.Duedate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("duedate")
                    .HasComment("Work order due date.");

                entity.Property(e => e.Enddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("enddate")
                    .HasComment("Work order end date.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Orderqty)
                    .HasColumnName("orderqty")
                    .HasComment("Product quantity to build.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Product identification number. Foreign key to Product.ProductID.");

                entity.Property(e => e.Scrappedqty)
                    .HasColumnName("scrappedqty")
                    .HasComment("Quantity that failed inspection.");

                entity.Property(e => e.Scrapreasonid)
                    .HasColumnName("scrapreasonid")
                    .HasComment("Reason for inspection failure.");

                entity.Property(e => e.Startdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("startdate")
                    .HasComment("Work order start date.");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Workorder)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkOrder_Product_ProductID");

                entity.HasOne(d => d.Scrapreason)
                    .WithMany(p => p.Workorder)
                    .HasForeignKey(d => d.Scrapreasonid)
                    .HasConstraintName("FK_WorkOrder_ScrapReason_ScrapReasonID");
            });

            modelBuilder.Entity<Workorderrouting>(entity =>
            {
                entity.HasKey(e => new { e.Workorderid, e.Productid, e.Operationsequence })
                    .HasName("PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence");

                entity.ToTable("workorderrouting", "production");

                entity.HasComment("Work order details.");

                entity.Property(e => e.Workorderid)
                    .HasColumnName("workorderid")
                    .HasComment("Primary key. Foreign key to WorkOrder.WorkOrderID.");

                entity.Property(e => e.Productid)
                    .HasColumnName("productid")
                    .HasComment("Primary key. Foreign key to Product.ProductID.");

                entity.Property(e => e.Operationsequence)
                    .HasColumnName("operationsequence")
                    .HasComment("Primary key. Indicates the manufacturing process sequence.");

                entity.Property(e => e.Actualcost)
                    .HasColumnName("actualcost")
                    .HasComment("Actual manufacturing cost.");

                entity.Property(e => e.Actualenddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("actualenddate")
                    .HasComment("Actual end date.");

                entity.Property(e => e.Actualresourcehrs)
                    .HasPrecision(9, 4)
                    .HasColumnName("actualresourcehrs")
                    .HasComment("Number of manufacturing hours used.");

                entity.Property(e => e.Actualstartdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("actualstartdate")
                    .HasComment("Actual start date.");

                entity.Property(e => e.Locationid)
                    .HasColumnName("locationid")
                    .HasComment("Manufacturing location where the part is processed. Foreign key to Location.LocationID.");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Plannedcost)
                    .HasColumnName("plannedcost")
                    .HasComment("Estimated manufacturing cost.");

                entity.Property(e => e.Scheduledenddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("scheduledenddate")
                    .HasComment("Planned manufacturing end date.");

                entity.Property(e => e.Scheduledstartdate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("scheduledstartdate")
                    .HasComment("Planned manufacturing start date.");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Workorderrouting)
                    .HasForeignKey(d => d.Locationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkOrderRouting_Location_LocationID");

                entity.HasOne(d => d.Workorder)
                    .WithMany(p => p.Workorderrouting)
                    .HasForeignKey(d => d.Workorderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkOrderRouting_WorkOrder_WorkOrderID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}