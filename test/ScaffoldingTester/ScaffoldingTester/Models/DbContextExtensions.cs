// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace ScaffoldingTester.Models
{
    public static class DbContextExtensions
    {
        [Obsolete("This method is obsolete and will be removed in the future.  Use SqlQueryToListAsync<T> instead when returning results.  Use dbContext.Database.ExecuteSqlRawAsync for calls with no results.")]
        public static async Task<List<T>?> SqlQueryAsync<T>(this DbContext db, string sql, object[]? parameters = null, CancellationToken? cancellationToken = default)
           where T : class
        {
            parameters ??= Array.Empty<object>();
            cancellationToken ??= CancellationToken.None;

            if (typeof(T).GetProperties().Any())
            {
                return await db.Database
                    .SqlQueryRaw<T>(sql, parameters)
                    .ToListAsync(cancellationToken.Value);
            }
            else
            {
                await db.Database.ExecuteSqlRawAsync(sql, parameters, cancellationToken);
                return default;
            }
        }
        
        public static async Task<List<T>> SqlQueryToListAsync<T>(this DbContext db, string sql, object[]? parameters = null, CancellationToken? cancellationToken = default)
            where T : class
        {
            return await db.Database
                .SqlQueryRaw<T>(sql, parameters ?? Array.Empty<object>())
                .ToListAsync(cancellationToken ?? CancellationToken.None);
        }
    }

    public class OutputParameter<TValue>
    {
        private bool _valueSet = false;

        public TValue? _value;

        public TValue? Value
        {
            get
            {
                if (!_valueSet)
                    throw new InvalidOperationException("Value not set.");

                return _value;
            }
        }

        internal void SetValue(object? value)
        {
            _valueSet = true;

            _value = null == value || Convert.IsDBNull(value) ? default(TValue) : (TValue)value;
        }
    }
}
